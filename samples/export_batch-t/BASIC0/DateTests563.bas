Rem Several declaration and initialisation variants for test of Analyser, Executor, and Generators 
Rem Generated by Structorizer 3.32-31 
Rem  
Rem program DateTests563
Rem TODO: Check and accomplish your variable declarations here: 

Dim today As Date

Structure Date
  Dim year As Integer
  Dim month As short
  Dim day As short
End Structure
Structure Person
  Dim name As String
  Dim birth As Date
  Dim test(2) As Integer
End Structure
Dim values(1) As Integer
Dim someDay As Date
Dim nDays As Integer
Dim me As Person
Dim explArray(2) As double
Dim dull(1) As double
Dim doof(2) As double
Dim declArray() As double
Rem  
Date someDay <- Date{day: 24, month: 2, year: 2017}
nDays <- daysInMonth423(someDay)
today <- Date{2018, 7, 20}
var me: Person <- Person{"roger", Date{1985, 3, 6}, {0, 8, 15}}
var declArray: array of double <- {9.0, 7.5, -6.4, 1.7, 0.0}
var explArray: double[3] <- {7.1, 0.5, -1.5}
double doof[3] <- {0.4}
double[2] dull <- {-12.7, 96.03}
values <- {47, 11}
End
Rem  
Rem Detects whether the given year is a leap year in the Gregorian calendar 
Rem (extrapolated backwards beyonds its inauguration) 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function isLeapYear(year) As boolean
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim isLeapYear As boolean
  Rem  
  Rem Most years aren't leap years... 
  isLeapYear <- false
  If (year mod 4 = 0) and (year mod 100 <> 0) Then
    Rem This is a standard leap year 
    isLeapYear <- true
  Elseif year mod 400 = 0 Then
    Rem One of the rare leap years 
    Rem occurring every 400 years 
    isLeapYear <- true
  End If
  Return isLeapYear
End Function
Rem  
Rem Computes the number of days the given month (1..12) 
Rem has in the the given year 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function daysInMonth423(aDate As Date) As Integer
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Structure Date
    Dim year As Integer
    Dim month As short
    Dim day As short
  End Structure
  Dim isLeap As boolean
  Dim days As Integer
  Rem  
  Rem select the case where illegal values are also considered 
  Select Case aDate.month
    Case 1, 3, 5, 7, 8, 10, 12
      days <- 31
    Case 4, 6, 9, 11
      days <- 30
    Case 2
      Rem Default value for February 
      days <- 28
      Rem To make the call work it has to be done in 
      Rem a separate element (cannot be performed 
      Rem as part of the condition of an Alternative) 
      isLeap <- isLeapYear(aDate.year)
      If isLeap Then
        days <- 29
      End If
    Case Else
      Rem This is the return value for illegal months. 
      Rem It is easy to check 
      days <- 0
  End Select
  Return days
End Function

Rem = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

