10 REM Several declaration and initialisation variants for test of Analyser, Executor, and Generators 
20 REM Generated by Structorizer 3.32-31 
30 
40 REM Copyright (C) 2017-09-18 Kay GÃ¼rtzig 
50 REM License: GPLv3-link 
60 REM GNU General Public License (V 3) 
70 REM https://www.gnu.org/licenses/gpl.html 
80 REM http://www.gnu.de/documents/gpl.de.html 
90 
100 REM  
110 REM program DateTests563
120 REM TODO: add the respective type suffixes to your variable names if required 
130 
140 DIM today AS Date
150 
160 TYPE Date
170   year AS Integer
180   month AS short
190   day AS short
200 END TYPE
210 TYPE Person
220   name AS String
230   birth AS Date
240   Dim test(2) AS Integer
250 END TYPE
260 DIM values(1) AS Integer
270 DIM someDay AS Date
280 DIM me AS Person
290 DIM explArray(2) AS double
300 DIM dull(1) AS double
310 DIM doof(2) AS double
320 DIM declArray() AS double
330 REM  
340 Date someDay <- Date{day: 24, month: 2, year: 2017}
350 nDays <- daysInMonth423(someDay)
360 today <- Date{2018, 7, 20}
370 var me: Person <- Person{"roger", Date{1985, 3, 6}, {0, 8, 15}}
380 var declArray: array of double <- {9.0, 7.5, -6.4, 1.7, 0.0}
390 var explArray: double[3] <- {7.1, 0.5, -1.5}
400 double doof[3] <- {0.4}
410 double[2] dull <- {-12.7, 96.03}
420 values <- {47, 11}
430 END
440 REM  
450 REM Detects whether the given year is a leap year in the Gregorian calendar 
460 REM (extrapolated backwards beyonds its inauguration) 
470 REM TODO: Add type-specific suffixes where necessary! 
480 FUNCTION isLeapYear(year) AS boolean
490   REM TODO: add the respective type suffixes to your variable names if required 
500   REM  
510   REM  
520   REM Most years aren't leap years... 
530   isLeapYear <- false
540   IF (year mod 4 = 0) and (year mod 100 <> 0) THEN
550     REM This is a standard leap year 
560     isLeapYear <- true
570   ELSE
580     IF year mod 400 = 0 THEN
590       REM One of the rare leap years 
600       REM occurring every 400 years 
610       isLeapYear <- true
620     END IF
630   END IF
640   RETURN isLeapYear
650 END FUNCTION
660 REM  
670 REM Computes the number of days the given month (1..12) 
680 REM has in the the given year 
690 REM TODO: Add type-specific suffixes where necessary! 
700 FUNCTION daysInMonth423(aDate AS Date) AS Integer
710   REM TODO: add the respective type suffixes to your variable names if required 
720   REM  
730   TYPE Date
740     year AS Integer
750     month AS short
760     day AS short
770   END TYPE
780   REM  
790   REM select the case where illegal values are also considered 
800   SELECT CASE aDate.month
810     CASE 1, 3, 5, 7, 8, 10, 12
820       days <- 31
830     CASE 4, 6, 9, 11
840       days <- 30
850     CASE 2
860       REM Default value for February 
870       days <- 28
880       REM To make the call work it has to be done in 
890       REM a separate element (cannot be performed 
900       REM as part of the condition of an Alternative) 
910       isLeap <- isLeapYear(aDate.year)
920       IF isLeap THEN
930         days <- 29
940       END IF
950     CASE ELSE
960       REM This is the return value for illegal months. 
970       REM It is easy to check 
980       days <- 0
990   END SELECT
1000   RETURN days
1010 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

