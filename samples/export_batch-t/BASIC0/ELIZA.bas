Rem Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
Rem "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
Rem Computational Linguistis 1(1966)9, pp. 36-45 
Rem Revision history: 
Rem 2016-10-06 Initial version 
Rem 2017-03-29 Two diagrams updated (comments translated to English) 
Rem 2017-03-29 More keywords and replies added 
Rem 2019-03-14 Replies and mapping reorganised for easier maintenance 
Rem 2019-03-15 key map joined from keyword array and index map 
Rem 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
Rem 2019-11-28 New global type "History" (to ensure a homogenous array) 
Rem 2022-01-11 Measures against substition inversions a -> b -> a in conjugateStrings, reflexions revised. 
Rem Generated by Structorizer 3.32-31 
Rem  
Rem program ELIZA
Rem TODO: Check and accomplish your variable declarations here: 

Rem histArray contains the most recent user replies as ring buffer; 
Rem histIndex is the index where the next reply is to be stored (= index of the oldest 
Rem cached user reply). 
Rem Note: The depth of the history is to be specified by initializing a variable of this type, 
Rem e.g. for a history of depth 5: 
Rem myhistory <- History{{"", "", "", "", ""}, 0} 
Rem Associates a key word in the text with an index in the reply ring array 

Dim replies(,) As String
Dim reflexions(,1) As String
Dim byePhrases(,1) As String
Dim keyMap() As KeyMapEntry
Structure History
  Dim histArray() As String
  Dim histIndex As Integer
End Structure
Structure KeyMapEntry
  Dim keyword As String
  Dim index As Integer
End Structure
Dim varPart As String
Dim userInput As String
Dim replyRing() As String
Dim reply As String
Dim posAster As Integer
Dim offsets() As Integer
Dim keyIndex As Integer
Dim isRepeated As boolean
Dim isGone As boolean
Dim history As History
Dim findInfo(1) As integer
Dim entry As KeyMapEntry
Rem  
Rem Title information 
PRINT "************* ELIZA **************"
PRINT "* Original design by J. Weizenbaum"
PRINT "**********************************"
PRINT "* Adapted for Basic on IBM PC by"
PRINT "* - Patricia Danielson"
PRINT "* - Paul Hashfield"
PRINT "**********************************"
PRINT "* Adapted for Structorizer by"
PRINT "* - Kay GÃ¼rtzig / FH Erfurt 2016"
PRINT "* Version: 2.4 (2022-01-11)"
PRINT "* (Requires at least Structorizer 3.30-03 to run)"
PRINT "**********************************"
Rem Stores the last five inputs of the user in a ring buffer, 
Rem the second component is the rolling (over-)write index. 
history <- History{{"", "", "", "", ""}, 0}
Const replies <- setupReplies()
Const reflexions <- setupReflexions()
Const byePhrases <- setupGoodByePhrases()
Const keyMap <- setupKeywords()
offsets[length(keyMap)-1] <- 0
isGone <- false
Rem Starter 
PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
Do
  INPUT userInput
  Rem Converts the input to lowercase, cuts out interpunctation 
  Rem and pads the string 
  userInput <- normalizeInput(userInput)
  isGone <- checkGoodBye(userInput, byePhrases)
  If not isGone Then
    reply <- "Please don\'t repeat yourself!"
    isRepeated <- checkRepetition(history, userInput)
    If not isRepeated Then
      findInfo <- findKeyword(keyMap, userInput)
      keyIndex <- findInfo[0]
      If keyIndex < 0 Then
        Rem Should never happen... 
        keyIndex <- length(keyMap)-1
      End If
      var entry: KeyMapEntry <- keyMap[keyIndex]
      Rem Variable part of the reply 
      varPart <- ""
      If length(entry.keyword) > 0 Then
        varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions)
      End If
      replyRing <- replies[entry.index]
      reply <- replyRing[offsets[keyIndex]]
      offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing)
      posAster <- pos("*", reply)
      If posAster > 0 Then
        If varPart = " " Then
          reply <- "You will have to elaborate more for me to help you."
        Else
          delete(reply, posAster, 1)
          insert(varPart, reply, posAster)
        End If
      End If
      reply <- adjustSpelling(reply)
    End If
    PRINT reply
  End If
Loop Until isGone
End
Rem  
Rem Cares for correct letter case among others 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function adjustSpelling(sentence As String) As String
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim word As String
  Dim start As String
  Dim result As String
  Dim position As Integer
  Rem  
  result <- sentence
  position <- 1
  Do While (position <= length(sentence)) and (copy(sentence, position, 1) = " ")
    position <- position + 1
  Loop
  If position <= length(sentence) Then
    start <- copy(sentence, 1, position)
    delete(result, 1, position)
    insert(uppercase(start), result, 1)
  End If
  For Each word In {" i ", " i\'"}
    position <- pos(word, result)
    Do While position > 0
      delete(result, position+1, 1)
      insert("I", result, position+1)
      position <- pos(word, result)
    Loop
  Next word
  Return result
End Function
Rem  
Rem Checks whether the given text contains some kind of 
Rem good-bye phrase inducing the end of the conversation 
Rem and if so writes a correspding good-bye message and 
Rem returns true, otherwise false 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function checkGoodBye(text As String, phrases As String(0,0 To 1)) As boolean
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim pair() As String
  Rem  
  For Each pair In phrases
    If pos(pair[0], text) > 0 Then
      PRINT pair[1]
      Return true
    End If
  Next pair
  Return false
End Function
Rem  
Rem Checks whether newInput has occurred among the recently cached 
Rem input strings in the histArray component of history and updates the history. 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function checkRepetition(history As History, newInput As String) As boolean
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Structure History
    Dim histArray() As String
    Dim histIndex As Integer
  End Structure
  Dim i As Integer
  Dim histDepth As Integer
  Dim hasOccurred As boolean
  Rem  
  hasOccurred <- false
  If length(newInput) > 4 Then
    histDepth <- length(history.histArray)
    For i = 0 To histDepth-1
      If newInput = history.histArray[i] Then
        hasOccurred <- true
      End If
    Next i
    history.histArray[history.histIndex] <- newInput
    history.histIndex <- (history.histIndex + 1) mod (histDepth)
  End If
  Return hasOccurred
End Function
Rem  
Rem TODO: Check (and specify if needed) the argument and result types! 
Function conjugateStrings(sentence As String, key As String, keyPos As integer, flexions As String(0,0 To 1)) As String
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim which As Integer
  Dim str As String
  Dim right As String
  Dim result As String
  Dim position As Integer
  Dim pos1 As Integer
  Dim pos0 As Integer
  Dim pair() As String
  Dim left As String
  Rem  
  result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
  For Each pair In flexions
    left <- ""
    right <- result
    pos0 <- pos(pair[0], right)
    pos1 <- pos(pair[1], right)
    Do While pos0 > 0 or pos1 > 0
      Rem Detect which of the two words of the pair matches first (lest a substitution should be reverted) 
      which <- 0
      position <- pos0
      If (pos0 = 0) or ((pos1 > 0) and (pos1 < pos0)) Then
        which <- 1
        position <- pos1
      End If
      left <- left + copy(right, 1, position-1) + pair[1 - which]
      right <- copy(right, position + length(pair[which]), length(right))
      pos0 <- pos(pair[0], right)
      pos1 <- pos(pair[1], right)
    Loop
    result <- left + right
  Next pair
  Rem Eliminate multiple spaces (replaced by single ones) and vertical bars 
  For Each str In {"  ", "|"}
    position <- pos(str, result)
    Do While position > 0
      result <- copy(result, 1, position-1) + copy(result, position+1, length(result))
      position <- pos(str, result)
    Loop
  Next str
  Return result
End Function
Rem  
Rem Looks for the occurrence of the first of the strings 
Rem contained in keywords within the given sentence (in 
Rem array order). 
Rem Returns an array of 
Rem 0: the index of the first identified keyword (if any, otherwise -1), 
Rem 1: the position inside sentence (0 if not found) 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function findKeyword(Const keyMap As KeyMapEntry(0), sentence As String) As integer(0 To 1)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Structure KeyMapEntry
    Dim keyword As String
    Dim index As Integer
  End Structure
  Dim result(1) As Integer
  Dim position As Integer
  Dim i As Integer
  Dim entry As KeyMapEntry
  Rem  
  Rem Contains the index of the keyword and its position in sentence 
  result <- {-1, 0}
  i <- 0
  Do While (result[0] < 0) and (i < length(keyMap))
    var entry: KeyMapEntry <- keyMap[i]
    position <- pos(entry.keyword, sentence)
    If position > 0 Then
      result[0] <- i
      result[1] <- position
    End If
    i <- i+1
  Loop
  Return result
End Function
Rem  
Rem Converts the sentence to lowercase, eliminates all 
Rem interpunction (i.e. ',', '.', ';'), and pads the 
Rem sentence among blanks 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function normalizeInput(sentence As String) As String
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim symbol As char
  Dim result As String
  Dim position As Integer
  Rem  
  sentence <- lowercase(sentence)
  For Each symbol In {'.', ',', ';', '!', '?'}
    position <- pos(symbol, sentence)
    Do While position > 0
      sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
      position <- pos(symbol, sentence)
    Loop
  Next symbol
  result <- " " + sentence + " "
  Return result
End Function
Rem  
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupGoodByePhrases() As String(0,0 To 1)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim phrases(,1) As String
  Rem  
  phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."}
  phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."}
  Return phrases
End Function
Rem  
Rem The lower the index the higher the rank of the keyword (search is sequential). 
Rem The index of the first keyword found in a user sentence maps to a respective 
Rem reply ring as defined in `setupReplies()Â´. 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupKeywords() As KeyMapEntry(0)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Structure KeyMapEntry
    Dim keyword As String
    Dim index As Integer
  End Structure
  Dim keywords() As KeyMapEntry
  Rem  
  Rem The empty key string (last entry) is the default clause - will always be found 
  keywords[39] <- KeyMapEntry{"", 29}
  keywords[0] <- KeyMapEntry{"can you ", 0}
  keywords[1] <- KeyMapEntry{"can i ", 1}
  keywords[2] <- KeyMapEntry{"you are ", 2}
  keywords[3] <- KeyMapEntry{"you\'re ", 2}
  keywords[4] <- KeyMapEntry{"i don't ", 3}
  keywords[5] <- KeyMapEntry{"i feel ", 4}
  keywords[6] <- KeyMapEntry{"why don\'t you ", 5}
  keywords[7] <- KeyMapEntry{"why can\'t i ", 6}
  keywords[8] <- KeyMapEntry{"are you ", 7}
  keywords[9] <- KeyMapEntry{"i can\'t ", 8}
  keywords[10] <- KeyMapEntry{"i am ", 9}
  keywords[11] <- KeyMapEntry{"i\'m ", 9}
  keywords[12] <- KeyMapEntry{"you ", 10}
  keywords[13] <- KeyMapEntry{"i want ", 11}
  keywords[14] <- KeyMapEntry{"what ", 12}
  keywords[15] <- KeyMapEntry{"how ", 12}
  keywords[16] <- KeyMapEntry{"who ", 12}
  keywords[17] <- KeyMapEntry{"where ", 12}
  keywords[18] <- KeyMapEntry{"when ", 12}
  keywords[19] <- KeyMapEntry{"why ", 12}
  keywords[20] <- KeyMapEntry{"name ", 13}
  keywords[21] <- KeyMapEntry{"cause ", 14}
  keywords[22] <- KeyMapEntry{"sorry ", 15}
  keywords[23] <- KeyMapEntry{"dream ", 16}
  keywords[24] <- KeyMapEntry{"hello ", 17}
  keywords[25] <- KeyMapEntry{"hi ", 17}
  keywords[26] <- KeyMapEntry{"maybe ", 18}
  keywords[27] <- KeyMapEntry{" no", 19}
  keywords[28] <- KeyMapEntry{"your ", 20}
  keywords[29] <- KeyMapEntry{"always ", 21}
  keywords[30] <- KeyMapEntry{"think ", 22}
  keywords[31] <- KeyMapEntry{"alike ", 23}
  keywords[32] <- KeyMapEntry{"yes ", 24}
  keywords[33] <- KeyMapEntry{"friend ", 25}
  keywords[34] <- KeyMapEntry{"computer", 26}
  keywords[35] <- KeyMapEntry{"bot ", 26}
  keywords[36] <- KeyMapEntry{"smartphone", 27}
  keywords[37] <- KeyMapEntry{"father ", 28}
  keywords[38] <- KeyMapEntry{"mother ", 28}
  Return keywords
End Function
Rem  
Rem Returns an array of pairs of mutually substitutable words 
Rem The second word may contain a '|' in order to prevent an inverse 
Rem replacement. 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupReflexions() As String(0,0 To 1)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim reflexions(,1) As String
  Rem  
  reflexions[0] <- {" are ", " am "}
  Rem This is not always helpful (e.g. if it relates to things or third persons) 
  reflexions[1] <- {" were ", " was "}
  reflexions[2] <- {" you ", " i "}
  reflexions[3] <- {" yours ", " mine "}
  reflexions[4] <- {" yourself ", " myself "}
  reflexions[5] <- {" your ", " my "}
  reflexions[6] <- {" i\'ve ", " you\'ve "}
  reflexions[7] <- {" i\'m ", " you\'re "}
  Rem We must not replace "you" by "me", not in particular after "I" had been replaced by "you". 
  reflexions[8] <- {" me ", " |you "}
  Return reflexions
End Function
Rem  
Rem This routine sets up the reply rings addressed by the key words defined in 
Rem routine `setupKeywords()Â´ and mapped hitherto by the cross table defined 
Rem in `setupMapping()Â´ 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupReplies() As String(0,0)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim setupReplies(,) As String
  Dim replies(,) As String
  Rem  
  Rem We start with the highest index for performance reasons 
  Rem (is to avoid frequent array resizing) 
  replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."}
  replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"}
  replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"}
  replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"}
  replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"}
  replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"}
  replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"}
  replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"}
  replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"}
  replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."}
  replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"}
  replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"}
  replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."}
  replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"}
  replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."}
  replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"}
  replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"}
  replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"}
  replies[17] <- { "How do you do ...please state your problem."}
  replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"}
  replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"}
  replies[20] <- { "Why are you concerned about my*?", "What about your own*?"}
  replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"}
  replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"}
  replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."}
  replies[24] <- { "Are you sure?", "I see.", "I understand."}
  replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."}
  replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"}
  replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"}
  replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"}
  setupReplies <- replies
  Return setupReplies
End Function

Rem = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

