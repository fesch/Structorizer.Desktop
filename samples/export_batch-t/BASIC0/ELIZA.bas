10 REM Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
20 REM "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
30 REM Computational Linguistis 1(1966)9, pp. 36-45 
40 REM Revision history: 
50 REM 2016-10-06 Initial version 
60 REM 2017-03-29 Two diagrams updated (comments translated to English) 
70 REM 2017-03-29 More keywords and replies added 
80 REM 2019-03-14 Replies and mapping reorganised for easier maintenance 
90 REM 2019-03-15 key map joined from keyword array and index map 
100 REM 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
110 REM 2019-11-28 New global type "History" (to ensure a homogenous array) 
120 REM 2022-01-11 Measures against substition inversions a -> b -> a in conjugateStrings, reflexions revised. 
130 REM Generated by Structorizer 3.32-32 
140 
150 REM Copyright (C) 2018-05-14 Kay Gürtzig 
160 REM License: GPLv3-link 
170 REM GNU General Public License (V 3) 
180 REM https://www.gnu.org/licenses/gpl.html 
190 REM http://www.gnu.de/documents/gpl.de.html 
200 
210 REM  
220 REM program ELIZA
230 REM TODO: add the respective type suffixes to your variable names if required 
240 
250 REM histArray contains the most recent user replies as ring buffer; 
260 REM histIndex is the index where the next reply is to be stored (= index of the oldest 
270 REM cached user reply). 
280 REM Note: The depth of the history is to be specified by initializing a variable of this type, 
290 REM e.g. for a history of depth 5: 
300 REM myhistory <- History{{"", "", "", "", ""}, 0} 
310 type History = record{histArray: array of string; histIndex: int}
320 REM Associates a key word in the text with an index in the reply ring array 
330 type KeyMapEntry = record{ keyword: string; index: int }
340 
350 REM  
360 REM Title information 
370 PRINT "************* ELIZA **************"
380 PRINT "* Original design by J. Weizenbaum"
390 PRINT "**********************************"
400 PRINT "* Adapted for Basic on IBM PC by"
410 PRINT "* - Patricia Danielson"
420 PRINT "* - Paul Hashfield"
430 PRINT "**********************************"
440 PRINT "* Adapted for Structorizer by"
450 PRINT "* - Kay Gürtzig / FH Erfurt 2016"
460 PRINT "* Version: 2.4 (2022-01-11)"
470 PRINT "* (Requires at least Structorizer 3.30-03 to run)"
480 PRINT "**********************************"
490 REM Stores the last five inputs of the user in a ring buffer, 
500 REM the second component is the rolling (over-)write index. 
510 history <- History{{"", "", "", "", ""}, 0}
520 CONST replies <- setupReplies()
530 CONST reflexions <- setupReflexions()
540 CONST byePhrases <- setupGoodByePhrases()
550 CONST keyMap <- setupKeywords()
560 offsets[length(keyMap)-1] <- 0
570 isGone <- false
580 REM Starter 
590 PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
600 DO
610   INPUT userInput
620   REM Converts the input to lowercase, cuts out interpunctation 
630   REM and pads the string 
640   userInput <- normalizeInput(userInput)
650   isGone <- checkGoodBye(userInput, byePhrases)
660   IF not isGone THEN
670     reply <- "Please don\'t repeat yourself!"
680     isRepeated <- checkRepetition(history, userInput)
690     IF not isRepeated THEN
700       findInfo <- findKeyword(keyMap, userInput)
710       keyIndex <- findInfo[0]
720       IF keyIndex < 0 THEN
730         REM Should never happen... 
740         keyIndex <- length(keyMap)-1
750       END IF
760       var entry: KeyMapEntry <- keyMap[keyIndex]
770       REM Variable part of the reply 
780       varPart <- ""
790       IF length(entry.keyword) > 0 THEN
800         varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions)
810       END IF
820       replyRing <- replies[entry.index]
830       reply <- replyRing[offsets[keyIndex]]
840       offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing)
850       posAster <- pos("*", reply)
860       IF posAster > 0 THEN
870         IF varPart = " " THEN
880           reply <- "You will have to elaborate more for me to help you."
890         ELSE
900           delete(reply, posAster, 1)
910           insert(varPart, reply, posAster)
920         END IF
930       END IF
940       reply <- adjustSpelling(reply)
950     END IF
960     PRINT reply
970   END IF
980 LOOP UNTIL isGone
990 END
1000 REM  
1010 REM Cares for correct letter case among others 
1020 REM TODO: Add type-specific suffixes where necessary! 
1030 FUNCTION adjustSpelling(sentence AS String) AS String
1040   REM TODO: add the respective type suffixes to your variable names if required 
1050   REM  
1060   REM  
1070   result <- sentence
1080   position <- 1
1090   DO WHILE (position <= length(sentence)) and (copy(sentence, position, 1) = " ")
1100     position <- position + 1
1110   LOOP
1120   IF position <= length(sentence) THEN
1130     start <- copy(sentence, 1, position)
1140     delete(result, 1, position)
1150     insert(uppercase(start), result, 1)
1160   END IF
1170   FOR EACH word IN {" i ", " i\'"}
1180     position <- pos(word, result)
1190     DO WHILE position > 0
1200       delete(result, position+1, 1)
1210       insert("I", result, position+1)
1220       position <- pos(word, result)
1230     LOOP
1240   NEXT word
1250   RETURN result
1260 END FUNCTION
1270 REM  
1280 REM Checks whether the given text contains some kind of 
1290 REM good-bye phrase inducing the end of the conversation 
1300 REM and if so writes a correspding good-bye message and 
1310 REM returns true, otherwise false 
1320 REM TODO: Add type-specific suffixes where necessary! 
1330 FUNCTION checkGoodBye(text AS String, phrases AS String(50,0 TO 1)) AS boolean
1340   REM TODO: add the respective type suffixes to your variable names if required 
1350   REM  
1360   REM  
1370   FOR EACH pair IN phrases
1380     IF pos(pair[0], text) > 0 THEN
1390       PRINT pair[1]
1400       RETURN true
1410     END IF
1420   NEXT pair
1430   RETURN false
1440 END FUNCTION
1450 REM  
1460 REM Checks whether newInput has occurred among the recently cached 
1470 REM input strings in the histArray component of history and updates the history. 
1480 REM TODO: Add type-specific suffixes where necessary! 
1490 FUNCTION checkRepetition(history AS History, newInput AS String) AS boolean
1500   REM TODO: add the respective type suffixes to your variable names if required 
1510   REM  
1520   REM  
1530   hasOccurred <- false
1540   IF length(newInput) > 4 THEN
1550     histDepth <- length(history.histArray)
1560     FOR i = 0 TO histDepth-1
1570       IF newInput = history.histArray[i] THEN
1580         hasOccurred <- true
1590       END IF
1600     NEXT i
1610     history.histArray[history.histIndex] <- newInput
1620     history.histIndex <- (history.histIndex + 1) mod (histDepth)
1630   END IF
1640   RETURN hasOccurred
1650 END FUNCTION
1660 REM  
1670 REM TODO: Add type-specific suffixes where necessary! 
1680 FUNCTION conjugateStrings(sentence AS String, key AS String, keyPos AS integer, flexions AS String(50,0 TO 1)) AS String
1690   REM TODO: add the respective type suffixes to your variable names if required 
1700   REM  
1710   REM  
1720   result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
1730   FOR EACH pair IN flexions
1740     left <- ""
1750     right <- result
1760     pos0 <- pos(pair[0], right)
1770     pos1 <- pos(pair[1], right)
1780     DO WHILE pos0 > 0 or pos1 > 0
1790       REM Detect which of the two words of the pair matches first (lest a substitution should be reverted) 
1800       which <- 0
1810       position <- pos0
1820       IF (pos0 = 0) or ((pos1 > 0) and (pos1 < pos0)) THEN
1830         which <- 1
1840         position <- pos1
1850       END IF
1860       left <- left + copy(right, 1, position-1) + pair[1 - which]
1870       right <- copy(right, position + length(pair[which]), length(right))
1880       pos0 <- pos(pair[0], right)
1890       pos1 <- pos(pair[1], right)
1900     LOOP
1910     result <- left + right
1920   NEXT pair
1930   REM Eliminate multiple spaces (replaced by single ones) and vertical bars 
1940   FOR EACH str IN {"  ", "|"}
1950     position <- pos(str, result)
1960     DO WHILE position > 0
1970       result <- copy(result, 1, position-1) + copy(result, position+1, length(result))
1980       position <- pos(str, result)
1990     LOOP
2000   NEXT str
2010   RETURN result
2020 END FUNCTION
2030 REM  
2040 REM Looks for the occurrence of the first of the strings 
2050 REM contained in keywords within the given sentence (in 
2060 REM array order). 
2070 REM Returns an array of 
2080 REM 0: the index of the first identified keyword (if any, otherwise -1), 
2090 REM 1: the position inside sentence (0 if not found) 
2100 REM TODO: Add type-specific suffixes where necessary! 
2110 FUNCTION findKeyword(CONST keyMap AS KeyMapEntry(50), sentence AS String) AS integer(0 TO 1)
2120   REM TODO: add the respective type suffixes to your variable names if required 
2130   REM  
2140   REM  
2150   REM Contains the index of the keyword and its position in sentence 
2160   result <- {-1, 0}
2170   i <- 0
2180   DO WHILE (result[0] < 0) and (i < length(keyMap))
2190     var entry: KeyMapEntry <- keyMap[i]
2200     position <- pos(entry.keyword, sentence)
2210     IF position > 0 THEN
2220       result[0] <- i
2230       result[1] <- position
2240     END IF
2250     i <- i+1
2260   LOOP
2270   RETURN result
2280 END FUNCTION
2290 REM  
2300 REM Converts the sentence to lowercase, eliminates all 
2310 REM interpunction (i.e. ',', '.', ';'), and pads the 
2320 REM sentence among blanks 
2330 REM TODO: Add type-specific suffixes where necessary! 
2340 FUNCTION normalizeInput(sentence AS String) AS String
2350   REM TODO: add the respective type suffixes to your variable names if required 
2360   REM  
2370   REM  
2380   sentence <- lowercase(sentence)
2390   FOR EACH symbol IN {'.', ',', ';', '!', '?'}
2400     position <- pos(symbol, sentence)
2410     DO WHILE position > 0
2420       sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
2430       position <- pos(symbol, sentence)
2440     LOOP
2450   NEXT symbol
2460   result <- " " + sentence + " "
2470   RETURN result
2480 END FUNCTION
2490 REM  
2500 REM TODO: Add type-specific suffixes where necessary! 
2510 FUNCTION setupGoodByePhrases() AS String(50,0 TO 1)
2520   REM TODO: add the respective type suffixes to your variable names if required 
2530   REM  
2540   REM  
2550   phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."}
2560   phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."}
2570   RETURN phrases
2580 END FUNCTION
2590 REM  
2600 REM The lower the index the higher the rank of the keyword (search is sequential). 
2610 REM The index of the first keyword found in a user sentence maps to a respective 
2620 REM reply ring as defined in `setupReplies()´. 
2630 REM TODO: Add type-specific suffixes where necessary! 
2640 FUNCTION setupKeywords() AS KeyMapEntry(50)
2650   REM TODO: add the respective type suffixes to your variable names if required 
2660   REM  
2670   REM  
2680   REM The empty key string (last entry) is the default clause - will always be found 
2690   keywords[39] <- KeyMapEntry{"", 29}
2700   keywords[0] <- KeyMapEntry{"can you ", 0}
2710   keywords[1] <- KeyMapEntry{"can i ", 1}
2720   keywords[2] <- KeyMapEntry{"you are ", 2}
2730   keywords[3] <- KeyMapEntry{"you\'re ", 2}
2740   keywords[4] <- KeyMapEntry{"i don't ", 3}
2750   keywords[5] <- KeyMapEntry{"i feel ", 4}
2760   keywords[6] <- KeyMapEntry{"why don\'t you ", 5}
2770   keywords[7] <- KeyMapEntry{"why can\'t i ", 6}
2780   keywords[8] <- KeyMapEntry{"are you ", 7}
2790   keywords[9] <- KeyMapEntry{"i can\'t ", 8}
2800   keywords[10] <- KeyMapEntry{"i am ", 9}
2810   keywords[11] <- KeyMapEntry{"i\'m ", 9}
2820   keywords[12] <- KeyMapEntry{"you ", 10}
2830   keywords[13] <- KeyMapEntry{"i want ", 11}
2840   keywords[14] <- KeyMapEntry{"what ", 12}
2850   keywords[15] <- KeyMapEntry{"how ", 12}
2860   keywords[16] <- KeyMapEntry{"who ", 12}
2870   keywords[17] <- KeyMapEntry{"where ", 12}
2880   keywords[18] <- KeyMapEntry{"when ", 12}
2890   keywords[19] <- KeyMapEntry{"why ", 12}
2900   keywords[20] <- KeyMapEntry{"name ", 13}
2910   keywords[21] <- KeyMapEntry{"cause ", 14}
2920   keywords[22] <- KeyMapEntry{"sorry ", 15}
2930   keywords[23] <- KeyMapEntry{"dream ", 16}
2940   keywords[24] <- KeyMapEntry{"hello ", 17}
2950   keywords[25] <- KeyMapEntry{"hi ", 17}
2960   keywords[26] <- KeyMapEntry{"maybe ", 18}
2970   keywords[27] <- KeyMapEntry{" no", 19}
2980   keywords[28] <- KeyMapEntry{"your ", 20}
2990   keywords[29] <- KeyMapEntry{"always ", 21}
3000   keywords[30] <- KeyMapEntry{"think ", 22}
3010   keywords[31] <- KeyMapEntry{"alike ", 23}
3020   keywords[32] <- KeyMapEntry{"yes ", 24}
3030   keywords[33] <- KeyMapEntry{"friend ", 25}
3040   keywords[34] <- KeyMapEntry{"computer", 26}
3050   keywords[35] <- KeyMapEntry{"bot ", 26}
3060   keywords[36] <- KeyMapEntry{"smartphone", 27}
3070   keywords[37] <- KeyMapEntry{"father ", 28}
3080   keywords[38] <- KeyMapEntry{"mother ", 28}
3090   RETURN keywords
3100 END FUNCTION
3110 REM  
3120 REM Returns an array of pairs of mutually substitutable words 
3130 REM The second word may contain a '|' in order to prevent an inverse 
3140 REM replacement. 
3150 REM TODO: Add type-specific suffixes where necessary! 
3160 FUNCTION setupReflexions() AS String(50,0 TO 1)
3170   REM TODO: add the respective type suffixes to your variable names if required 
3180   REM  
3190   REM  
3200   reflexions[0] <- {" are ", " am "}
3210   REM This is not always helpful (e.g. if it relates to things or third persons) 
3220   reflexions[1] <- {" were ", " was "}
3230   reflexions[2] <- {" you ", " i "}
3240   reflexions[3] <- {" yours ", " mine "}
3250   reflexions[4] <- {" yourself ", " myself "}
3260   reflexions[5] <- {" your ", " my "}
3270   reflexions[6] <- {" i\'ve ", " you\'ve "}
3280   reflexions[7] <- {" i\'m ", " you\'re "}
3290   REM We must not replace "you" by "me", not in particular after "I" had been replaced by "you". 
3300   reflexions[8] <- {" me ", " |you "}
3310   RETURN reflexions
3320 END FUNCTION
3330 REM  
3340 REM This routine sets up the reply rings addressed by the key words defined in 
3350 REM routine `setupKeywords()´ and mapped hitherto by the cross table defined 
3360 REM in `setupMapping()´ 
3370 REM TODO: Add type-specific suffixes where necessary! 
3380 FUNCTION setupReplies() AS String(50,50)
3390   REM TODO: add the respective type suffixes to your variable names if required 
3400   REM  
3410   REM  
3420   var replies: array of array of String
3430   REM We start with the highest index for performance reasons 
3440   REM (is to avoid frequent array resizing) 
3450   replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."}
3460   replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"}
3470   replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"}
3480   replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"}
3490   replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"}
3500   replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"}
3510   replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"}
3520   replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"}
3530   replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"}
3540   replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."}
3550   replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"}
3560   replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"}
3570   replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."}
3580   replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"}
3590   replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."}
3600   replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"}
3610   replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"}
3620   replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"}
3630   replies[17] <- { "How do you do ...please state your problem."}
3640   replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"}
3650   replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"}
3660   replies[20] <- { "Why are you concerned about my*?", "What about your own*?"}
3670   replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"}
3680   replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"}
3690   replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."}
3700   replies[24] <- { "Are you sure?", "I see.", "I understand."}
3710   replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."}
3720   replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"}
3730   replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"}
3740   replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"}
3750   setupReplies <- replies
3760   RETURN setupReplies
3770 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

