10 REM Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
20 REM "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
30 REM Computational Linguistis 1(1966)9, pp. 36-45 
40 REM Revision history: 
50 REM 2016-10-06 Initial version 
60 REM 2017-03-29 Two diagrams updated (comments translated to English) 
70 REM 2017-03-29 More keywords and replies added 
80 REM 2019-03-14 Replies and mapping reorganised for easier maintenance 
90 REM 2019-03-15 key map joined from keyword array and index map 
100 REM 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
110 REM 2019-11-28 New global type "History" (to ensure a homogenous array) 
120 REM Generated by Structorizer 3.32-32 
130 
140 REM Copyright (C) 2018-05-14 Kay Gürtzig 
150 REM License: GPLv3-link 
160 REM GNU General Public License (V 3) 
170 REM https://www.gnu.org/licenses/gpl.html 
180 REM http://www.gnu.de/documents/gpl.de.html 
190 
200 REM  
210 REM program ELIZA
220 REM TODO: add the respective type suffixes to your variable names if required 
230 
240 REM histArray contains the most recent user replies as ring buffer; 
250 REM histIndex is the index where the next reply is to be stored (= index of the oldest 
260 REM cached user reply). 
270 REM Note: The depth of the history is to be specified by initializing a variable of this type, 
280 REM e.g. for a history of depth 5: 
290 REM myhistory <- History{{"", "", "", "", ""}, 0} 
300 type History = record{histArray: array of string; histIndex: int}
310 REM Associates a key word in the text with an index in the reply ring array 
320 type KeyMapEntry = record{ keyword: string; index: int }
330 
340 REM  
350 REM Title information 
360 PRINT "************* ELIZA **************"
370 PRINT "* Original design by J. Weizenbaum"
380 PRINT "**********************************"
390 PRINT "* Adapted for Basic on IBM PC by"
400 PRINT "* - Patricia Danielson"
410 PRINT "* - Paul Hashfield"
420 PRINT "**********************************"
430 PRINT "* Adapted for Structorizer by"
440 PRINT "* - Kay Gürtzig / FH Erfurt 2016"
450 PRINT "* Version: 2.3 (2020-02-24)"
460 PRINT "* (Requires at least Structorizer 3.30-03 to run)"
470 PRINT "**********************************"
480 REM Stores the last five inputs of the user in a ring buffer, 
490 REM the second component is the rolling (over-)write index. 
500 history <- History{{"", "", "", "", ""}, 0}
510 CONST replies <- setupReplies()
520 CONST reflexions <- setupReflexions()
530 CONST byePhrases <- setupGoodByePhrases()
540 CONST keyMap <- setupKeywords()
550 offsets[length(keyMap)-1] <- 0
560 isGone <- false
570 REM Starter 
580 PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
590 DO
600   INPUT userInput
610   REM Converts the input to lowercase, cuts out interpunctation 
620   REM and pads the string 
630   userInput <- normalizeInput(userInput)
640   isGone <- checkGoodBye(userInput, byePhrases)
650   IF not isGone THEN
660     reply <- "Please don\'t repeat yourself!"
670     isRepeated <- checkRepetition(history, userInput)
680     IF not isRepeated THEN
690       findInfo <- findKeyword(keyMap, userInput)
700       keyIndex <- findInfo[0]
710       IF keyIndex < 0 THEN
720         REM Should never happen... 
730         keyIndex <- length(keyMap)-1
740       END IF
750       var entry: KeyMapEntry <- keyMap[keyIndex]
760       REM Variable part of the reply 
770       varPart <- ""
780       IF length(entry.keyword) > 0 THEN
790         varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions)
800       END IF
810       replyRing <- replies[entry.index]
820       reply <- replyRing[offsets[keyIndex]]
830       offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing)
840       posAster <- pos("*", reply)
850       IF posAster > 0 THEN
860         IF varPart = " " THEN
870           reply <- "You will have to elaborate more for me to help you."
880         ELSE
890           delete(reply, posAster, 1)
900           insert(varPart, reply, posAster)
910         END IF
920       END IF
930       reply <- adjustSpelling(reply)
940     END IF
950     PRINT reply
960   END IF
970 LOOP UNTIL isGone
980 END
990 REM  
1000 REM Cares for correct letter case among others 
1010 REM TODO: Add type-specific suffixes where necessary! 
1020 FUNCTION adjustSpelling(sentence AS String) AS String
1030   REM TODO: add the respective type suffixes to your variable names if required 
1040   REM  
1050   REM  
1060   result <- sentence
1070   position <- 1
1080   DO WHILE (position <= length(sentence)) and (copy(sentence, position, 1) = " ")
1090     position <- position + 1
1100   LOOP
1110   IF position <= length(sentence) THEN
1120     start <- copy(sentence, 1, position)
1130     delete(result, 1, position)
1140     insert(uppercase(start), result, 1)
1150   END IF
1160   FOR EACH word IN {" i ", " i\'"}
1170     position <- pos(word, result)
1180     DO WHILE position > 0
1190       delete(result, position+1, 1)
1200       insert("I", result, position+1)
1210       position <- pos(word, result)
1220     LOOP
1230   NEXT word
1240   RETURN result
1250 END FUNCTION
1260 REM  
1270 REM Checks whether the given text contains some kind of 
1280 REM good-bye phrase inducing the end of the conversation 
1290 REM and if so writes a correspding good-bye message and 
1300 REM returns true, otherwise false 
1310 REM TODO: Add type-specific suffixes where necessary! 
1320 FUNCTION checkGoodBye(text AS String, phrases AS String(50,0 TO 1)) AS boolean
1330   REM TODO: add the respective type suffixes to your variable names if required 
1340   REM  
1350   REM  
1360   FOR EACH pair IN phrases
1370     IF pos(pair[0], text) > 0 THEN
1380       PRINT pair[1]
1390       RETURN true
1400     END IF
1410   NEXT pair
1420   RETURN false
1430 END FUNCTION
1440 REM  
1450 REM Checks whether newInput has occurred among the recently cached 
1460 REM input strings in the histArray component of history and updates the history. 
1470 REM TODO: Add type-specific suffixes where necessary! 
1480 FUNCTION checkRepetition(history AS History, newInput AS String) AS boolean
1490   REM TODO: add the respective type suffixes to your variable names if required 
1500   REM  
1510   REM  
1520   hasOccurred <- false
1530   IF length(newInput) > 4 THEN
1540     histDepth <- length(history.histArray)
1550     FOR i = 0 TO histDepth-1
1560       IF newInput = history.histArray[i] THEN
1570         hasOccurred <- true
1580       END IF
1590     NEXT i
1600     history.histArray[history.histIndex] <- newInput
1610     history.histIndex <- (history.histIndex + 1) mod (histDepth)
1620   END IF
1630   RETURN hasOccurred
1640 END FUNCTION
1650 REM  
1660 REM TODO: Add type-specific suffixes where necessary! 
1670 FUNCTION conjugateStrings(sentence AS String, key AS String, keyPos AS integer, flexions AS String(50,0 TO 1)) AS String
1680   REM TODO: add the respective type suffixes to your variable names if required 
1690   REM  
1700   REM  
1710   result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
1720   FOR EACH pair IN flexions
1730     left <- ""
1740     right <- result
1750     position <- pos(pair[0], right)
1760     DO WHILE position > 0
1770       left <- left + copy(right, 1, position-1) + pair[1]
1780       right <- copy(right, position + length(pair[0]), length(right))
1790       position <- pos(pair[0], right)
1800     LOOP
1810     result <- left + right
1820   NEXT pair
1830   REM Eliminate multiple spaces 
1840   position <- pos("  ", result)
1850   DO WHILE position > 0
1860     result <- copy(result, 1, position-1) + copy(result, position+1, length(result))
1870     position <- pos("  ", result)
1880   LOOP
1890   RETURN result
1900 END FUNCTION
1910 REM  
1920 REM Looks for the occurrence of the first of the strings 
1930 REM contained in keywords within the given sentence (in 
1940 REM array order). 
1950 REM Returns an array of 
1960 REM 0: the index of the first identified keyword (if any, otherwise -1), 
1970 REM 1: the position inside sentence (0 if not found) 
1980 REM TODO: Add type-specific suffixes where necessary! 
1990 FUNCTION findKeyword(CONST keyMap AS KeyMapEntry(50), sentence AS String) AS integer(0 TO 1)
2000   REM TODO: add the respective type suffixes to your variable names if required 
2010   REM  
2020   REM  
2030   REM Contains the index of the keyword and its position in sentence 
2040   result <- {-1, 0}
2050   i <- 0
2060   DO WHILE (result[0] < 0) and (i < length(keyMap))
2070     var entry: KeyMapEntry <- keyMap[i]
2080     position <- pos(entry.keyword, sentence)
2090     IF position > 0 THEN
2100       result[0] <- i
2110       result[1] <- position
2120     END IF
2130     i <- i+1
2140   LOOP
2150   RETURN result
2160 END FUNCTION
2170 REM  
2180 REM Converts the sentence to lowercase, eliminates all 
2190 REM interpunction (i.e. ',', '.', ';'), and pads the 
2200 REM sentence among blanks 
2210 REM TODO: Add type-specific suffixes where necessary! 
2220 FUNCTION normalizeInput(sentence AS String) AS String
2230   REM TODO: add the respective type suffixes to your variable names if required 
2240   REM  
2250   REM  
2260   sentence <- lowercase(sentence)
2270   FOR EACH symbol IN {'.', ',', ';', '!', '?'}
2280     position <- pos(symbol, sentence)
2290     DO WHILE position > 0
2300       sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
2310       position <- pos(symbol, sentence)
2320     LOOP
2330   NEXT symbol
2340   result <- " " + sentence + " "
2350   RETURN result
2360 END FUNCTION
2370 REM  
2380 REM TODO: Add type-specific suffixes where necessary! 
2390 FUNCTION setupGoodByePhrases() AS String(50,0 TO 1)
2400   REM TODO: add the respective type suffixes to your variable names if required 
2410   REM  
2420   REM  
2430   phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."}
2440   phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."}
2450   RETURN phrases
2460 END FUNCTION
2470 REM  
2480 REM The lower the index the higher the rank of the keyword (search is sequential). 
2490 REM The index of the first keyword found in a user sentence maps to a respective 
2500 REM reply ring as defined in `setupReplies()´. 
2510 REM TODO: Add type-specific suffixes where necessary! 
2520 FUNCTION setupKeywords() AS KeyMapEntry(50)
2530   REM TODO: add the respective type suffixes to your variable names if required 
2540   REM  
2550   REM  
2560   REM The empty key string (last entry) is the default clause - will always be found 
2570   keywords[39] <- KeyMapEntry{"", 29}
2580   keywords[0] <- KeyMapEntry{"can you ", 0}
2590   keywords[1] <- KeyMapEntry{"can i ", 1}
2600   keywords[2] <- KeyMapEntry{"you are ", 2}
2610   keywords[3] <- KeyMapEntry{"you\'re ", 2}
2620   keywords[4] <- KeyMapEntry{"i don't ", 3}
2630   keywords[5] <- KeyMapEntry{"i feel ", 4}
2640   keywords[6] <- KeyMapEntry{"why don\'t you ", 5}
2650   keywords[7] <- KeyMapEntry{"why can\'t i ", 6}
2660   keywords[8] <- KeyMapEntry{"are you ", 7}
2670   keywords[9] <- KeyMapEntry{"i can\'t ", 8}
2680   keywords[10] <- KeyMapEntry{"i am ", 9}
2690   keywords[11] <- KeyMapEntry{"i\'m ", 9}
2700   keywords[12] <- KeyMapEntry{"you ", 10}
2710   keywords[13] <- KeyMapEntry{"i want ", 11}
2720   keywords[14] <- KeyMapEntry{"what ", 12}
2730   keywords[15] <- KeyMapEntry{"how ", 12}
2740   keywords[16] <- KeyMapEntry{"who ", 12}
2750   keywords[17] <- KeyMapEntry{"where ", 12}
2760   keywords[18] <- KeyMapEntry{"when ", 12}
2770   keywords[19] <- KeyMapEntry{"why ", 12}
2780   keywords[20] <- KeyMapEntry{"name ", 13}
2790   keywords[21] <- KeyMapEntry{"cause ", 14}
2800   keywords[22] <- KeyMapEntry{"sorry ", 15}
2810   keywords[23] <- KeyMapEntry{"dream ", 16}
2820   keywords[24] <- KeyMapEntry{"hello ", 17}
2830   keywords[25] <- KeyMapEntry{"hi ", 17}
2840   keywords[26] <- KeyMapEntry{"maybe ", 18}
2850   keywords[27] <- KeyMapEntry{" no", 19}
2860   keywords[28] <- KeyMapEntry{"your ", 20}
2870   keywords[29] <- KeyMapEntry{"always ", 21}
2880   keywords[30] <- KeyMapEntry{"think ", 22}
2890   keywords[31] <- KeyMapEntry{"alike ", 23}
2900   keywords[32] <- KeyMapEntry{"yes ", 24}
2910   keywords[33] <- KeyMapEntry{"friend ", 25}
2920   keywords[34] <- KeyMapEntry{"computer", 26}
2930   keywords[35] <- KeyMapEntry{"bot ", 26}
2940   keywords[36] <- KeyMapEntry{"smartphone", 27}
2950   keywords[37] <- KeyMapEntry{"father ", 28}
2960   keywords[38] <- KeyMapEntry{"mother ", 28}
2970   RETURN keywords
2980 END FUNCTION
2990 REM  
3000 REM Returns an array of pairs of mutualy substitutable  
3010 REM TODO: Add type-specific suffixes where necessary! 
3020 FUNCTION setupReflexions() AS String(50,0 TO 1)
3030   REM TODO: add the respective type suffixes to your variable names if required 
3040   REM  
3050   REM  
3060   reflexions[0] <- {" are ", " am "}
3070   reflexions[1] <- {" were ", " was "}
3080   reflexions[2] <- {" you ", " I "}
3090   reflexions[3] <- {" your", " my"}
3100   reflexions[4] <- {" i\'ve ", " you\'ve "}
3110   reflexions[5] <- {" i\'m ", " you\'re "}
3120   reflexions[6] <- {" me ", " you "}
3130   reflexions[7] <- {" my ", " your "}
3140   reflexions[8] <- {" i ", " you "}
3150   reflexions[9] <- {" am ", " are "}
3160   RETURN reflexions
3170 END FUNCTION
3180 REM  
3190 REM This routine sets up the reply rings addressed by the key words defined in 
3200 REM routine `setupKeywords()´ and mapped hitherto by the cross table defined 
3210 REM in `setupMapping()´ 
3220 REM TODO: Add type-specific suffixes where necessary! 
3230 FUNCTION setupReplies() AS String(50,50)
3240   REM TODO: add the respective type suffixes to your variable names if required 
3250   REM  
3260   REM  
3270   var replies: array of array of String
3280   REM We start with the highest index for performance reasons 
3290   REM (is to avoid frequent array resizing) 
3300   replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."}
3310   replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"}
3320   replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"}
3330   replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"}
3340   replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"}
3350   replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"}
3360   replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"}
3370   replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"}
3380   replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"}
3390   replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."}
3400   replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"}
3410   replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"}
3420   replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."}
3430   replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"}
3440   replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."}
3450   replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"}
3460   replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"}
3470   replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"}
3480   replies[17] <- { "How do you do ...please state your problem."}
3490   replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"}
3500   replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"}
3510   replies[20] <- { "Why are you concerned about my*?", "What about your own*?"}
3520   replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"}
3530   replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"}
3540   replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."}
3550   replies[24] <- { "Are you sure?", "I see.", "I understand."}
3560   replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."}
3570   replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"}
3580   replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"}
3590   replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"}
3600   setupReplies <- replies
3610   RETURN setupReplies
3620 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

