10 REM Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
20 REM "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
30 REM Computational Linguistis 1(1966)9, pp. 36-45 
40 REM Revision history: 
50 REM 2016-10-06 Initial version 
60 REM 2017-03-29 Two diagrams updated (comments translated to English) 
70 REM 2017-03-29 More keywords and replies added 
80 REM 2019-03-14 Replies and mapping reorganised for easier maintenance 
90 REM 2019-03-15 key map joined from keyword array and index map 
100 REM 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
110 REM Generated by Structorizer 3.32-32 
120 
130 REM Copyright (C) 2018-05-14 ??? 
140 REM License: GPLv3-link 
150 REM GNU General Public License (V 3) 
160 REM https://www.gnu.org/licenses/gpl.html 
170 REM http://www.gnu.de/documents/gpl.de.html 
180 
190 REM  
200 REM program ELIZA
210 REM TODO: add the respective type suffixes to your variable names if required 
220 
230 type KeyMapEntry = record{ keyword: string; index: int }
240 
250 REM  
260 REM Title information 
270 PRINT "************* ELIZA **************"
280 PRINT "* Original design by J. Weizenbaum"
290 PRINT "**********************************"
300 PRINT "* Adapted for Basic on IBM PC by"
310 PRINT "* - Patricia Danielson"
320 PRINT "* - Paul Hashfield"
330 PRINT "**********************************"
340 PRINT "* Adapted for Structorizer by"
350 PRINT "* - Kay Gürtzig / FH Erfurt 2016"
360 PRINT "* Version: 2.2 (2019-03-28)"
370 PRINT "**********************************"
380 REM Stores the last five inputs of the user in a ring buffer, 
390 REM the first element is the current insertion index 
400 history <- {0, "", "", "", "", ""}
410 CONST replies <- setupReplies()
420 CONST reflexions <- setupReflexions()
430 CONST byePhrases <- setupGoodByePhrases()
440 CONST keyMap <- setupKeywords()
450 offsets[length(keyMap)-1] <- 0
460 isGone <- false
470 REM Starter 
480 PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
490 DO
500   INPUT userInput
510   REM Converts the input to lowercase, cuts out interpunctation 
520   REM and pads the string 
530   userInput <- normalizeInput(userInput)
540   isGone <- checkGoodBye(userInput, byePhrases)
550   IF not isGone THEN
560     reply <- "Please don\'t repeat yourself!"
570     isRepeated <- checkRepetition(history, userInput)
580     IF not isRepeated THEN
590       findInfo <- findKeyword(keyMap, userInput)
600       keyIndex <- findInfo[0]
610       IF keyIndex < 0 THEN
620         REM Should never happen... 
630         keyIndex <- length(keyMap)-1
640       END IF
650       var entry: KeyMapEntry <- keyMap[keyIndex]
660       REM Variable part of the reply 
670       varPart <- ""
680       IF length(entry.keyword) > 0 THEN
690         varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions)
700       END IF
710       replyRing <- replies[entry.index]
720       reply <- replyRing[offsets[keyIndex]]
730       offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing)
740       posAster <- pos("*", reply)
750       IF posAster > 0 THEN
760         IF varPart = " " THEN
770           reply <- "You will have to elaborate more for me to help you."
780         ELSE
790           delete(reply, posAster, 1)
800           insert(varPart, reply, posAster)
810         END IF
820       END IF
830       reply <- adjustSpelling(reply)
840     END IF
850     PRINT reply
860   END IF
870 LOOP UNTIL isGone
880 END
890 REM  
900 REM Cares for correct letter case among others 
910 REM TODO: Add type-specific suffixes where necessary! 
920 FUNCTION adjustSpelling(sentence AS String) AS String
930   REM TODO: add the respective type suffixes to your variable names if required 
940   REM  
950   REM  
960   result <- sentence
970   position <- 1
980   DO WHILE (position <= length(sentence)) and (copy(sentence, position, 1) = " ")
990     position <- position + 1
1000   LOOP
1010   IF position <= length(sentence) THEN
1020     start <- copy(sentence, 1, position)
1030     delete(result, 1, position)
1040     insert(uppercase(start), result, 1)
1050   END IF
1060   FOR EACH word IN {" i ", " i\'"}
1070     position <- pos(word, result)
1080     DO WHILE position > 0
1090       delete(result, position+1, 1)
1100       insert("I", result, position+1)
1110       position <- pos(word, result)
1120     LOOP
1130   NEXT word
1140   RETURN result
1150 END FUNCTION
1160 REM  
1170 REM Checks whether the given text contains some kind of 
1180 REM good-bye phrase inducing the end of the conversation 
1190 REM and if so writes a correspding good-bye message and 
1200 REM returns true, otherwise false 
1210 REM TODO: Add type-specific suffixes where necessary! 
1220 FUNCTION checkGoodBye(text AS String, phrases AS String(50,0 TO 1)) AS boolean
1230   REM TODO: add the respective type suffixes to your variable names if required 
1240   REM  
1250   REM  
1260   FOR EACH pair IN phrases
1270     IF pos(pair[0], text) > 0 THEN
1280       saidBye <- true
1290       PRINT pair[1]
1300       RETURN true
1310     END IF
1320   NEXT pair
1330   RETURN false
1340 END FUNCTION
1350 REM  
1360 REM Checks whether newInput has occurred among the last 
1370 REM length(history) - 1 input strings and updates the history 
1380 REM TODO: Add type-specific suffixes where necessary! 
1390 FUNCTION checkRepetition(history AS array, newInput AS String) AS boolean
1400   REM TODO: add the respective type suffixes to your variable names if required 
1410   REM  
1420   REM  
1430   hasOccurred <- false
1440   IF length(newInput) > 4 THEN
1450     currentIndex <- history[0];
1460     FOR i = 1 TO length(history)-1
1470       IF newInput = history[i] THEN
1480         hasOccurred <- true
1490       END IF
1500     NEXT i
1510     history[history[0]+1] <- newInput
1520     history[0] <- (history[0] + 1) mod (length(history) - 1)
1530   END IF
1540   RETURN hasOccurred
1550 END FUNCTION
1560 REM  
1570 REM TODO: Add type-specific suffixes where necessary! 
1580 FUNCTION conjugateStrings(sentence AS String, key AS String, keyPos AS integer, flexions AS String(50,0 TO 1)) AS String
1590   REM TODO: add the respective type suffixes to your variable names if required 
1600   REM  
1610   REM  
1620   result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
1630   FOR EACH pair IN flexions
1640     left <- ""
1650     right <- result
1660     position <- pos(pair[0], right)
1670     DO WHILE position > 0
1680       left <- left + copy(right, 1, position-1) + pair[1]
1690       right <- copy(right, position + length(pair[0]), length(right))
1700       position <- pos(pair[0], right)
1710     LOOP
1720     result <- left + right
1730   NEXT pair
1740   REM Eliminate multiple spaces 
1750   position <- pos("  ", result)
1760   DO WHILE position > 0
1770     result <- copy(result, 1, position-1) + copy(result, position+1, length(result))
1780     position <- pos("  ", result)
1790   LOOP
1800   RETURN result
1810 END FUNCTION
1820 REM  
1830 REM Looks for the occurrence of the first of the strings 
1840 REM contained in keywords within the given sentence (in 
1850 REM array order). 
1860 REM Returns an array of 
1870 REM 0: the index of the first identified keyword (if any, otherwise -1), 
1880 REM 1: the position inside sentence (0 if not found) 
1890 REM TODO: Add type-specific suffixes where necessary! 
1900 FUNCTION findKeyword(CONST keyMap AS KeyMapEntry(50), sentence AS String) AS integer(0 TO 1)
1910   REM TODO: add the respective type suffixes to your variable names if required 
1920   REM  
1930   REM  
1940   REM Contains the index of the keyword and its position in sentence 
1950   result <- {-1, 0}
1960   i <- 0
1970   DO WHILE (result[0] < 0) and (i < length(keyMap))
1980     var entry: KeyMapEntry <- keyMap[i]
1990     position <- pos(entry.keyword, sentence)
2000     IF position > 0 THEN
2010       result[0] <- i
2020       result[1] <- position
2030     END IF
2040     i <- i+1
2050   LOOP
2060   RETURN result
2070 END FUNCTION
2080 REM  
2090 REM Converts the sentence to lowercase, eliminates all 
2100 REM interpunction (i.e. ',', '.', ';'), and pads the 
2110 REM sentence among blanks 
2120 REM TODO: Add type-specific suffixes where necessary! 
2130 FUNCTION normalizeInput(sentence AS String) AS String
2140   REM TODO: add the respective type suffixes to your variable names if required 
2150   REM  
2160   REM  
2170   sentence <- lowercase(sentence)
2180   FOR EACH symbol IN {'.', ',', ';', '!', '?'}
2190     position <- pos(symbol, sentence)
2200     DO WHILE position > 0
2210       sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
2220       position <- pos(symbol, sentence)
2230     LOOP
2240   NEXT symbol
2250   result <- " " + sentence + " "
2260   RETURN result
2270 END FUNCTION
2280 REM  
2290 REM TODO: Add type-specific suffixes where necessary! 
2300 FUNCTION setupGoodByePhrases() AS String(50,0 TO 1)
2310   REM TODO: add the respective type suffixes to your variable names if required 
2320   REM  
2330   REM  
2340   phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."}
2350   phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."}
2360   RETURN phrases
2370 END FUNCTION
2380 REM  
2390 REM The lower the index the higher the rank of the keyword (search is sequential). 
2400 REM The index of the first keyword found in a user sentence maps to a respective 
2410 REM reply ring as defined in `setupReplies()´. 
2420 REM TODO: Add type-specific suffixes where necessary! 
2430 FUNCTION setupKeywords() AS KeyMapEntry(50)
2440   REM TODO: add the respective type suffixes to your variable names if required 
2450   REM  
2460   REM  
2470   REM The empty key string (last entry) is the default clause - will always be found 
2480   keywords[39] <- KeyMapEntry{"", 29}
2490   keywords[0] <- KeyMapEntry{"can you ", 0}
2500   keywords[1] <- KeyMapEntry{"can i ", 1}
2510   keywords[2] <- KeyMapEntry{"you are ", 2}
2520   keywords[3] <- KeyMapEntry{"you\'re ", 2}
2530   keywords[4] <- KeyMapEntry{"i don't ", 3}
2540   keywords[5] <- KeyMapEntry{"i feel ", 4}
2550   keywords[6] <- KeyMapEntry{"why don\'t you ", 5}
2560   keywords[7] <- KeyMapEntry{"why can\'t i ", 6}
2570   keywords[8] <- KeyMapEntry{"are you ", 7}
2580   keywords[9] <- KeyMapEntry{"i can\'t ", 8}
2590   keywords[10] <- KeyMapEntry{"i am ", 9}
2600   keywords[11] <- KeyMapEntry{"i\'m ", 9}
2610   keywords[12] <- KeyMapEntry{"you ", 10}
2620   keywords[13] <- KeyMapEntry{"i want ", 11}
2630   keywords[14] <- KeyMapEntry{"what ", 12}
2640   keywords[15] <- KeyMapEntry{"how ", 12}
2650   keywords[16] <- KeyMapEntry{"who ", 12}
2660   keywords[17] <- KeyMapEntry{"where ", 12}
2670   keywords[18] <- KeyMapEntry{"when ", 12}
2680   keywords[19] <- KeyMapEntry{"why ", 12}
2690   keywords[20] <- KeyMapEntry{"name ", 13}
2700   keywords[21] <- KeyMapEntry{"cause ", 14}
2710   keywords[22] <- KeyMapEntry{"sorry ", 15}
2720   keywords[23] <- KeyMapEntry{"dream ", 16}
2730   keywords[24] <- KeyMapEntry{"hello ", 17}
2740   keywords[25] <- KeyMapEntry{"hi ", 17}
2750   keywords[26] <- KeyMapEntry{"maybe ", 18}
2760   keywords[27] <- KeyMapEntry{" no", 19}
2770   keywords[28] <- KeyMapEntry{"your ", 20}
2780   keywords[29] <- KeyMapEntry{"always ", 21}
2790   keywords[30] <- KeyMapEntry{"think ", 22}
2800   keywords[31] <- KeyMapEntry{"alike ", 23}
2810   keywords[32] <- KeyMapEntry{"yes ", 24}
2820   keywords[33] <- KeyMapEntry{"friend ", 25}
2830   keywords[34] <- KeyMapEntry{"computer", 26}
2840   keywords[35] <- KeyMapEntry{"bot ", 26}
2850   keywords[36] <- KeyMapEntry{"smartphone", 27}
2860   keywords[37] <- KeyMapEntry{"father ", 28}
2870   keywords[38] <- KeyMapEntry{"mother ", 28}
2880   RETURN keywords
2890 END FUNCTION
2900 REM  
2910 REM Returns an array of pairs of mutualy substitutable  
2920 REM TODO: Add type-specific suffixes where necessary! 
2930 FUNCTION setupReflexions() AS String(50,0 TO 1)
2940   REM TODO: add the respective type suffixes to your variable names if required 
2950   REM  
2960   REM  
2970   reflexions[0] <- {" are ", " am "}
2980   reflexions[1] <- {" were ", " was "}
2990   reflexions[2] <- {" you ", " I "}
3000   reflexions[3] <- {" your", " my"}
3010   reflexions[4] <- {" i\'ve ", " you\'ve "}
3020   reflexions[5] <- {" i\'m ", " you\'re "}
3030   reflexions[6] <- {" me ", " you "}
3040   reflexions[7] <- {" my ", " your "}
3050   reflexions[8] <- {" i ", " you "}
3060   reflexions[9] <- {" am ", " are "}
3070   RETURN reflexions
3080 END FUNCTION
3090 REM  
3100 REM This routine sets up the reply rings addressed by the key words defined in 
3110 REM routine `setupKeywords()´ and mapped hitherto by the cross table defined 
3120 REM in `setupMapping()´ 
3130 REM TODO: Add type-specific suffixes where necessary! 
3140 FUNCTION setupReplies() AS String(50,50)
3150   REM TODO: add the respective type suffixes to your variable names if required 
3160   REM  
3170   REM  
3180   var replies: array of array of String
3190   REM We start with the highest index for performance reasons 
3200   REM (is to avoid frequent array resizing) 
3210   replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."}
3220   replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"}
3230   replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"}
3240   replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"}
3250   replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"}
3260   replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"}
3270   replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"}
3280   replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"}
3290   replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"}
3300   replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."}
3310   replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"}
3320   replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"}
3330   replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."}
3340   replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"}
3350   replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."}
3360   replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"}
3370   replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"}
3380   replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"}
3390   replies[17] <- { "How do you do ...please state your problem."}
3400   replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"}
3410   replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"}
3420   replies[20] <- { "Why are you concerned about my*?", "What about your own*?"}
3430   replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"}
3440   replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"}
3450   replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."}
3460   replies[24] <- { "Are you sure?", "I see.", "I understand."}
3470   replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."}
3480   replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"}
3490   replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"}
3500   replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"}
3510   setupReplies <- replies
3520   RETURN setupReplies
3530 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

