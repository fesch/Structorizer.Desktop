10 REM Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
20 REM "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
30 REM Computational Linguistis 1(1966)9, pp. 36-45 
40 REM Revision history: 
50 REM 2016-10-06 Initial version 
60 REM 2017-03-29 Two diagrams updated (comments translated to English) 
70 REM 2017-03-29 More keywords and replies added 
80 REM 2019-03-14 Replies and mapping reorganised for easier maintenance 
90 REM 2019-03-15 key map joined from keyword array and index map 
100 REM 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
110 REM Generated by Structorizer 3.32-31 
120 
130 REM Copyright (C) 2018-05-14 ??? 
140 REM License: GPLv3-link 
150 REM GNU General Public License (V 3) 
160 REM https://www.gnu.org/licenses/gpl.html 
170 REM http://www.gnu.de/documents/gpl.de.html 
180 
190 REM  
200 REM program ELIZA
210 REM TODO: add the respective type suffixes to your variable names if required 
220 
230 DIM replies(,) AS String
240 DIM reflexions(,1) AS String
250 DIM byePhrases(,1) AS String
260 DIM keyMap() AS KeyMapEntry
270 TYPE KeyMapEntry
280   keyword AS String
290   index AS Integer
300 END TYPE
310 DIM offsets() AS Integer
320 DIM history(5) AS ???
330 DIM findInfo(1) AS integer
340 DIM entry AS KeyMapEntry
350 REM  
360 REM Title information 
370 PRINT "************* ELIZA **************"
380 PRINT "* Original design by J. Weizenbaum"
390 PRINT "**********************************"
400 PRINT "* Adapted for Basic on IBM PC by"
410 PRINT "* - Patricia Danielson"
420 PRINT "* - Paul Hashfield"
430 PRINT "**********************************"
440 PRINT "* Adapted for Structorizer by"
450 PRINT "* - Kay GÃ¼rtzig / FH Erfurt 2016"
460 PRINT "* Version: 2.2 (2019-03-28)"
470 PRINT "**********************************"
480 REM Stores the last five inputs of the user in a ring buffer, 
490 REM the first element is the current insertion index 
500 history <- {0, "", "", "", "", ""}
510 CONST replies <- setupReplies()
520 CONST reflexions <- setupReflexions()
530 CONST byePhrases <- setupGoodByePhrases()
540 CONST keyMap <- setupKeywords()
550 offsets[length(keyMap)-1] <- 0
560 isGone <- false
570 REM Starter 
580 PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
590 DO
600   INPUT userInput
610   REM Converts the input to lowercase, cuts out interpunctation 
620   REM and pads the string 
630   userInput <- normalizeInput(userInput)
640   isGone <- checkGoodBye(userInput, byePhrases)
650   IF not isGone THEN
660     reply <- "Please don\'t repeat yourself!"
670     isRepeated <- checkRepetition(history, userInput)
680     IF not isRepeated THEN
690       findInfo <- findKeyword(keyMap, userInput)
700       keyIndex <- findInfo[0]
710       IF keyIndex < 0 THEN
720         REM Should never happen... 
730         keyIndex <- length(keyMap)-1
740       END IF
750       var entry: KeyMapEntry <- keyMap[keyIndex]
760       REM Variable part of the reply 
770       varPart <- ""
780       IF length(entry.keyword) > 0 THEN
790         varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions)
800       END IF
810       replyRing <- replies[entry.index]
820       reply <- replyRing[offsets[keyIndex]]
830       offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing)
840       posAster <- pos("*", reply)
850       IF posAster > 0 THEN
860         IF varPart = " " THEN
870           reply <- "You will have to elaborate more for me to help you."
880         ELSE
890           delete(reply, posAster, 1)
900           insert(varPart, reply, posAster)
910         END IF
920       END IF
930       reply <- adjustSpelling(reply)
940     END IF
950     PRINT reply
960   END IF
970 LOOP UNTIL isGone
980 END
990 REM  
1000 REM Cares for correct letter case among others 
1010 REM TODO: Add type-specific suffixes where necessary! 
1020 FUNCTION adjustSpelling(sentence AS String) AS String
1030   REM TODO: add the respective type suffixes to your variable names if required 
1040   REM  
1050   REM  
1060   result <- sentence
1070   position <- 1
1080   DO WHILE (position <= length(sentence)) and (copy(sentence, position, 1) = " ")
1090     position <- position + 1
1100   LOOP
1110   IF position <= length(sentence) THEN
1120     start <- copy(sentence, 1, position)
1130     delete(result, 1, position)
1140     insert(uppercase(start), result, 1)
1150   END IF
1160   FOR EACH word IN {" i ", " i\'"}
1170     position <- pos(word, result)
1180     DO WHILE position > 0
1190       delete(result, position+1, 1)
1200       insert("I", result, position+1)
1210       position <- pos(word, result)
1220     LOOP
1230   NEXT word
1240   RETURN result
1250 END FUNCTION
1260 REM  
1270 REM Checks whether the given text contains some kind of 
1280 REM good-bye phrase inducing the end of the conversation 
1290 REM and if so writes a correspding good-bye message and 
1300 REM returns true, otherwise false 
1310 REM TODO: Add type-specific suffixes where necessary! 
1320 FUNCTION checkGoodBye(text AS String, phrases AS String(50,0 TO 1)) AS boolean
1330   REM TODO: add the respective type suffixes to your variable names if required 
1340   REM  
1350   REM  
1360   FOR EACH pair IN phrases
1370     IF pos(pair[0], text) > 0 THEN
1380       saidBye <- true
1390       PRINT pair[1]
1400       RETURN true
1410     END IF
1420   NEXT pair
1430   RETURN false
1440 END FUNCTION
1450 REM  
1460 REM Checks whether newInput has occurred among the last 
1470 REM length(history) - 1 input strings and updates the history 
1480 REM TODO: Add type-specific suffixes where necessary! 
1490 FUNCTION checkRepetition(history AS array, newInput AS String) AS boolean
1500   REM TODO: add the respective type suffixes to your variable names if required 
1510   REM  
1520   REM  
1530   hasOccurred <- false
1540   IF length(newInput) > 4 THEN
1550     currentIndex <- history[0];
1560     FOR i = 1 TO length(history)-1
1570       IF newInput = history[i] THEN
1580         hasOccurred <- true
1590       END IF
1600     NEXT i
1610     history[history[0]+1] <- newInput
1620     history[0] <- (history[0] + 1) mod (length(history) - 1)
1630   END IF
1640   RETURN hasOccurred
1650 END FUNCTION
1660 REM  
1670 REM TODO: Add type-specific suffixes where necessary! 
1680 FUNCTION conjugateStrings(sentence AS String, key AS String, keyPos AS integer, flexions AS String(50,0 TO 1)) AS String
1690   REM TODO: add the respective type suffixes to your variable names if required 
1700   REM  
1710   REM  
1720   result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
1730   FOR EACH pair IN flexions
1740     left <- ""
1750     right <- result
1760     position <- pos(pair[0], right)
1770     DO WHILE position > 0
1780       left <- left + copy(right, 1, position-1) + pair[1]
1790       right <- copy(right, position + length(pair[0]), length(right))
1800       position <- pos(pair[0], right)
1810     LOOP
1820     result <- left + right
1830   NEXT pair
1840   REM Eliminate multiple spaces 
1850   position <- pos("  ", result)
1860   DO WHILE position > 0
1870     result <- copy(result, 1, position-1) + copy(result, position+1, length(result))
1880     position <- pos("  ", result)
1890   LOOP
1900   RETURN result
1910 END FUNCTION
1920 REM  
1930 REM Looks for the occurrence of the first of the strings 
1940 REM contained in keywords within the given sentence (in 
1950 REM array order). 
1960 REM Returns an array of 
1970 REM 0: the index of the first identified keyword (if any, otherwise -1), 
1980 REM 1: the position inside sentence (0 if not found) 
1990 REM TODO: Add type-specific suffixes where necessary! 
2000 FUNCTION findKeyword(CONST keyMap AS KeyMapEntry(50), sentence AS String) AS integer(0 TO 1)
2010   REM TODO: add the respective type suffixes to your variable names if required 
2020   REM  
2030   TYPE KeyMapEntry
2040     keyword AS String
2050     index AS Integer
2060   END TYPE
2070   DIM result(1) AS Integer
2080   DIM entry AS KeyMapEntry
2090   REM  
2100   REM Contains the index of the keyword and its position in sentence 
2110   result <- {-1, 0}
2120   i <- 0
2130   DO WHILE (result[0] < 0) and (i < length(keyMap))
2140     var entry: KeyMapEntry <- keyMap[i]
2150     position <- pos(entry.keyword, sentence)
2160     IF position > 0 THEN
2170       result[0] <- i
2180       result[1] <- position
2190     END IF
2200     i <- i+1
2210   LOOP
2220   RETURN result
2230 END FUNCTION
2240 REM  
2250 REM Converts the sentence to lowercase, eliminates all 
2260 REM interpunction (i.e. ',', '.', ';'), and pads the 
2270 REM sentence among blanks 
2280 REM TODO: Add type-specific suffixes where necessary! 
2290 FUNCTION normalizeInput(sentence AS String) AS String
2300   REM TODO: add the respective type suffixes to your variable names if required 
2310   REM  
2320   REM  
2330   sentence <- lowercase(sentence)
2340   FOR EACH symbol IN {'.', ',', ';', '!', '?'}
2350     position <- pos(symbol, sentence)
2360     DO WHILE position > 0
2370       sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
2380       position <- pos(symbol, sentence)
2390     LOOP
2400   NEXT symbol
2410   result <- " " + sentence + " "
2420   RETURN result
2430 END FUNCTION
2440 REM  
2450 REM TODO: Add type-specific suffixes where necessary! 
2460 FUNCTION setupGoodByePhrases() AS String(50,0 TO 1)
2470   REM TODO: add the respective type suffixes to your variable names if required 
2480   REM  
2490   DIM phrases(,1) AS String
2500   REM  
2510   phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."}
2520   phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."}
2530   RETURN phrases
2540 END FUNCTION
2550 REM  
2560 REM The lower the index the higher the rank of the keyword (search is sequential). 
2570 REM The index of the first keyword found in a user sentence maps to a respective 
2580 REM reply ring as defined in `setupReplies()Â´. 
2590 REM TODO: Add type-specific suffixes where necessary! 
2600 FUNCTION setupKeywords() AS KeyMapEntry(50)
2610   REM TODO: add the respective type suffixes to your variable names if required 
2620   REM  
2630   TYPE KeyMapEntry
2640     keyword AS String
2650     index AS Integer
2660   END TYPE
2670   DIM keywords() AS KeyMapEntry
2680   REM  
2690   REM The empty key string (last entry) is the default clause - will always be found 
2700   keywords[39] <- KeyMapEntry{"", 29}
2710   keywords[0] <- KeyMapEntry{"can you ", 0}
2720   keywords[1] <- KeyMapEntry{"can i ", 1}
2730   keywords[2] <- KeyMapEntry{"you are ", 2}
2740   keywords[3] <- KeyMapEntry{"you\'re ", 2}
2750   keywords[4] <- KeyMapEntry{"i don't ", 3}
2760   keywords[5] <- KeyMapEntry{"i feel ", 4}
2770   keywords[6] <- KeyMapEntry{"why don\'t you ", 5}
2780   keywords[7] <- KeyMapEntry{"why can\'t i ", 6}
2790   keywords[8] <- KeyMapEntry{"are you ", 7}
2800   keywords[9] <- KeyMapEntry{"i can\'t ", 8}
2810   keywords[10] <- KeyMapEntry{"i am ", 9}
2820   keywords[11] <- KeyMapEntry{"i\'m ", 9}
2830   keywords[12] <- KeyMapEntry{"you ", 10}
2840   keywords[13] <- KeyMapEntry{"i want ", 11}
2850   keywords[14] <- KeyMapEntry{"what ", 12}
2860   keywords[15] <- KeyMapEntry{"how ", 12}
2870   keywords[16] <- KeyMapEntry{"who ", 12}
2880   keywords[17] <- KeyMapEntry{"where ", 12}
2890   keywords[18] <- KeyMapEntry{"when ", 12}
2900   keywords[19] <- KeyMapEntry{"why ", 12}
2910   keywords[20] <- KeyMapEntry{"name ", 13}
2920   keywords[21] <- KeyMapEntry{"cause ", 14}
2930   keywords[22] <- KeyMapEntry{"sorry ", 15}
2940   keywords[23] <- KeyMapEntry{"dream ", 16}
2950   keywords[24] <- KeyMapEntry{"hello ", 17}
2960   keywords[25] <- KeyMapEntry{"hi ", 17}
2970   keywords[26] <- KeyMapEntry{"maybe ", 18}
2980   keywords[27] <- KeyMapEntry{" no", 19}
2990   keywords[28] <- KeyMapEntry{"your ", 20}
3000   keywords[29] <- KeyMapEntry{"always ", 21}
3010   keywords[30] <- KeyMapEntry{"think ", 22}
3020   keywords[31] <- KeyMapEntry{"alike ", 23}
3030   keywords[32] <- KeyMapEntry{"yes ", 24}
3040   keywords[33] <- KeyMapEntry{"friend ", 25}
3050   keywords[34] <- KeyMapEntry{"computer", 26}
3060   keywords[35] <- KeyMapEntry{"bot ", 26}
3070   keywords[36] <- KeyMapEntry{"smartphone", 27}
3080   keywords[37] <- KeyMapEntry{"father ", 28}
3090   keywords[38] <- KeyMapEntry{"mother ", 28}
3100   RETURN keywords
3110 END FUNCTION
3120 REM  
3130 REM Returns an array of pairs of mutualy substitutable  
3140 REM TODO: Add type-specific suffixes where necessary! 
3150 FUNCTION setupReflexions() AS String(50,0 TO 1)
3160   REM TODO: add the respective type suffixes to your variable names if required 
3170   REM  
3180   DIM reflexions(,1) AS String
3190   REM  
3200   reflexions[0] <- {" are ", " am "}
3210   reflexions[1] <- {" were ", " was "}
3220   reflexions[2] <- {" you ", " I "}
3230   reflexions[3] <- {" your", " my"}
3240   reflexions[4] <- {" i\'ve ", " you\'ve "}
3250   reflexions[5] <- {" i\'m ", " you\'re "}
3260   reflexions[6] <- {" me ", " you "}
3270   reflexions[7] <- {" my ", " your "}
3280   reflexions[8] <- {" i ", " you "}
3290   reflexions[9] <- {" am ", " are "}
3300   RETURN reflexions
3310 END FUNCTION
3320 REM  
3330 REM This routine sets up the reply rings addressed by the key words defined in 
3340 REM routine `setupKeywords()Â´ and mapped hitherto by the cross table defined 
3350 REM in `setupMapping()Â´ 
3360 REM TODO: Add type-specific suffixes where necessary! 
3370 FUNCTION setupReplies() AS String(50,50)
3380   REM TODO: add the respective type suffixes to your variable names if required 
3390   REM  
3400   DIM setupReplies(,) AS String
3410   DIM replies(,) AS String
3420   REM  
3430   REM We start with the highest index for performance reasons 
3440   REM (is to avoid frequent array resizing) 
3450   replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."}
3460   replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"}
3470   replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"}
3480   replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"}
3490   replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"}
3500   replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"}
3510   replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"}
3520   replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"}
3530   replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"}
3540   replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."}
3550   replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"}
3560   replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"}
3570   replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."}
3580   replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"}
3590   replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."}
3600   replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"}
3610   replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"}
3620   replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"}
3630   replies[17] <- { "How do you do ...please state your problem."}
3640   replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"}
3650   replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"}
3660   replies[20] <- { "Why are you concerned about my*?", "What about your own*?"}
3670   replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"}
3680   replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"}
3690   replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."}
3700   replies[24] <- { "Are you sure?", "I see.", "I understand."}
3710   replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."}
3720   replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"}
3730   replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"}
3740   replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"}
3750   setupReplies <- replies
3760   RETURN setupReplies
3770 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

