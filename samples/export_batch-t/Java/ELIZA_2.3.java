// Generated by Structorizer 3.32-32 

// Copyright (C) 2018-05-14 Kay Gürtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

import java.util.Scanner;

/**
 * Concept and lisp implementation published by Joseph Weizenbaum (MIT):
 * "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In:
 * Computational Linguistis 1(1966)9, pp. 36-45
 * Revision history:
 * 2016-10-06 Initial version
 * 2017-03-29 Two diagrams updated (comments translated to English)
 * 2017-03-29 More keywords and replies added
 * 2019-03-14 Replies and mapping reorganised for easier maintenance
 * 2019-03-15 key map joined from keyword array and index map
 * 2019-03-28 Keyword "bot" inserted (same reply ring as "computer")
 * 2019-11-28 New global type "History" (to ensure a homogenous array)
 */
public class ELIZA {

	private static boolean initDone_History = false;
	// histArray contains the most recent user replies as ring buffer; 
	// histIndex is the index where the next reply is to be stored (= index of the oldest 
	// cached user reply). 
	// Note: The depth of the history is to be specified by initializing a variable of this type, 
	// e.g. for a history of depth 5: 
	// myhistory <- History{{"", "", "", "", ""}, 0} 
	private class History{
		public String[]	histArray;
		public int	histIndex;
		public History(String[] p_histArray, int p_histIndex)
		{
			histArray = p_histArray;
			histIndex = p_histIndex;
		}
	};

	private static boolean initDone_KeyMapEntry = false;
	// Associates a key word in the text with an index in the reply ring array 
	private class KeyMapEntry{
		public String	keyword;
		public int	index;
		public KeyMapEntry(String p_keyword, int p_index)
		{
			keyword = p_keyword;
			index = p_index;
		}
	};

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		initialize_History();
		initialize_KeyMapEntry();
		
		// TODO: Check and accomplish variable declarations: 

		// TODO: You may have to modify input instructions, 
		//       e.g. by replacing nextLine() with a more suitable call 
		//       according to the variable type, say nextInt(). 

		// Title information 
		System.out.println("************* ELIZA **************");
		System.out.println("* Original design by J. Weizenbaum");
		System.out.println("**********************************");
		System.out.println("* Adapted for Basic on IBM PC by");
		System.out.println("* - Patricia Danielson");
		System.out.println("* - Paul Hashfield");
		System.out.println("**********************************");
		System.out.println("* Adapted for Structorizer by");
		System.out.println("* - Kay Gürtzig / FH Erfurt 2016");
		System.out.println("* Version: 2.3 (2020-02-24)");
		System.out.println("* (Requires at least Structorizer 3.30-03 to run)");
		System.out.println("**********************************");
		// Stores the last five inputs of the user in a ring buffer, 
		// the second component is the rolling (over-)write index. 
		history <- History{{"", "", "", "", ""}, 0};
		const replies <- setupReplies();
		const reflexions <- setupReflexions();
		const byePhrases <- setupGoodByePhrases();
		const keyMap <- setupKeywords();
		offsets[length(keyMap)-1] <- 0;
		isGone <- false;
		// Starter 
		System.out.println("Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?");
		do {
			userInput = (new Scanner(System.in)).nextLine();
			// Converts the input to lowercase, cuts out interpunctation 
			// and pads the string 
			userInput <- normalizeInput(userInput);
			isGone <- checkGoodBye(userInput, byePhrases);
			if (not isGone) {
				reply <- "Please don\'t repeat yourself!";
				isRepeated <- checkRepetition(history, userInput);
				if (not isRepeated) {
					findInfo <- findKeyword(keyMap, userInput);
					keyIndex <- findInfo[0];
					if (keyIndex < 0) {
						// Should never happen... 
						keyIndex <- length(keyMap)-1;
					}
					var entry: KeyMapEntry <- keyMap[keyIndex];
					// Variable part of the reply 
					varPart <- "";
					if (length(entry.keyword) > 0) {
						varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions);
					}
					replyRing <- replies[entry.index];
					reply <- replyRing[offsets[keyIndex]];
					offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing);
					posAster <- pos("*", reply);
					if (posAster > 0) {
						if (varPart = " ") {
							reply <- "You will have to elaborate more for me to help you.";
						}
						else {
							delete(reply, posAster, 1);
							insert(varPart, reply, posAster);
						}
					}
					reply <- adjustSpelling(reply);
				}
				System.out.println(reply);
			}
		} while (!(isGone));
	}

	/**
	 * Automatically created initialization procedure for History
	 */
	private static void initialize_History() {
		if (not initDone_History) {
			// histArray contains the most recent user replies as ring buffer; 
			// histIndex is the index where the next reply is to be stored (= index of the oldest 
			// cached user reply). 
			// Note: The depth of the history is to be specified by initializing a variable of this type, 
			// e.g. for a history of depth 5: 
			// myhistory <- History{{"", "", "", "", ""}, 0} 
			type History = record{histArray: array of string; histIndex: int};
			initDone_History <- true;
		}
	}

	/**
	 * Automatically created initialization procedure for KeyMapEntry
	 */
	private static void initialize_KeyMapEntry() {
		if (not initDone_KeyMapEntry) {
			// Associates a key word in the text with an index in the reply ring array 
			type KeyMapEntry = record{ keyword: string; index: int };
			initDone_KeyMapEntry <- true;
		}
	}

	/**
	 * Cares for correct letter case among others
	 * @param sentence
	 * @return 
	 */
	private static String adjustSpelling(String sentence) {
		// TODO: Check and accomplish variable declarations: 

		result <- sentence;
		position <- 1;
		while ((position <= length(sentence)) and (copy(sentence, position, 1) = " ")) {
			position <- position + 1;
		}
		if (position <= length(sentence)) {
			start <- copy(sentence, 1, position);
			delete(result, 1, position);
			insert(uppercase(start), result, 1);
		}
		for (String word : new String[]{" i ", " i\'"}) {
			position <- pos(word, result);
			while (position > 0) {
				delete(result, position+1, 1);
				insert("I", result, position+1);
				position <- pos(word, result);
			}
		}

		return result;
	}

	/**
	 * Checks whether the given text contains some kind of
	 * good-bye phrase inducing the end of the conversation
	 * and if so writes a correspding good-bye message and
	 * returns true, otherwise false
	 * @param text
	 * @param phrases
	 * @return 
	 */
	private static boolean checkGoodBye(String text, String[][] phrases) {
		// TODO: Check and accomplish variable declarations: 

		for (@String pair : phrases) {
			if (pos(pair[0], text) > 0) {
				System.out.println(pair[1]);
				return true;
			}
		}
		return false;
	}

	/**
	 * Checks whether newInput has occurred among the recently cached
	 * input strings in the histArray component of history and updates the history.
	 * @param history
	 * @param newInput
	 * @return 
	 */
	private static boolean checkRepetition(History history, String newInput) {
		initialize_History();
		
		// TODO: Check and accomplish variable declarations: 

		hasOccurred <- false;
		if (length(newInput) > 4) {
			histDepth <- length(history.histArray);
			for (int i = 0; i <= histDepth-1; i += (1)) {
				if (newInput = history.histArray[i]) {
					hasOccurred <- true;
				}
			}
			history.histArray[history.histIndex] <- newInput;
			history.histIndex <- (history.histIndex + 1) mod (histDepth);
		}
		return hasOccurred;
	}

	/**
	 * @param sentence
	 * @param key
	 * @param keyPos
	 * @param flexions
	 * @return 
	 */
	private static String conjugateStrings(String sentence, String key, int keyPos, String[][] flexions) {
		// TODO: Check and accomplish variable declarations: 

		result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " ";
		for (@String pair : flexions) {
			left <- "";
			right <- result;
			position <- pos(pair[0], right);
			while (position > 0) {
				left <- left + copy(right, 1, position-1) + pair[1];
				right <- copy(right, position + length(pair[0]), length(right));
				position <- pos(pair[0], right);
			}
			result <- left + right;
		}
		// Eliminate multiple spaces 
		position <- pos("  ", result);
		while (position > 0) {
			result <- copy(result, 1, position-1) + copy(result, position+1, length(result));
			position <- pos("  ", result);
		}

		return result;
	}

	/**
	 * Looks for the occurrence of the first of the strings
	 * contained in keywords within the given sentence (in
	 * array order).
	 * Returns an array of
	 * 0: the index of the first identified keyword (if any, otherwise -1),
	 * 1: the position inside sentence (0 if not found)
	 * @param keyMap
	 * @param sentence
	 * @return 
	 */
	private static int[] findKeyword(final KeyMapEntry[] keyMap, String sentence) {
		initialize_KeyMapEntry();
		
		// TODO: Check and accomplish variable declarations: 

		// Contains the index of the keyword and its position in sentence 
		result <- {-1, 0};
		i <- 0;
		while ((result[0] < 0) and (i < length(keyMap))) {
			var entry: KeyMapEntry <- keyMap[i];
			position <- pos(entry.keyword, sentence);
			if (position > 0) {
				result[0] <- i;
				result[1] <- position;
			}
			i <- i+1;
		}

		return result;
	}

	/**
	 * Converts the sentence to lowercase, eliminates all
	 * interpunction (i.e. ',', '.', ';'), and pads the
	 * sentence among blanks
	 * @param sentence
	 * @return 
	 */
	private static String normalizeInput(String sentence) {
		// TODO: Check and accomplish variable declarations: 

		sentence <- lowercase(sentence);
		for (char symbol : new char[]{'.', ',', ';', '!', '?'}) {
			position <- pos(symbol, sentence);
			while (position > 0) {
				sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence));
				position <- pos(symbol, sentence);
			}
		}
		result <- " " + sentence + " ";

		return result;
	}

	/**
	 * @return 
	 */
	private static String[][] setupGoodByePhrases() {
		// TODO: Check and accomplish variable declarations: 

		phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."};
		phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."};
		return phrases;
	}

	/**
	 * The lower the index the higher the rank of the keyword (search is sequential).
	 * The index of the first keyword found in a user sentence maps to a respective
	 * reply ring as defined in `setupReplies()´.
	 * @return 
	 */
	private static KeyMapEntry[] setupKeywords() {
		initialize_KeyMapEntry();
		
		// TODO: Check and accomplish variable declarations: 

		// The empty key string (last entry) is the default clause - will always be found 
		keywords[39] <- KeyMapEntry{"", 29};
		keywords[0] <- KeyMapEntry{"can you ", 0};
		keywords[1] <- KeyMapEntry{"can i ", 1};
		keywords[2] <- KeyMapEntry{"you are ", 2};
		keywords[3] <- KeyMapEntry{"you\'re ", 2};
		keywords[4] <- KeyMapEntry{"i don't ", 3};
		keywords[5] <- KeyMapEntry{"i feel ", 4};
		keywords[6] <- KeyMapEntry{"why don\'t you ", 5};
		keywords[7] <- KeyMapEntry{"why can\'t i ", 6};
		keywords[8] <- KeyMapEntry{"are you ", 7};
		keywords[9] <- KeyMapEntry{"i can\'t ", 8};
		keywords[10] <- KeyMapEntry{"i am ", 9};
		keywords[11] <- KeyMapEntry{"i\'m ", 9};
		keywords[12] <- KeyMapEntry{"you ", 10};
		keywords[13] <- KeyMapEntry{"i want ", 11};
		keywords[14] <- KeyMapEntry{"what ", 12};
		keywords[15] <- KeyMapEntry{"how ", 12};
		keywords[16] <- KeyMapEntry{"who ", 12};
		keywords[17] <- KeyMapEntry{"where ", 12};
		keywords[18] <- KeyMapEntry{"when ", 12};
		keywords[19] <- KeyMapEntry{"why ", 12};
		keywords[20] <- KeyMapEntry{"name ", 13};
		keywords[21] <- KeyMapEntry{"cause ", 14};
		keywords[22] <- KeyMapEntry{"sorry ", 15};
		keywords[23] <- KeyMapEntry{"dream ", 16};
		keywords[24] <- KeyMapEntry{"hello ", 17};
		keywords[25] <- KeyMapEntry{"hi ", 17};
		keywords[26] <- KeyMapEntry{"maybe ", 18};
		keywords[27] <- KeyMapEntry{" no", 19};
		keywords[28] <- KeyMapEntry{"your ", 20};
		keywords[29] <- KeyMapEntry{"always ", 21};
		keywords[30] <- KeyMapEntry{"think ", 22};
		keywords[31] <- KeyMapEntry{"alike ", 23};
		keywords[32] <- KeyMapEntry{"yes ", 24};
		keywords[33] <- KeyMapEntry{"friend ", 25};
		keywords[34] <- KeyMapEntry{"computer", 26};
		keywords[35] <- KeyMapEntry{"bot ", 26};
		keywords[36] <- KeyMapEntry{"smartphone", 27};
		keywords[37] <- KeyMapEntry{"father ", 28};
		keywords[38] <- KeyMapEntry{"mother ", 28};
		return keywords;
	}

	/**
	 * Returns an array of pairs of mutualy substitutable 
	 * @return 
	 */
	private static String[][] setupReflexions() {
		// TODO: Check and accomplish variable declarations: 

		reflexions[0] <- {" are ", " am "};
		reflexions[1] <- {" were ", " was "};
		reflexions[2] <- {" you ", " I "};
		reflexions[3] <- {" your", " my"};
		reflexions[4] <- {" i\'ve ", " you\'ve "};
		reflexions[5] <- {" i\'m ", " you\'re "};
		reflexions[6] <- {" me ", " you "};
		reflexions[7] <- {" my ", " your "};
		reflexions[8] <- {" i ", " you "};
		reflexions[9] <- {" am ", " are "};
		return reflexions;
	}

	/**
	 * This routine sets up the reply rings addressed by the key words defined in
	 * routine `setupKeywords()´ and mapped hitherto by the cross table defined
	 * in `setupMapping()´
	 * @return 
	 */
	private static String[][] setupReplies() {
		// TODO: Check and accomplish variable declarations: 

		var replies: array of array of String;
		// We start with the highest index for performance reasons 
		// (is to avoid frequent array resizing) 
		replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."};
		replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"};
		replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"};
		replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"};
		replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"};
		replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"};
		replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"};
		replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"};
		replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"};
		replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."};
		replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"};
		replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"};
		replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."};
		replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"};
		replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."};
		replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"};
		replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"};
		replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"};
		replies[17] <- { "How do you do ...please state your problem."};
		replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"};
		replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"};
		replies[20] <- { "Why are you concerned about my*?", "What about your own*?"};
		replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"};
		replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"};
		replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."};
		replies[24] <- { "Are you sure?", "I see.", "I understand."};
		replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."};
		replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"};
		replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"};
		replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"};
		setupReplies <- replies;

		return setupReplies;
	}

// = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 


}
