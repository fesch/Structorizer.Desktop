// Generated by Structorizer 3.32-31 

import java.util.Scanner;

/**
 * Demo program for routine drawText()
 * Asks the user to enter a text, a wanted text height and colour,
 * and then draws this string onto the turtle screen. Places every
 * entered text to a new line.
 */
public class TextDemo
{

	/**
	 * @param args
	 */
	public static void main(String[] args)
	{
		
		// TODO: Check and accomplish variable declarations: 

		// TODO: You may have to modify input instructions, 
		//       e.g. by replacing nextLine() with a more suitable call 
		//       according to the variable type, say nextInt(). 

		System.out.println("This is a demo program for text writing with Turleizer.");
		showTurtle();
		penDown();
		y <- 0;
		do
		{
			System.out.print("Enter some text (empty string to exit)"); text = (new Scanner(System.in)).nextLine();
			// Make sure the content is interpreted as string 
			text <- "" + text;
			if (text <> "")
			{
				do
				{
					System.out.print("Height of the text (pixels)"); height = (new Scanner(System.in)).nextLine();
				} while (not (height >= 5));
				do
				{
					System.out.print("Colour (1=black, 2=red, 3=yellow, 4=green, 5=cyan, 6=blue, 7=pink, 8=gray, 9=orange, 10=violet)"); colour = (new Scanner(System.in)).nextLine();
				} while (not (colour >= 1 and colour <= 10));
				y <- y + height + 2;
				gotoXY(0, y - 2);
				drawText(text, height, colour);
			}
		} while (not (text = ""));
		gotoXY(0, y + 15);
		drawText("Thank you, bye.", 10, 4);
		hideTurtle();
	}

	/**
	 * @param len
	 * @param color
	 */
	private static void backward(??? len, ??? color)
	{
		// TODO: Check and accomplish variable declarations: 

		switch (color)
		{
		case 1:
			backward(len, java.awt.Color.decode("0xffffff"));
			break;
		case 2:
			backward(len, java.awt.Color.decode("0xff8080"));
			break;
		case 3:
			backward(len, java.awt.Color.decode("0xffff80"));
			break;
		case 4:
			backward(len, java.awt.Color.decode("0x80ff80"));
			break;
		case 5:
			backward(len, java.awt.Color.decode("0x80ffff"));
			break;
		case 6:
			backward(len, java.awt.Color.decode("0x0080ff"));
			break;
		case 7:
			backward(len, java.awt.Color.decode("0xff80c0"));
			break;
		case 8:
			backward(len, java.awt.Color.decode("0xc0c0c0"));
			break;
		case 9:
			backward(len, java.awt.Color.decode("0xff8000"));
			break;
		case 10:
			backward(len, java.awt.Color.decode("0x8080ff"));
			break;
		}
	}

	/**
	 * Draws a blank for font height h, ignoring the colorNo
	 * @param h
	 * @param colorNo
	 */
	private static void blank(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		penUp();
		right(90);
		forward(width, java.awt.Color.decode("0xffffff"));
		left(90);
	}

	/**
	 * @param len
	 * @param color
	 */
	private static void forward(??? len, ??? color)
	{
		// TODO: Check and accomplish variable declarations: 

		switch (color)
		{
		case 1:
			forward(len, java.awt.Color.decode("0xffffff"));
			break;
		case 2:
			forward(len, java.awt.Color.decode("0xff8080"));
			break;
		case 3:
			forward(len, java.awt.Color.decode("0xffff80"));
			break;
		case 4:
			forward(len, java.awt.Color.decode("0x80ff80"));
			break;
		case 5:
			forward(len, java.awt.Color.decode("0x80ffff"));
			break;
		case 6:
			forward(len, java.awt.Color.decode("0x0080ff"));
			break;
		case 7:
			forward(len, java.awt.Color.decode("0xff80c0"));
			break;
		case 8:
			forward(len, java.awt.Color.decode("0xc0c0c0"));
			break;
		case 9:
			forward(len, java.awt.Color.decode("0xff8000"));
			break;
		case 10:
			forward(len, java.awt.Color.decode("0x8080ff"));
			break;
		}
	}

	/**
	 * Draws digit 1 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit1(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		right(45);
		forward(h/Math.sqrt(2), colorNo);
		left(45);
		backward(h, colorNo);
	}

	/**
	 * Draws digit 4 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit4(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		// inner angle at top of the triangle 
		angle <- Math.toDegrees(Math.atan(1 - 2.0*c/h));
		right(90);
		penUp();
		forward(c + b, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90);
		forward(h, colorNo);
		left(180 - angle);
		forward(Math.sqrt(h*h/4.0 + sqr(h/2.0 - c)), colorNo);
		left(90 + angle);
		forward(h/2.0, colorNo);
		penUp();
		left(90);
		backward(h/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws digit 7 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit7(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		angle <- 90 + Math.toDegrees(Math.atan(0.5));
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		forward(h/2.0, colorNo);
		right(angle);
		forward(h * Math.sqrt(1.25), colorNo);
		left(angle);
		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
	}

	/**
	 * Draws letter A in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterA(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(h*h + width*width/4.0);
		rotAngle <- Math.toDegrees(Math.atan(width/2.0/h));
		right(rotAngle);
		forward(hypo/2.0, colorNo);
		right(90 - rotAngle);
		forward(width/2.0, colorNo);
		penUp();
		backward(width/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90 - rotAngle);
		forward(hypo/2.0, colorNo);
		left(2*rotAngle);
		forward(-hypo, colorNo);
		right(rotAngle);
	}

	/**
	 * Draws letter E in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterE(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		forward(h, colorNo);
		right(90);
		forward(width, colorNo);
		right(90);
		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		right(90);
		penDown();
		forward(width, colorNo);
		left(90);
		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
		forward(width, colorNo);
		left(90);
	}

	/**
	 * Draws letter F in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterF(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		forward(h, colorNo);
		right(90);
		forward(width, colorNo);
		right(90);
		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		right(90);
		penDown();
		forward(width, colorNo);
		left(90);
		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(width, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90);
	}

	/**
	 * Draws letter H in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterH(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		forward(h, colorNo);
		penUp();
		right(90);
		forward(width, java.awt.Color.decode("0xffffff"));
		right(90);
		penDown();
		forward(h/2.0, colorNo);
		right(90);
		forward(width, colorNo);
		penUp();
		backward(width, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
		forward(h/2.0, colorNo);
		left(180);
	}

	/**
	 * Draws letter I in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterI(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		right(90);
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		forward(b, colorNo);
		penUp();
		backward(b/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
		forward(h, colorNo);
		penUp();
		right(90);
		backward(b/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		forward(b, colorNo);
		penUp();
		forward(b/2 + c, java.awt.Color.decode("0xffffff"));
		left(90);
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws letter K in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterK(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		diag <- h/Math.sqrt(2.0);
		forward(h, colorNo);
		penUp();
		right(90);
		forward(width, java.awt.Color.decode("0xffffff"));
		right(135);
		penDown();
		forward(diag, colorNo);
		left(90);
		forward(diag, colorNo);
		left(135);
	}

	/**
	 * Draws letter L in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterL(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		forward(h, colorNo);
		penUp();
		backward(h, java.awt.Color.decode("0xffffff"));
		right(90);
		penDown();
		forward(width, colorNo);
		left(90);
	}

	/**
	 * Draws letter M in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterM(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(width*width + h*h)/2.0;
		rotAngle <- Math.toDegrees(Math.atan(width/h));
		forward(h, colorNo);
		left(rotAngle);
		forward(-hypo, colorNo);
		right(2*rotAngle);
		forward(hypo, colorNo);
		left(rotAngle);
		forward(-h, colorNo);
	}

	/**
	 * Draws letter N in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterN(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(width*width + h*h);
		rotAngle <- Math.toDegrees(Math.atan(width/h));
		forward(h, colorNo);
		left(rotAngle);
		forward(-hypo, colorNo);
		right(rotAngle);
		forward(h, colorNo);
		penUp();
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws letter T in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterT(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		forward(width, colorNo);
		penUp();
		backward(width/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		forward(h, colorNo);
		left(90);
		penUp();
		forward(width/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90);
	}

	/**
	 * Draws letter V in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterV(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(h*h + width*width/4.0);
		rotAngle <- Math.toDegrees(Math.atan(width/2.0/h));
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		left(rotAngle);
		penDown();
		forward(-hypo, colorNo);
		right(2*rotAngle);
		forward(hypo, colorNo);
		penUp();
		left(rotAngle);
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws letter W in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterW(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		width_3 <- width/3.0;
		hypo <- Math.sqrt(width_3*width_3 + h*h);
		rotAngle <- Math.toDegrees(Math.atan(width_3/h));
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		left(rotAngle);
		penDown();
		forward(-hypo, colorNo);
		right(2*rotAngle);
		forward(hypo, colorNo);
		penUp();
		left(90+rotAngle);
		forward(width_3, java.awt.Color.decode("0xffffff"));
		right(90-rotAngle);
		penDown();
		forward(-hypo, colorNo);
		right(2*rotAngle);
		forward(hypo, colorNo);
		penUp();
		left(rotAngle);
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws letter X in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterX(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(width*width + h*h);
		rotAngle <- Math.toDegrees(Math.atan(width/h));
		right(rotAngle);
		forward(hypo, colorNo);
		penUp();
		left(90+rotAngle);
		forward(width, java.awt.Color.decode("0xffffff"));
		right(90-rotAngle);
		penDown();
		forward(-hypo, colorNo);
		right(rotAngle);
	}

	/**
	 * Draws letter Y in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterY(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(width*width + h*h)/2.0;
		rotAngle <- Math.toDegrees(Math.atan(width/h));
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		left(rotAngle);
		penDown();
		forward(-hypo, colorNo);
		right(rotAngle);
		penUp();
		backward(h/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		forward(h/2.0, colorNo);
		right(rotAngle);
		forward(hypo, colorNo);
		left(rotAngle);
		penUp();
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws letter Z in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterZ(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h/2.0;
		hypo <- Math.sqrt(width*width + h*h);
		rotAngle <- Math.toDegrees(Math.atan(width/h));
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		right(90);
		penDown();
		forward(width, colorNo);
		left(90-rotAngle);
		forward(-hypo, colorNo);
		right(90-rotAngle);
		forward(width, colorNo);
		left(90);
	}

	/**
	 * Draws nEdges edges of a regular n-polygon with edge length a
	 * counter-clockwise, if ctrclkws is true, or clockwise if ctrclkws is false.
	 * @param a
	 * @param n
	 * @param ctrclkws
	 * @param nEdges
	 * @param color
	 */
	private static void polygonPart(double a, int n, boolean ctrclkws, int nEdges, int color)
	{
		// TODO: Check and accomplish variable declarations: 

		rotAngle <- 360.0/n;
		if (ctrclkws)
		{
			rotAngle <- -rotAngle;
		}
		for (int k = 1; k <= nEdges; k += (1))
		{
			right(rotAngle);
			forward(a, color);
		}
	}

	/**
	 * Draws a dummy character (small centered square) with font height h and
	 * the colour encoded by colorNo
	 * @param h
	 * @param colorNo
	 */
	private static void charDummy(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		width <- h / 2.0;
		// Octagon edge length (here: edge lengzh of the square) 
		b <- width / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- (width - b) / 2.0;
		d <- b / Math.sqrt(2.0);
		penUp();
		forward(h/2.0-b/2.0, java.awt.Color.decode("0xffffff"));
		right(90);
		forward(c, java.awt.Color.decode("0xffffff"));
		right(90);
		penDown();
		// Draws the square with edge length b 
		polygonPart(b, 4, true, 4, colorNo);
		penUp();
		left(90);
		forward(b + c, java.awt.Color.decode("0xffffff"));
		left(90);
		backward(h/2.0-b/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws a comma in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void comma(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		rotAngle <- Math.toDegrees(Math.atan(0.5));
		hypo <- c * Math.sqrt(1.25);
		penUp();
		right(90);
		forward((c+b)/2.0 + c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw 3 edges of a square with edge length c 
		// in the colour endcoded by colorNo 
		polygonPart(c, 4, true, 3, colorNo);
		left(90);
		forward(c/2.0, colorNo);
		right(90);
		forward(c, colorNo);
		left(180 - rotAngle);
		forward(hypo, colorNo);
		penUp();
		right(90 - rotAngle);
		forward((c + b)/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
	}

	/**
	 * Draws digit 2 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit2(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		angle <- Math.toDegrees(Math.atan(h/(h + 2*c)));
		penUp();
		forward(h - c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Clockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, false, 4, colorNo);
		right(angle);
		forward(h/2.0 * Math.sqrt(1 + sqr(1+2*c/h)), colorNo);
		left(90 + angle);
		forward(h/2.0, colorNo);
		left(90);
	}

	/**
	 * Draws digit 3 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit3(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 6 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 6, colorNo);
		penUp();
		left(180);
		forward(b, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw 5 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 5, colorNo);
		penUp();
		left(45);
		forward(h-c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
	}

	/**
	 * Draws digit 5 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit5(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 6 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 6, colorNo);
		forward(c, colorNo);
		// Clockwise draw 2 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(h/2.0, 4, false, 2, colorNo);
		penUp();
		left(90);
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws digit 6 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit6(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw all 8 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 8, colorNo);
		penUp();
		left(180);
		forward(b, java.awt.Color.decode("0xffffff"));
		penDown();
		forward(2 * c + b, colorNo);
		// Clockwise draw 3 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, false, 3, colorNo);
		penUp();
		left(135);
		backward(h-c, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws digit 8 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit8(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw all 8 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 8, colorNo);
		penUp();
		left(180);
		forward(b, java.awt.Color.decode("0xffffff"));
		right(45);
		forward(b, java.awt.Color.decode("0xffffff"));
		left(135);
		penDown();
		// Clockwise draw 7 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, false, 7, colorNo);
		penUp();
		left(45);
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
	}

	/**
	 * Draws digit 9 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit9(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(2 * c + b, colorNo);
		// Counterclockwise draw 7 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 7, colorNo);
		penUp();
		left(45);
		backward(h/2.0 + c, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws an exclamation mark in the colour encoded by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void exclMk(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		width <- h/2.0;
		length1 <- h - (b+c)/2.0;
		length2 <- length1 - 2*c;
		hypo <- Math.sqrt(width*width/16.0 + length2*length2);
		// 360°/8 
		rotAngle <- 45;
		rotAngle2 <- Math.toDegrees(Math.atan(width/4.0/length2));
		penUp();
		forward(length1, java.awt.Color.decode("0xffffff"));
		right(90);
		forward(width/2.0, java.awt.Color.decode("0xffffff"));
		left(90 + rotAngle);
		penDown();
		// Clockwise draw 5 edges of an octagon with edge length b/2 
		// in the colour endcoded by colorNo 
		polygonPart(b/2.0, 8, false, 5, colorNo);
		right(rotAngle2);
		forward(hypo, colorNo);
		left(2*rotAngle2);
		forward(-hypo, colorNo);
		penUp();
		forward(hypo, java.awt.Color.decode("0xffffff"));
		right(rotAngle2);
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(c/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw all 4 edges of a squarfe with edge length c 
		// in the colour endcoded by colorNo 
		polygonPart(c, 4, false, 4, colorNo);
		penUp();
		forward((c + b)/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		backward(c, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws a full stop in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void fullSt(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		right(90);
		forward((c+b)/2.0 + c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw all 4 edges of a squarfe with edge length c 
		// in the colour endcoded by colorNo 
		polygonPart(c, 4, true, 4, colorNo);
		penUp();
		forward((c + b)/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		penDown();
	}

	/**
	 * Draws letter Ä in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterAe(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		penDown();
		// Clockwise draw all 4 edges of a square with edge length h/16 
		// in the colour endcoded by colorNo 
		polygonPart(Math.max(h/16.0,1), 4, false, 4, colorNo);
		right(90);
		penUp();
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		// Clockwise draw all 4 edges of a square with edge length h/16 
		// in the colour endcoded by colorNo 
		polygonPart(Math.max(h/16.0,1), 4, false, 4, colorNo);
		right(90);
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		right(90);
		forward(h/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		letterA(h, colorNo);
	}

	/**
	 * Draws letter B in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterB(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		forward(h, colorNo);
		right(90);
		forward(c+b, colorNo);
		// Clockwise draw 4 edges of an octagon with edge length b 
		polygonPart(b, 8, false, 4, colorNo);
		forward(c, colorNo);
		penUp();
		left(180);
		forward(b + c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Clockwise draw 4 edges of an octagon with edge length b 
		polygonPart(b, 8, false, 4, colorNo);
		forward(c, colorNo);
		penUp();
		left(180);
		forward(b + 2*c, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90);
	}

	/**
	 * Draws letter C in the colour encoded by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterC(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer triangle at the octagon corner 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Clockwise draws 3 edges of an octagon with edge length b in the colour 
		// encoded by colorNo 
		polygonPart(b, 8, true, 3, colorNo);
		left(rotAngle);
		penUp();
		forward(2*b + 2*c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draws 4 edges of an octagon with edge length b 
		// iin the colour encoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(b + 2*c, colorNo);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(b + 2*c, colorNo);
		penDown();
		left(90);
	}

	/**
	 * Draws letter D in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterD(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		forward(h, colorNo);
		right(90);
		forward(c+b, colorNo);
		// Clockwise draw 2 edges of an octagon with edge length b in the colour 
		// encoded by colorNo 
		polygonPart(b, 8, false, 2, colorNo);
		forward(b + 2*c, colorNo);
		// Clockwise draw 2 edges of an octagon with edge length b in the colour 
		// encoded by colorNo 
		polygonPart(b, 8, false, 2, colorNo);
		forward(c, colorNo);
		penUp();
		left(180);
		forward(b + 2*c, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90);
	}

	/**
	 * Draws letter G in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterG(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon. 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 4 edges of an octagon with edge length b in 
		// the colour encoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(c, colorNo);
		left(90);
		forward(b/2.0 + c, colorNo);
		penUp();
		backward(b/2.0 + c, java.awt.Color.decode("0xffffff"));
		right(90);
		forward(b + c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw 4 edges of an octagon with edge length b in 
		// the colour encoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(b + 2*c, colorNo);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(b + 2*c, colorNo);
		penDown();
		left(90);
	}

	/**
	 * Draws letter J in colour encoded by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterJ(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 3 edges of an octagon with edge length b in 
		// the colour encoded by colorNo 
		polygonPart(b, 8, true, 3, colorNo);
		left(rotAngle);
		forward(h - c, colorNo);
		penUp();
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws letter O in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterO(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(b + 2*c, colorNo);
		// Counterclockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(b + 2*c, colorNo);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(b + 2*c, java.awt.Color.decode("0xffffff"));
		penDown();
		left(90);
	}

	/**
	 * Draws letter P in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterP(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the corner triangle outside the octagon 
		c <- b / Math.sqrt(2.0);
		forward(h, colorNo);
		right(90);
		forward(c+b, colorNo);
		// Clockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, false, 4, colorNo);
		forward(c, colorNo);
		penUp();
		backward(b + 2*c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(b + 2*c, java.awt.Color.decode("0xffffff"));
		penDown();
		left(180);
	}

	/**
	 * Draws letter Q in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterQ(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(b + 2*c, colorNo);
		// Counterclockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, true, 4, colorNo);
		forward(b + 2*c, colorNo);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(b + 2*c, java.awt.Color.decode("0xffffff"));
		right(rotAngle);
		backward(b, java.awt.Color.decode("0xffffff"));
		penDown();
		forward(b, colorNo);
		left(90 + rotAngle);
	}

	/**
	 * Zeichnet den Buchstaben R von der Turtleposition aus
	 * mit Zeilenhöhe h
	 * @param h
	 * @param colorNo
	 */
	private static void letterR(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		forward(h, colorNo);
		right(90);
		forward(c+b, colorNo);
		// Clockwise draw 4 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, false, 4, colorNo);
		forward(c, colorNo);
		left(90 + rotAngle);
		forward(Math.sqrt(2.0)*(b + 2*c), colorNo);
		left(90 + rotAngle);
	}

	/**
	 * Draws letter S in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterS(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Side length of the (outer) corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 6 edges of an octagon with edge length b 
		// in the colour encoded by colorNo 
		polygonPart(b, 8, true, 6, colorNo);
		// Clockwise draw 5 edges of an octagon with edge length b 
		// in the colour encoded by colorNo 
		polygonPart(b, 8, false, 5, colorNo);
		right(rotAngle);
		penUp();
		forward(2*b + 3*c, java.awt.Color.decode("0xffffff"));
		penDown();
		left(180);
	}

	/**
	 * Draws letter U in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterU(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// edge length of a regular octagon 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		penDown();
		forward(h - c, colorNo);
		penUp();
		backward(h-c, java.awt.Color.decode("0xffffff"));
		penDown();
		right(180);
		// Counterclockwise draw 3 edges of an octagoin with edge length b in colour specified by colorNo 
		polygonPart(b, 8, true, 3, colorNo);
		left(rotAngle);
		forward(h - c, colorNo);
		penUp();
		backward(h, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws a question mark in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void qstnMk(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		// Octagon edge length 
		b <- h * 0.5 / (Math.sqrt(2.0) + 1);
		// Cathetus of the outer corner triangle of the octagon 
		c <- b / Math.sqrt(2.0);
		// 360°/8 
		rotAngle <- 45;
		penUp();
		forward(h-c, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw 5 edges of an octagon with edge length b 
		// in the colour endcoded by colorNo 
		polygonPart(b, 8, false, 5, colorNo);
		forward(c, colorNo);
		left(rotAngle);
		forward(b/2.0, colorNo);
		penUp();
		forward(c, java.awt.Color.decode("0xffffff"));
		left(90);
		forward(c/2.0, java.awt.Color.decode("0xffffff"));
		penDown();
		// Counterclockwise draw all 4 edges of a squarfe with edge length c 
		// in the colour endcoded by colorNo 
		polygonPart(c, 4, false, 4, colorNo);
		penUp();
		forward((c + b)/2.0, java.awt.Color.decode("0xffffff"));
		left(90);
		backward(c, java.awt.Color.decode("0xffffff"));
		penDown();
	}

	/**
	 * Draws digit 0 in the colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void digit0(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		penUp();
		forward(h/4.0, java.awt.Color.decode("0xffffff"));
		penDown();
		right(45);
		len <- h/Math.sqrt(2);
		forward(len, colorNo);
		penUp();
		backward(len, java.awt.Color.decode("0xffffff"));
		left(45);
		backward(h/4.0, java.awt.Color.decode("0xffffff"));
		letterO(h, colorNo);
	}

	/**
	 * Draws letter Ö in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterOe(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		// Clockwise draw all 4 edges of a square with edge length h/8 
		// in the colour endcoded by colorNo 
		polygonPart(h/8, 4, false, 4, colorNo);
		penUp();
		forward(h/2, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		// Clockwise draw all 4 edges of a square with edge length h/8 
		// in the colour endcoded by colorNo 
		polygonPart(h/8, 4, false, 4, colorNo);
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		penUp();
		forward(h/2, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		letterO(h, colorNo);
	}

	/**
	 * Draws letter Ü in colour specified by colorNo with font height h
	 * from the current turtle position.
	 * @param h
	 * @param colorNo
	 */
	private static void letterUe(??? h, ??? colorNo)
	{
		// TODO: Check and accomplish variable declarations: 

		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		right(90);
		forward(Math.max(h/8,1), java.awt.Color.decode("0xffffff"));
		penDown();
		// Clockwise draw all 4 edges of a square with edge length h/16 
		// in the colour endcoded by colorNo 
		polygonPart(Math.max(h/16,1), 4, false, 4, colorNo);
		penUp();
		forward(h/2 - 2 * Math.max(h/8,1) - Math.max(h/16, 1), java.awt.Color.decode("0xffffff"));
		penDown();
		// Clockwise draw all 4 edges of a square with edge length h/16 
		// in the colour endcoded by colorNo 
		polygonPart(Math.max(h/16,1), 4, false, 4, colorNo);
		penUp();
		forward(Math.max(h/8,1), java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		penUp();
		forward(h, java.awt.Color.decode("0xffffff"));
		right(90);
		forward(h/2, java.awt.Color.decode("0xffffff"));
		penDown();
		right(90);
		letterU(h, colorNo);
	}

	/**
	 * Has the turtle draw the given string 'text´ with font height 'h´ (in
	 * pixels) and the colour coded by integer 'c´ from the current Turtle
	 * position to the Turtle canvas. If the turtle looks North then
	 * the text will be written rightwards. In the event, the turtle will be
	 * placed behind the text in original orientation (such that the next text
	 * would be written like a continuation. Colour codes:
	 * 1 = black
	 * 2 = red
	 * 3 = yellow
	 * 4 = green
	 * 5 = cyan
	 * 6 = blue
	 * 7 = pink
	 * 8 = grey
	 * 9 = orange
	 * 10 = violet
	 * All letters (ASCII) will be converted to uppercase,
	 * the set of representable special characters is: decimal digits,
	 * '.', ',', '!', '?', 'Ä', 'Ö', 'Ü'. Other characters will be shown as a small
	 * centred square (dummy character).
	 * @param text
	 * @param h
	 * @param c
	 */
	private static void drawText(String text, int h, int c)
	{
		// TODO: Check and accomplish variable declarations: 

		gap <- h/10.0;
		for (int k = 1; k <= length(text); k += (1))
		{
			letter <- uppercase(copy(text, k, 1));
			switch (letter)
			{
			case "A":
				letterA(h,c);
				break;
			case "B":
				letterB(h,c);
				break;
			case "C":
				letterC(h,c);
				break;
			case "D":
				letterD(h,c);
				break;
			case "E":
				letterE(h,c);
				break;
			case "F":
				letterF(h,c);
				break;
			case "G":
				letterG(h,c);
				break;
			case "H":
				letterH(h,c);
				break;
			case "I":
				letterI(h,c);
				break;
			case "J":
				letterJ(h,c);
				break;
			case "K":
				letterK(h,c);
				break;
			case "L":
				letterL(h,c);
				break;
			case "M":
				letterM(h,c);
				break;
			case "N":
				letterN(h,c);
				break;
			case "O":
				letterO(h,c);
				break;
			case "P":
				letterP(h,c);
				break;
			case "Q":
				letterQ(h,c);
				break;
			case "R":
				letterR(h,c);
				break;
			case "S":
				letterS(h,c);
				break;
			case "T":
				letterT(h,c);
				break;
			case "U":
				letterU(h,c);
				break;
			case "V":
				letterV(h,c);
				break;
			case "W":
				letterW(h,c);
				break;
			case "X":
				letterX(h,c);
				break;
			case "Y":
				letterY(h,c);
				break;
			case "Z":
				letterZ(h,c);
				break;
			case " ":
				blank(h,c);
				break;
			case "!":
				exclMk(h,c);
				break;
			case "?":
				qstnMk(h,c);
				break;
			case ".":
				fullSt(h,c);
				break;
			case ",":
				comma(h,c);
				break;
			case "Ä":
				letterAe(h,c);
				break;
			case "Ö":
				letterOe(h,c);
				break;
			case "Ü":
				letterUe(h,c);
				break;
			case "0":
				digit0(h,c);
				break;
			case "1":
				digit1(h,c);
				break;
			case "2":
				digit2(h,c);
				break;
			case "3":
				digit3(h,c);
				break;
			case "4":
				digit4(h,c);
				break;
			case "5":
				digit5(h,c);
				break;
			case "6":
				digit6(h,c);
				break;
			case "7":
				digit7(h,c);
				break;
			case "8":
				digit8(h,c);
				break;
			case "9":
				digit9(h,c);
				break;
			default:
				charDummy(h,c);
			}
			right(90);
			penUp();
			forward(gap, java.awt.Color.decode("0xffffff"));
			penDown();
			left(90);
		}
	}

// = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 


}
