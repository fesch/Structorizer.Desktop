{
  Demo program for routine drawText()
  Asks the user to enter a text, a wanted text height and colour,
  and then draws this string onto the turtle screen. Places every
  entered text to a new line.
}
program TextDemo;
{ Generated by Structorizer 3.32-31 }


procedure backward(len: ???; color: ???);

begin
  case (color) of
    1:
      begin
        backward(len); { color = ffffff }
      end;
    2:
      begin
        backward(len); { color = ff8080 }
      end;
    3:
      begin
        backward(len); { color = ffff80 }
      end;
    4:
      begin
        backward(len); { color = 80ff80 }
      end;
    5:
      begin
        backward(len); { color = 80ffff }
      end;
    6:
      begin
        backward(len); { color = 0080ff }
      end;
    7:
      begin
        backward(len); { color = ff80c0 }
      end;
    8:
      begin
        backward(len); { color = c0c0c0 }
      end;
    9:
      begin
        backward(len); { color = ff8000 }
      end;
    10:
      begin
        backward(len); { color = 8080ff }
      end;
  end;

end;

{ Draws a blank for font height h, ignoring the colorNo }
procedure blank(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  penUp();
  right(90);
  forward(width); { color = ffffff }
  left(90);

end;

procedure forward(len: ???; color: ???);

begin
  case (color) of
    1:
      begin
        forward(len); { color = ffffff }
      end;
    2:
      begin
        forward(len); { color = ff8080 }
      end;
    3:
      begin
        forward(len); { color = ffff80 }
      end;
    4:
      begin
        forward(len); { color = 80ff80 }
      end;
    5:
      begin
        forward(len); { color = 80ffff }
      end;
    6:
      begin
        forward(len); { color = 0080ff }
      end;
    7:
      begin
        forward(len); { color = ff80c0 }
      end;
    8:
      begin
        forward(len); { color = c0c0c0 }
      end;
    9:
      begin
        forward(len); { color = ff8000 }
      end;
    10:
      begin
        forward(len); { color = 8080ff }
      end;
  end;

end;

{
  Draws digit 1 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit1(h: ???; colorNo: ???);

begin
  penUp();
  forward(h/2.0); { color = ffffff }
  penDown();
  right(45);
  forward(h/sqrt(2), colorNo);
  left(45);
  backward(h, colorNo);

end;

{
  Draws digit 4 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit4(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  { inner angle at top of the triangle }
  angle <- toDegrees(atan(1 - 2.0*c/h));
  right(90);
  penUp();
  forward(c + b); { color = ffffff }
  penDown();
  left(90);
  forward(h, colorNo);
  left(180 - angle);
  forward(sqrt(h*h/4.0 + sqr(h/2.0 - c)), colorNo);
  left(90 + angle);
  forward(h/2.0, colorNo);
  penUp();
  left(90);
  backward(h/2.0); { color = ffffff }
  penDown();

end;

{
  Draws digit 7 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit7(h: ???; colorNo: ???);

begin
  angle <- 90 + toDegrees(atan(0.5));
  penUp();
  forward(h); { color = ffffff }
  penDown();
  right(90);
  forward(h/2.0, colorNo);
  right(angle);
  forward(h * sqrt(1.25), colorNo);
  left(angle);
  penUp();
  forward(h/2.0); { color = ffffff }
  left(90);
  penDown();

end;

{
  Draws letter A in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterA(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(h*h + width*width/4.0);
  rotAngle <- toDegrees(atan(width/2.0/h));
  right(rotAngle);
  forward(hypo/2.0, colorNo);
  right(90 - rotAngle);
  forward(width/2.0, colorNo);
  penUp();
  backward(width/2.0); { color = ffffff }
  penDown();
  left(90 - rotAngle);
  forward(hypo/2.0, colorNo);
  left(2*rotAngle);
  forward(-hypo, colorNo);
  right(rotAngle);

end;

{
  Draws letter E in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterE(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  forward(h, colorNo);
  right(90);
  forward(width, colorNo);
  right(90);
  penUp();
  forward(h/2.0); { color = ffffff }
  right(90);
  penDown();
  forward(width, colorNo);
  left(90);
  penUp();
  forward(h/2.0); { color = ffffff }
  left(90);
  penDown();
  forward(width, colorNo);
  left(90);

end;

{
  Draws letter F in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterF(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  forward(h, colorNo);
  right(90);
  forward(width, colorNo);
  right(90);
  penUp();
  forward(h/2.0); { color = ffffff }
  right(90);
  penDown();
  forward(width, colorNo);
  left(90);
  penUp();
  forward(h/2.0); { color = ffffff }
  left(90);
  forward(width); { color = ffffff }
  penDown();
  left(90);

end;

{
  Draws letter H in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterH(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  forward(h, colorNo);
  penUp();
  right(90);
  forward(width); { color = ffffff }
  right(90);
  penDown();
  forward(h/2.0, colorNo);
  right(90);
  forward(width, colorNo);
  penUp();
  backward(width); { color = ffffff }
  left(90);
  penDown();
  forward(h/2.0, colorNo);
  left(180);

end;

{
  Draws letter I in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterI(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  right(90);
  forward(c); { color = ffffff }
  penDown();
  forward(b, colorNo);
  penUp();
  backward(b/2.0); { color = ffffff }
  left(90);
  penDown();
  forward(h, colorNo);
  penUp();
  right(90);
  backward(b/2.0); { color = ffffff }
  penDown();
  forward(b, colorNo);
  penUp();
  forward(b/2 + c); { color = ffffff }
  left(90);
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws letter K in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterK(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  diag <- h/sqrt(2.0);
  forward(h, colorNo);
  penUp();
  right(90);
  forward(width); { color = ffffff }
  right(135);
  penDown();
  forward(diag, colorNo);
  left(90);
  forward(diag, colorNo);
  left(135);

end;

{
  Draws letter L in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterL(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  forward(h, colorNo);
  penUp();
  backward(h); { color = ffffff }
  right(90);
  penDown();
  forward(width, colorNo);
  left(90);

end;

{
  Draws letter M in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterM(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(width*width + h*h)/2.0;
  rotAngle <- toDegrees(atan(width/h));
  forward(h, colorNo);
  left(rotAngle);
  forward(-hypo, colorNo);
  right(2*rotAngle);
  forward(hypo, colorNo);
  left(rotAngle);
  forward(-h, colorNo);

end;

{
  Draws letter N in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterN(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(width*width + h*h);
  rotAngle <- toDegrees(atan(width/h));
  forward(h, colorNo);
  left(rotAngle);
  forward(-hypo, colorNo);
  right(rotAngle);
  forward(h, colorNo);
  penUp();
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws letter T in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterT(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  penUp();
  forward(h); { color = ffffff }
  penDown();
  right(90);
  forward(width, colorNo);
  penUp();
  backward(width/2.0); { color = ffffff }
  penDown();
  right(90);
  forward(h, colorNo);
  left(90);
  penUp();
  forward(width/2.0); { color = ffffff }
  penDown();
  left(90);

end;

{
  Draws letter V in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterV(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(h*h + width*width/4.0);
  rotAngle <- toDegrees(atan(width/2.0/h));
  penUp();
  forward(h); { color = ffffff }
  left(rotAngle);
  penDown();
  forward(-hypo, colorNo);
  right(2*rotAngle);
  forward(hypo, colorNo);
  penUp();
  left(rotAngle);
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws letter W in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterW(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  width_3 <- width/3.0;
  hypo <- sqrt(width_3*width_3 + h*h);
  rotAngle <- toDegrees(atan(width_3/h));
  penUp();
  forward(h); { color = ffffff }
  left(rotAngle);
  penDown();
  forward(-hypo, colorNo);
  right(2*rotAngle);
  forward(hypo, colorNo);
  penUp();
  left(90+rotAngle);
  forward(width_3); { color = ffffff }
  right(90-rotAngle);
  penDown();
  forward(-hypo, colorNo);
  right(2*rotAngle);
  forward(hypo, colorNo);
  penUp();
  left(rotAngle);
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws letter X in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterX(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(width*width + h*h);
  rotAngle <- toDegrees(atan(width/h));
  right(rotAngle);
  forward(hypo, colorNo);
  penUp();
  left(90+rotAngle);
  forward(width); { color = ffffff }
  right(90-rotAngle);
  penDown();
  forward(-hypo, colorNo);
  right(rotAngle);

end;

{
  Draws letter Y in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterY(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(width*width + h*h)/2.0;
  rotAngle <- toDegrees(atan(width/h));
  penUp();
  forward(h); { color = ffffff }
  left(rotAngle);
  penDown();
  forward(-hypo, colorNo);
  right(rotAngle);
  penUp();
  backward(h/2.0); { color = ffffff }
  penDown();
  forward(h/2.0, colorNo);
  right(rotAngle);
  forward(hypo, colorNo);
  left(rotAngle);
  penUp();
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws letter Z in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterZ(h: ???; colorNo: ???);

begin
  width <- h/2.0;
  hypo <- sqrt(width*width + h*h);
  rotAngle <- toDegrees(atan(width/h));
  penUp();
  forward(h); { color = ffffff }
  right(90);
  penDown();
  forward(width, colorNo);
  left(90-rotAngle);
  forward(-hypo, colorNo);
  right(90-rotAngle);
  forward(width, colorNo);
  left(90);

end;

{
  Draws nEdges edges of a regular n-polygon with edge length a
  counter-clockwise, if ctrclkws is true, or clockwise if ctrclkws is false.
}
procedure polygonPart(a: Double; n: Longint; ctrclkws: boolean; nEdges: Longint; color: Longint);

begin
  rotAngle <- 360.0/n;
  if (ctrclkws) then
  begin
    rotAngle <- -rotAngle;
  end;
  for k := 1 to nEdges do
  begin
    right(rotAngle);
    forward(a, color);
  end;

end;

{
  Draws a dummy character (small centered square) with font height h and
  the colour encoded by colorNo
}
procedure charDummy(h: ???; colorNo: ???);

begin
  width <- h / 2.0;
  { Octagon edge length (here: edge lengzh of the square) }
  b <- width / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- (width - b) / 2.0;
  d <- b / sqrt(2.0);
  penUp();
  forward(h/2.0-b/2.0); { color = ffffff }
  right(90);
  forward(c); { color = ffffff }
  right(90);
  penDown();
  { Draws the square with edge length b }
  polygonPart(b, 4, true, 4, colorNo);
  penUp();
  left(90);
  forward(b + c); { color = ffffff }
  left(90);
  backward(h/2.0-b/2.0); { color = ffffff }
  penDown();

end;

{
  Draws a comma in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure comma(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  rotAngle <- toDegrees(atan(0.5));
  hypo <- c * sqrt(1.25);
  penUp();
  right(90);
  forward((c+b)/2.0 + c); { color = ffffff }
  penDown();
  {
    Counterclockwise draw 3 edges of a square with edge length c
    in the colour endcoded by colorNo
  }
  polygonPart(c, 4, true, 3, colorNo);
  left(90);
  forward(c/2.0, colorNo);
  right(90);
  forward(c, colorNo);
  left(180 - rotAngle);
  forward(hypo, colorNo);
  penUp();
  right(90 - rotAngle);
  forward((c + b)/2.0); { color = ffffff }
  left(90);
  penDown();

end;

{
  Draws digit 2 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit2(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  angle <- toDegrees(atan(h/(h + 2*c)));
  penUp();
  forward(h - c); { color = ffffff }
  penDown();
  {
    Clockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, false, 4, colorNo);
  right(angle);
  forward(h/2.0 * sqrt(1 + sqr(1+2*c/h)), colorNo);
  left(90 + angle);
  forward(h/2.0, colorNo);
  left(90);

end;

{
  Draws digit 3 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit3(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 6 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 6, colorNo);
  penUp();
  left(180);
  forward(b); { color = ffffff }
  penDown();
  {
    Counterclockwise draw 5 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 5, colorNo);
  penUp();
  left(45);
  forward(h-c); { color = ffffff }
  left(90);
  forward(h/2.0); { color = ffffff }
  left(90);
  penDown();

end;

{
  Draws digit 5 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit5(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 6 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 6, colorNo);
  forward(c, colorNo);
  {
    Clockwise draw 2 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(h/2.0, 4, false, 2, colorNo);
  penUp();
  left(90);
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws digit 6 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit6(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw all 8 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 8, colorNo);
  penUp();
  left(180);
  forward(b); { color = ffffff }
  penDown();
  forward(2 * c + b, colorNo);
  {
    Clockwise draw 3 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, false, 3, colorNo);
  penUp();
  left(135);
  backward(h-c); { color = ffffff }
  penDown();

end;

{
  Draws digit 8 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit8(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw all 8 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 8, colorNo);
  penUp();
  left(180);
  forward(b); { color = ffffff }
  right(45);
  forward(b); { color = ffffff }
  left(135);
  penDown();
  {
    Clockwise draw 7 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, false, 7, colorNo);
  penUp();
  left(45);
  forward(h/2.0); { color = ffffff }
  left(90);
  forward(c); { color = ffffff }
  left(90);
  penDown();

end;

{
  Draws digit 9 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit9(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(2 * c + b, colorNo);
  {
    Counterclockwise draw 7 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 7, colorNo);
  penUp();
  left(45);
  backward(h/2.0 + c); { color = ffffff }
  penDown();

end;

{
  Draws an exclamation mark in the colour encoded by colorNo with font height h
  from the current turtle position.
}
procedure exclMk(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  width <- h/2.0;
  length1 <- h - (b+c)/2.0;
  length2 <- length1 - 2*c;
  hypo <- sqrt(width*width/16.0 + length2*length2);
  { 360°/8 }
  rotAngle <- 45;
  rotAngle2 <- toDegrees(atan(width/4.0/length2));
  penUp();
  forward(length1); { color = ffffff }
  right(90);
  forward(width/2.0); { color = ffffff }
  left(90 + rotAngle);
  penDown();
  {
    Clockwise draw 5 edges of an octagon with edge length b/2
    in the colour endcoded by colorNo
  }
  polygonPart(b/2.0, 8, false, 5, colorNo);
  right(rotAngle2);
  forward(hypo, colorNo);
  left(2*rotAngle2);
  forward(-hypo, colorNo);
  penUp();
  forward(hypo); { color = ffffff }
  right(rotAngle2);
  forward(c); { color = ffffff }
  left(90);
  forward(c/2.0); { color = ffffff }
  penDown();
  {
    Counterclockwise draw all 4 edges of a squarfe with edge length c
    in the colour endcoded by colorNo
  }
  polygonPart(c, 4, false, 4, colorNo);
  penUp();
  forward((c + b)/2.0); { color = ffffff }
  left(90);
  backward(c); { color = ffffff }
  penDown();

end;

{
  Draws a full stop in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure fullSt(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  penUp();
  right(90);
  forward((c+b)/2.0 + c); { color = ffffff }
  penDown();
  {
    Counterclockwise draw all 4 edges of a squarfe with edge length c
    in the colour endcoded by colorNo
  }
  polygonPart(c, 4, true, 4, colorNo);
  penUp();
  forward((c + b)/2.0); { color = ffffff }
  left(90);
  penDown();

end;

{
  Draws letter Ä in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterAe(h: ???; colorNo: ???);

begin
  penUp();
  forward(h); { color = ffffff }
  penDown();
  {
    Clockwise draw all 4 edges of a square with edge length h/16
    in the colour endcoded by colorNo
  }
  polygonPart(max(h/16.0,1), 4, false, 4, colorNo);
  right(90);
  penUp();
  forward(h/2.0); { color = ffffff }
  penDown();
  {
    Clockwise draw all 4 edges of a square with edge length h/16
    in the colour endcoded by colorNo
  }
  polygonPart(max(h/16.0,1), 4, false, 4, colorNo);
  right(90);
  penUp();
  forward(h); { color = ffffff }
  right(90);
  forward(h/2.0); { color = ffffff }
  penDown();
  right(90);
  letterA(h, colorNo);

end;

{
  Draws letter B in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterB(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  forward(h, colorNo);
  right(90);
  forward(c+b, colorNo);
  { Clockwise draw 4 edges of an octagon with edge length b }
  polygonPart(b, 8, false, 4, colorNo);
  forward(c, colorNo);
  penUp();
  left(180);
  forward(b + c); { color = ffffff }
  penDown();
  { Clockwise draw 4 edges of an octagon with edge length b }
  polygonPart(b, 8, false, 4, colorNo);
  forward(c, colorNo);
  penUp();
  left(180);
  forward(b + 2*c); { color = ffffff }
  penDown();
  left(90);

end;

{
  Draws letter C in the colour encoded by colorNo with font height h
  from the current turtle position.
}
procedure letterC(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer triangle at the octagon corner }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Clockwise draws 3 edges of an octagon with edge length b in the colour
    encoded by colorNo
  }
  polygonPart(b, 8, true, 3, colorNo);
  left(rotAngle);
  penUp();
  forward(2*b + 2*c); { color = ffffff }
  penDown();
  {
    Counterclockwise draws 4 edges of an octagon with edge length b
    iin the colour encoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(b + 2*c, colorNo);
  penUp();
  forward(c); { color = ffffff }
  left(90);
  forward(b + 2*c, colorNo);
  penDown();
  left(90);

end;

{
  Draws letter D in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterD(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  forward(h, colorNo);
  right(90);
  forward(c+b, colorNo);
  {
    Clockwise draw 2 edges of an octagon with edge length b in the colour
    encoded by colorNo
  }
  polygonPart(b, 8, false, 2, colorNo);
  forward(b + 2*c, colorNo);
  {
    Clockwise draw 2 edges of an octagon with edge length b in the colour
    encoded by colorNo
  }
  polygonPart(b, 8, false, 2, colorNo);
  forward(c, colorNo);
  penUp();
  left(180);
  forward(b + 2*c); { color = ffffff }
  penDown();
  left(90);

end;

{
  Draws letter G in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterG(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon. }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 4 edges of an octagon with edge length b in
    the colour encoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(c, colorNo);
  left(90);
  forward(b/2.0 + c, colorNo);
  penUp();
  backward(b/2.0 + c); { color = ffffff }
  right(90);
  forward(b + c); { color = ffffff }
  penDown();
  {
    Counterclockwise draw 4 edges of an octagon with edge length b in
    the colour encoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(b + 2*c, colorNo);
  penUp();
  forward(c); { color = ffffff }
  left(90);
  forward(b + 2*c, colorNo);
  penDown();
  left(90);

end;

{
  Draws letter J in colour encoded by colorNo with font height h
  from the current turtle position.
}
procedure letterJ(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 3 edges of an octagon with edge length b in
    the colour encoded by colorNo
  }
  polygonPart(b, 8, true, 3, colorNo);
  left(rotAngle);
  forward(h - c, colorNo);
  penUp();
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws letter O in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterO(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(b + 2*c, colorNo);
  {
    Counterclockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(b + 2*c, colorNo);
  penUp();
  forward(c); { color = ffffff }
  left(90);
  forward(b + 2*c); { color = ffffff }
  penDown();
  left(90);

end;

{
  Draws letter P in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterP(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the corner triangle outside the octagon }
  c <- b / sqrt(2.0);
  forward(h, colorNo);
  right(90);
  forward(c+b, colorNo);
  {
    Clockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, false, 4, colorNo);
  forward(c, colorNo);
  penUp();
  backward(b + 2*c); { color = ffffff }
  left(90);
  forward(b + 2*c); { color = ffffff }
  penDown();
  left(180);

end;

{
  Draws letter Q in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterQ(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(b + 2*c, colorNo);
  {
    Counterclockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, true, 4, colorNo);
  forward(b + 2*c, colorNo);
  penUp();
  forward(c); { color = ffffff }
  left(90);
  forward(b + 2*c); { color = ffffff }
  right(rotAngle);
  backward(b); { color = ffffff }
  penDown();
  forward(b, colorNo);
  left(90 + rotAngle);

end;

{
  Zeichnet den Buchstaben R von der Turtleposition aus
  mit Zeilenhöhe h
}
procedure letterR(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  forward(h, colorNo);
  right(90);
  forward(c+b, colorNo);
  {
    Clockwise draw 4 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, false, 4, colorNo);
  forward(c, colorNo);
  left(90 + rotAngle);
  forward(sqrt(2.0)*(b + 2*c), colorNo);
  left(90 + rotAngle);

end;

{
  Draws letter S in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterS(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Side length of the (outer) corner triangle of the octagon }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  penUp();
  forward(c); { color = ffffff }
  penDown();
  right(180);
  {
    Counterclockwise draw 6 edges of an octagon with edge length b
    in the colour encoded by colorNo
  }
  polygonPart(b, 8, true, 6, colorNo);
  {
    Clockwise draw 5 edges of an octagon with edge length b
    in the colour encoded by colorNo
  }
  polygonPart(b, 8, false, 5, colorNo);
  right(rotAngle);
  penUp();
  forward(2*b + 3*c); { color = ffffff }
  penDown();
  left(180);

end;

{
  Draws letter U in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterU(h: ???; colorNo: ???);

begin
  { edge length of a regular octagon }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  penUp();
  forward(c); { color = ffffff }
  penDown();
  forward(h - c, colorNo);
  penUp();
  backward(h-c); { color = ffffff }
  penDown();
  right(180);
  { Counterclockwise draw 3 edges of an octagoin with edge length b in colour specified by colorNo }
  polygonPart(b, 8, true, 3, colorNo);
  left(rotAngle);
  forward(h - c, colorNo);
  penUp();
  backward(h); { color = ffffff }
  penDown();

end;

{
  Draws a question mark in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure qstnMk(h: ???; colorNo: ???);

begin
  { Octagon edge length }
  b <- h * 0.5 / (sqrt(2.0) + 1);
  { Cathetus of the outer corner triangle of the octagon }
  c <- b / sqrt(2.0);
  { 360°/8 }
  rotAngle <- 45;
  penUp();
  forward(h-c); { color = ffffff }
  penDown();
  {
    Counterclockwise draw 5 edges of an octagon with edge length b
    in the colour endcoded by colorNo
  }
  polygonPart(b, 8, false, 5, colorNo);
  forward(c, colorNo);
  left(rotAngle);
  forward(b/2.0, colorNo);
  penUp();
  forward(c); { color = ffffff }
  left(90);
  forward(c/2.0); { color = ffffff }
  penDown();
  {
    Counterclockwise draw all 4 edges of a squarfe with edge length c
    in the colour endcoded by colorNo
  }
  polygonPart(c, 4, false, 4, colorNo);
  penUp();
  forward((c + b)/2.0); { color = ffffff }
  left(90);
  backward(c); { color = ffffff }
  penDown();

end;

{
  Draws digit 0 in the colour specified by colorNo with font height h
  from the current turtle position.
}
procedure digit0(h: ???; colorNo: ???);

begin
  penUp();
  forward(h/4.0); { color = ffffff }
  penDown();
  right(45);
  len <- h/sqrt(2);
  forward(len, colorNo);
  penUp();
  backward(len); { color = ffffff }
  left(45);
  backward(h/4.0); { color = ffffff }
  letterO(h, colorNo);

end;

{
  Draws letter Ö in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterOe(h: ???; colorNo: ???);

begin
  penUp();
  forward(h); { color = ffffff }
  penDown();
  right(90);
  {
    Clockwise draw all 4 edges of a square with edge length h/8
    in the colour endcoded by colorNo
  }
  polygonPart(h/8, 4, false, 4, colorNo);
  penUp();
  forward(h/2); { color = ffffff }
  penDown();
  right(90);
  {
    Clockwise draw all 4 edges of a square with edge length h/8
    in the colour endcoded by colorNo
  }
  polygonPart(h/8, 4, false, 4, colorNo);
  penUp();
  forward(h); { color = ffffff }
  penDown();
  right(90);
  penUp();
  forward(h/2); { color = ffffff }
  penDown();
  right(90);
  letterO(h, colorNo);

end;

{
  Draws letter Ü in colour specified by colorNo with font height h
  from the current turtle position.
}
procedure letterUe(h: ???; colorNo: ???);

begin
  penUp();
  forward(h); { color = ffffff }
  right(90);
  forward(max(h/8,1)); { color = ffffff }
  penDown();
  {
    Clockwise draw all 4 edges of a square with edge length h/16
    in the colour endcoded by colorNo
  }
  polygonPart(max(h/16,1), 4, false, 4, colorNo);
  penUp();
  forward(h/2 - 2 * max(h/8,1) - max(h/16, 1)); { color = ffffff }
  penDown();
  {
    Clockwise draw all 4 edges of a square with edge length h/16
    in the colour endcoded by colorNo
  }
  polygonPart(max(h/16,1), 4, false, 4, colorNo);
  penUp();
  forward(max(h/8,1)); { color = ffffff }
  penDown();
  right(90);
  penUp();
  forward(h); { color = ffffff }
  right(90);
  forward(h/2); { color = ffffff }
  penDown();
  right(90);
  letterU(h, colorNo);

end;

{
  Has the turtle draw the given string 'text´ with font height 'h´ (in
  pixels) and the colour coded by integer 'c´ from the current Turtle
  position to the Turtle canvas. If the turtle looks North then
  the text will be written rightwards. In the event, the turtle will be
  placed behind the text in original orientation (such that the next text
  would be written like a continuation. Colour codes:
  1 = black
  2 = red
  3 = yellow
  4 = green
  5 = cyan
  6 = blue
  7 = pink
  8 = grey
  9 = orange
  10 = violet
  All letters (ASCII) will be converted to uppercase,
  the set of representable special characters is: decimal digits,
  '.', ',', '!', '?', 'Ä', 'Ö', 'Ü'. Other characters will be shown as a small
  centred square (dummy character).
}
procedure drawText(text: string; h: Longint; c: Longint);

begin
  gap <- h/10.0;
  for k := 1 to length(text) do
  begin
    letter <- uppercase(copy(text, k, 1));
    case (letter) of
      "A":
        begin
          letterA(h,c);
        end;
      "B":
        begin
          letterB(h,c);
        end;
      "C":
        begin
          letterC(h,c);
        end;
      "D":
        begin
          letterD(h,c);
        end;
      "E":
        begin
          letterE(h,c);
        end;
      "F":
        begin
          letterF(h,c);
        end;
      "G":
        begin
          letterG(h,c);
        end;
      "H":
        begin
          letterH(h,c);
        end;
      "I":
        begin
          letterI(h,c);
        end;
      "J":
        begin
          letterJ(h,c);
        end;
      "K":
        begin
          letterK(h,c);
        end;
      "L":
        begin
          letterL(h,c);
        end;
      "M":
        begin
          letterM(h,c);
        end;
      "N":
        begin
          letterN(h,c);
        end;
      "O":
        begin
          letterO(h,c);
        end;
      "P":
        begin
          letterP(h,c);
        end;
      "Q":
        begin
          letterQ(h,c);
        end;
      "R":
        begin
          letterR(h,c);
        end;
      "S":
        begin
          letterS(h,c);
        end;
      "T":
        begin
          letterT(h,c);
        end;
      "U":
        begin
          letterU(h,c);
        end;
      "V":
        begin
          letterV(h,c);
        end;
      "W":
        begin
          letterW(h,c);
        end;
      "X":
        begin
          letterX(h,c);
        end;
      "Y":
        begin
          letterY(h,c);
        end;
      "Z":
        begin
          letterZ(h,c);
        end;
      " ":
        begin
          blank(h,c);
        end;
      "!":
        begin
          exclMk(h,c);
        end;
      "?":
        begin
          qstnMk(h,c);
        end;
      ".":
        begin
          fullSt(h,c);
        end;
      ",":
        begin
          comma(h,c);
        end;
      "Ä":
        begin
          letterAe(h,c);
        end;
      "Ö":
        begin
          letterOe(h,c);
        end;
      "Ü":
        begin
          letterUe(h,c);
        end;
      "0":
        begin
          digit0(h,c);
        end;
      "1":
        begin
          digit1(h,c);
        end;
      "2":
        begin
          digit2(h,c);
        end;
      "3":
        begin
          digit3(h,c);
        end;
      "4":
        begin
          digit4(h,c);
        end;
      "5":
        begin
          digit5(h,c);
        end;
      "6":
        begin
          digit6(h,c);
        end;
      "7":
        begin
          digit7(h,c);
        end;
      "8":
        begin
          digit8(h,c);
        end;
      "9":
        begin
          digit9(h,c);
        end;
      else
        charDummy(h,c);
    end;
    right(90);
    penUp();
    forward(gap); { color = ffffff }
    penDown();
    left(90);
  end;

end;
{ = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = }

begin
  writeln("This is a demo program for text writing with Turleizer.");
  showTurtle();
  penDown();
  y <- 0;
  repeat
    write("Enter some text (empty string to exit)"); readln(text);
    { Make sure the content is interpreted as string }
    text <- "" + text;
    if (text <> "") then
    begin
      repeat
        write("Height of the text (pixels)"); readln(height);
            until (height >= 5);
      repeat
        write("Colour (1=black, 2=red, 3=yellow, 4=green, 5=cyan, 6=blue, 7=pink, 8=gray, 9=orange, 10=violet)"); readln(colour);
            until (colour >= 1 and colour <= 10);
      y <- y + height + 2;
      gotoXY(0, y - 2);
      drawText(text, height, colour);
    end;
    until (text = "");
  gotoXY(0, y + 15);
  drawText("Thank you, bye.", 10, 4);
  hideTurtle();
end.
