// Generated by Structorizer 3.32-31 
#include <string>
using std::string;

struct Date {
	int	year;
	short	month;
	short	day;
};
Date today;

// function initialize_CommonTypes423() 

// Automatically created initialization procedure for CommonTypes423 
// TODO: Revise the return type and declare the parameters. 
void initialize_CommonTypes423()
{
	static bool initDone_CommonTypes423 = false;
	if (not initDone_CommonTypes423)
	{
		type Date = record{year: int; month, day: short};
		var today: Date;
		initDone_CommonTypes423 <- true;
	}
}

// function isLeapYear(year): boolean 

// Detects whether the given year is a leap year in the Gregorian calendar 
// (extrapolated backwards beyonds its inauguration) 
// TODO: Revise the return type and declare the parameters. 
bool isLeapYear(??? year)
{
	// TODO: Check and accomplish variable declarations: 

	// Most years aren't leap years... 
	isLeapYear <- false;
	if ((year mod 4 = 0) and (year mod 100 <> 0))
	{
		// This is a standard leap year 
		isLeapYear <- true;
	}
	else if (year mod 400 = 0)
	{
		// One of the rare leap years 
		// occurring every 400 years 
		isLeapYear <- true;
	}

	return isLeapYear;
}

// function int daysInMonth423(Date aDate) 

// Computes the number of days the given month (1..12) 
// has in the the given year 
// TODO: Revise the return type and declare the parameters. 
int daysInMonth423(Date aDate)
{
	// TODO: Check and accomplish variable declarations: 

	initialize_CommonTypes423();
	
	// select the case where illegal values are also considered 
	switch (aDate.month)
	{
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		days <- 31;
		break;
	case 4:
	case 6:
	case 9:
	case 11:
		days <- 30;
		break;
	case 2:
		// Default value for February 
		days <- 28;
		// To make the call work it has to be done in 
		// a separate element (cannot be performed 
		// as part of the condition of an Alternative) 
		isLeap <- isLeapYear(aDate.year);
		if (isLeap)
		{
			days <- 29;
		}
		break;
	default:
		// This is the return value for illegal months. 
		// It is easy to check 
		days <- 0;
	}
	return days;
}
// = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

// program DateTests563 

// Several declaration and initialisation variants for test of Analyser, Executor, and Generators 
int main(void)
{
	// TODO: Check and accomplish variable declarations: 

	initialize_CommonTypes423();
	
	Date someDay <- Date{day: 24, month: 2, year: 2017};
	nDays <- daysInMonth423(someDay);
	today <- Date{2018, 7, 20};
	type Person = record { name: string; birth: Date; test: array[3] of int;};
	var me: Person <- Person{"roger", Date{1985, 3, 6}, {0, 8, 15}};
	var declArray: array of double <- {9.0, 7.5, -6.4, 1.7, 0.0};
	var explArray: double[3] <- {7.1, 0.5, -1.5};
	double doof[3] <- {0.4};
	double[2] dull <- {-12.7, 96.03};
	values <- {47, 11};

	return 0;
}
