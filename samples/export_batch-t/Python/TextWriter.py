#!/usr/bin/python3
# -*- coding: utf-8 -*-
# TextDemo 
# generated by Structorizer 3.32-31 
from enum import Enum
import math

def backward(len, color) :
    if ((color) == 1) :
        backward(len)
    elif ((color) == 2) :
        backward(len)
    elif ((color) == 3) :
        backward(len)
    elif ((color) == 4) :
        backward(len)
    elif ((color) == 5) :
        backward(len)
    elif ((color) == 6) :
        backward(len)
    elif ((color) == 7) :
        backward(len)
    elif ((color) == 8) :
        backward(len)
    elif ((color) == 9) :
        backward(len)
    elif ((color) == 10) :
        backward(len)

# Draws a blank for font height h, ignoring the colorNo 
def blank(h, colorNo) :
    width <- h/2.0
    penUp()
    right(90)
    forward(width)
    left(90)

def forward(len, color) :
    if ((color) == 1) :
        forward(len)
    elif ((color) == 2) :
        forward(len)
    elif ((color) == 3) :
        forward(len)
    elif ((color) == 4) :
        forward(len)
    elif ((color) == 5) :
        forward(len)
    elif ((color) == 6) :
        forward(len)
    elif ((color) == 7) :
        forward(len)
    elif ((color) == 8) :
        forward(len)
    elif ((color) == 9) :
        forward(len)
    elif ((color) == 10) :
        forward(len)

# Draws digit 1 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit1(h, colorNo) :
    penUp()
    forward(h/2.0)
    penDown()
    right(45)
    forward(h/math.sqrt(2), colorNo)
    left(45)
    backward(h, colorNo)

# Draws digit 4 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit4(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    # inner angle at top of the triangle 
    angle <- math.degrees(math.atan(1 - 2.0*c/h))
    right(90)
    penUp()
    forward(c + b)
    penDown()
    left(90)
    forward(h, colorNo)
    left(180 - angle)
    forward(math.sqrt(h*h/4.0 + sqr(h/2.0 - c)), colorNo)
    left(90 + angle)
    forward(h/2.0, colorNo)
    penUp()
    left(90)
    backward(h/2.0)
    penDown()

# Draws digit 7 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit7(h, colorNo) :
    angle <- 90 + math.degrees(math.atan(0.5))
    penUp()
    forward(h)
    penDown()
    right(90)
    forward(h/2.0, colorNo)
    right(angle)
    forward(h * math.sqrt(1.25), colorNo)
    left(angle)
    penUp()
    forward(h/2.0)
    left(90)
    penDown()

# Draws letter A in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterA(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(h*h + width*width/4.0)
    rotAngle <- math.degrees(math.atan(width/2.0/h))
    right(rotAngle)
    forward(hypo/2.0, colorNo)
    right(90 - rotAngle)
    forward(width/2.0, colorNo)
    penUp()
    backward(width/2.0)
    penDown()
    left(90 - rotAngle)
    forward(hypo/2.0, colorNo)
    left(2*rotAngle)
    forward(-hypo, colorNo)
    right(rotAngle)

# Draws letter E in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterE(h, colorNo) :
    width <- h/2.0
    forward(h, colorNo)
    right(90)
    forward(width, colorNo)
    right(90)
    penUp()
    forward(h/2.0)
    right(90)
    penDown()
    forward(width, colorNo)
    left(90)
    penUp()
    forward(h/2.0)
    left(90)
    penDown()
    forward(width, colorNo)
    left(90)

# Draws letter F in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterF(h, colorNo) :
    width <- h/2.0
    forward(h, colorNo)
    right(90)
    forward(width, colorNo)
    right(90)
    penUp()
    forward(h/2.0)
    right(90)
    penDown()
    forward(width, colorNo)
    left(90)
    penUp()
    forward(h/2.0)
    left(90)
    forward(width)
    penDown()
    left(90)

# Draws letter H in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterH(h, colorNo) :
    width <- h/2.0
    forward(h, colorNo)
    penUp()
    right(90)
    forward(width)
    right(90)
    penDown()
    forward(h/2.0, colorNo)
    right(90)
    forward(width, colorNo)
    penUp()
    backward(width)
    left(90)
    penDown()
    forward(h/2.0, colorNo)
    left(180)

# Draws letter I in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterI(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    right(90)
    forward(c)
    penDown()
    forward(b, colorNo)
    penUp()
    backward(b/2.0)
    left(90)
    penDown()
    forward(h, colorNo)
    penUp()
    right(90)
    backward(b/2.0)
    penDown()
    forward(b, colorNo)
    penUp()
    forward(b/2 + c)
    left(90)
    backward(h)
    penDown()

# Draws letter K in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterK(h, colorNo) :
    width <- h/2.0
    diag <- h/math.sqrt(2.0)
    forward(h, colorNo)
    penUp()
    right(90)
    forward(width)
    right(135)
    penDown()
    forward(diag, colorNo)
    left(90)
    forward(diag, colorNo)
    left(135)

# Draws letter L in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterL(h, colorNo) :
    width <- h/2.0
    forward(h, colorNo)
    penUp()
    backward(h)
    right(90)
    penDown()
    forward(width, colorNo)
    left(90)

# Draws letter M in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterM(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(width*width + h*h)/2.0
    rotAngle <- math.degrees(math.atan(width/h))
    forward(h, colorNo)
    left(rotAngle)
    forward(-hypo, colorNo)
    right(2*rotAngle)
    forward(hypo, colorNo)
    left(rotAngle)
    forward(-h, colorNo)

# Draws letter N in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterN(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(width*width + h*h)
    rotAngle <- math.degrees(math.atan(width/h))
    forward(h, colorNo)
    left(rotAngle)
    forward(-hypo, colorNo)
    right(rotAngle)
    forward(h, colorNo)
    penUp()
    backward(h)
    penDown()

# Draws letter T in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterT(h, colorNo) :
    width <- h/2.0
    penUp()
    forward(h)
    penDown()
    right(90)
    forward(width, colorNo)
    penUp()
    backward(width/2.0)
    penDown()
    right(90)
    forward(h, colorNo)
    left(90)
    penUp()
    forward(width/2.0)
    penDown()
    left(90)

# Draws letter V in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterV(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(h*h + width*width/4.0)
    rotAngle <- math.degrees(math.atan(width/2.0/h))
    penUp()
    forward(h)
    left(rotAngle)
    penDown()
    forward(-hypo, colorNo)
    right(2*rotAngle)
    forward(hypo, colorNo)
    penUp()
    left(rotAngle)
    backward(h)
    penDown()

# Draws letter W in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterW(h, colorNo) :
    width <- h/2.0
    width_3 <- width/3.0
    hypo <- math.sqrt(width_3*width_3 + h*h)
    rotAngle <- math.degrees(math.atan(width_3/h))
    penUp()
    forward(h)
    left(rotAngle)
    penDown()
    forward(-hypo, colorNo)
    right(2*rotAngle)
    forward(hypo, colorNo)
    penUp()
    left(90+rotAngle)
    forward(width_3)
    right(90-rotAngle)
    penDown()
    forward(-hypo, colorNo)
    right(2*rotAngle)
    forward(hypo, colorNo)
    penUp()
    left(rotAngle)
    backward(h)
    penDown()

# Draws letter X in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterX(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(width*width + h*h)
    rotAngle <- math.degrees(math.atan(width/h))
    right(rotAngle)
    forward(hypo, colorNo)
    penUp()
    left(90+rotAngle)
    forward(width)
    right(90-rotAngle)
    penDown()
    forward(-hypo, colorNo)
    right(rotAngle)

# Draws letter Y in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterY(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(width*width + h*h)/2.0
    rotAngle <- math.degrees(math.atan(width/h))
    penUp()
    forward(h)
    left(rotAngle)
    penDown()
    forward(-hypo, colorNo)
    right(rotAngle)
    penUp()
    backward(h/2.0)
    penDown()
    forward(h/2.0, colorNo)
    right(rotAngle)
    forward(hypo, colorNo)
    left(rotAngle)
    penUp()
    backward(h)
    penDown()

# Draws letter Z in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterZ(h, colorNo) :
    width <- h/2.0
    hypo <- math.sqrt(width*width + h*h)
    rotAngle <- math.degrees(math.atan(width/h))
    penUp()
    forward(h)
    right(90)
    penDown()
    forward(width, colorNo)
    left(90-rotAngle)
    forward(-hypo, colorNo)
    right(90-rotAngle)
    forward(width, colorNo)
    left(90)

# Draws nEdges edges of a regular n-polygon with edge length a 
# counter-clockwise, if ctrclkws is true, or clockwise if ctrclkws is false. 
def polygonPart(a, n, ctrclkws, nEdges, color) :
    rotAngle <- 360.0/n
    if (ctrclkws):
        rotAngle <- -rotAngle

    for k in range(1, nEdges+1, 1):
        right(rotAngle)
        forward(a, color)

# Draws a dummy character (small centered square) with font height h and 
# the colour encoded by colorNo 
def charDummy(h, colorNo) :
    width <- h / 2.0
    # Octagon edge length (here: edge lengzh of the square) 
    b <- width / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- (width - b) / 2.0
    d <- b / math.sqrt(2.0)
    penUp()
    forward(h/2.0-b/2.0)
    right(90)
    forward(c)
    right(90)
    penDown()
    # Draws the square with edge length b 
    polygonPart(b, 4, true, 4, colorNo)
    penUp()
    left(90)
    forward(b + c)
    left(90)
    backward(h/2.0-b/2.0)
    penDown()

# Draws a comma in colour specified by colorNo with font height h 
# from the current turtle position. 
def comma(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    rotAngle <- math.degrees(math.atan(0.5))
    hypo <- c * math.sqrt(1.25)
    penUp()
    right(90)
    forward((c+b)/2.0 + c)
    penDown()
    # Counterclockwise draw 3 edges of a square with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 3, colorNo)
    left(90)
    forward(c/2.0, colorNo)
    right(90)
    forward(c, colorNo)
    left(180 - rotAngle)
    forward(hypo, colorNo)
    penUp()
    right(90 - rotAngle)
    forward((c + b)/2.0)
    left(90)
    penDown()

# Draws digit 2 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit2(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    angle <- math.degrees(math.atan(h/(h + 2*c)))
    penUp()
    forward(h - c)
    penDown()
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    right(angle)
    forward(h/2.0 * math.sqrt(1 + sqr(1+2*c/h)), colorNo)
    left(90 + angle)
    forward(h/2.0, colorNo)
    left(90)

# Draws digit 3 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit3(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    penUp()
    left(180)
    forward(b)
    penDown()
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 5, colorNo)
    penUp()
    left(45)
    forward(h-c)
    left(90)
    forward(h/2.0)
    left(90)
    penDown()

# Draws digit 5 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit5(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    forward(c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(h/2.0, 4, false, 2, colorNo)
    penUp()
    left(90)
    backward(h)
    penDown()

# Draws digit 6 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit6(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw all 8 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 8, colorNo)
    penUp()
    left(180)
    forward(b)
    penDown()
    forward(2 * c + b, colorNo)
    # Clockwise draw 3 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 3, colorNo)
    penUp()
    left(135)
    backward(h-c)
    penDown()

# Draws digit 8 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit8(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw all 8 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 8, colorNo)
    penUp()
    left(180)
    forward(b)
    right(45)
    forward(b)
    left(135)
    penDown()
    # Clockwise draw 7 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 7, colorNo)
    penUp()
    left(45)
    forward(h/2.0)
    left(90)
    forward(c)
    left(90)
    penDown()

# Draws digit 9 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit9(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(2 * c + b, colorNo)
    # Counterclockwise draw 7 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 7, colorNo)
    penUp()
    left(45)
    backward(h/2.0 + c)
    penDown()

# Draws an exclamation mark in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def exclMk(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    width <- h/2.0
    length1 <- h - (b+c)/2.0
    length2 <- length1 - 2*c
    hypo <- math.sqrt(width*width/16.0 + length2*length2)
    # 360°/8 
    rotAngle <- 45
    rotAngle2 <- math.degrees(math.atan(width/4.0/length2))
    penUp()
    forward(length1)
    right(90)
    forward(width/2.0)
    left(90 + rotAngle)
    penDown()
    # Clockwise draw 5 edges of an octagon with edge length b/2 
    # in the colour endcoded by colorNo 
    polygonPart(b/2.0, 8, false, 5, colorNo)
    right(rotAngle2)
    forward(hypo, colorNo)
    left(2*rotAngle2)
    forward(-hypo, colorNo)
    penUp()
    forward(hypo)
    right(rotAngle2)
    forward(c)
    left(90)
    forward(c/2.0)
    penDown()
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    penUp()
    forward((c + b)/2.0)
    left(90)
    backward(c)
    penDown()

# Draws a full stop in colour specified by colorNo with font height h 
# from the current turtle position. 
def fullSt(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    right(90)
    forward((c+b)/2.0 + c)
    penDown()
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 4, colorNo)
    penUp()
    forward((c + b)/2.0)
    left(90)
    penDown()

# Draws letter Ä in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterAe(h, colorNo) :
    penUp()
    forward(h)
    penDown()
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16.0,1), 4, false, 4, colorNo)
    right(90)
    penUp()
    forward(h/2.0)
    penDown()
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16.0,1), 4, false, 4, colorNo)
    right(90)
    penUp()
    forward(h)
    right(90)
    forward(h/2.0)
    penDown()
    right(90)
    letterA(h, colorNo)

# Draws letter B in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterB(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    forward(h, colorNo)
    right(90)
    forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    forward(c, colorNo)
    penUp()
    left(180)
    forward(b + c)
    penDown()
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    forward(c, colorNo)
    penUp()
    left(180)
    forward(b + 2*c)
    penDown()
    left(90)

# Draws letter C in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterC(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer triangle at the octagon corner 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    penUp()
    forward(c)
    penDown()
    right(180)
    # Clockwise draws 3 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    left(rotAngle)
    penUp()
    forward(2*b + 2*c)
    penDown()
    # Counterclockwise draws 4 edges of an octagon with edge length b 
    # iin the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(b + 2*c, colorNo)
    penUp()
    forward(c)
    left(90)
    forward(b + 2*c, colorNo)
    penDown()
    left(90)

# Draws letter D in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterD(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    forward(h, colorNo)
    right(90)
    forward(c+b, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    forward(b + 2*c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    forward(c, colorNo)
    penUp()
    left(180)
    forward(b + 2*c)
    penDown()
    left(90)

# Draws letter G in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterG(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon. 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(c, colorNo)
    left(90)
    forward(b/2.0 + c, colorNo)
    penUp()
    backward(b/2.0 + c)
    right(90)
    forward(b + c)
    penDown()
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(b + 2*c, colorNo)
    penUp()
    forward(c)
    left(90)
    forward(b + 2*c, colorNo)
    penDown()
    left(90)

# Draws letter J in colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterJ(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 3 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    left(rotAngle)
    forward(h - c, colorNo)
    penUp()
    backward(h)
    penDown()

# Draws letter O in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterO(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(b + 2*c, colorNo)
    penUp()
    forward(c)
    left(90)
    forward(b + 2*c)
    penDown()
    left(90)

# Draws letter P in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterP(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c <- b / math.sqrt(2.0)
    forward(h, colorNo)
    right(90)
    forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    forward(c, colorNo)
    penUp()
    backward(b + 2*c)
    left(90)
    forward(b + 2*c)
    penDown()
    left(180)

# Draws letter Q in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterQ(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    forward(b + 2*c, colorNo)
    penUp()
    forward(c)
    left(90)
    forward(b + 2*c)
    right(rotAngle)
    backward(b)
    penDown()
    forward(b, colorNo)
    left(90 + rotAngle)

# Zeichnet den Buchstaben R von der Turtleposition aus 
# mit Zeilenhöhe h 
def letterR(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    forward(h, colorNo)
    right(90)
    forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    forward(c, colorNo)
    left(90 + rotAngle)
    forward(math.sqrt(2.0)*(b + 2*c), colorNo)
    left(90 + rotAngle)

# Draws letter S in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterS(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Side length of the (outer) corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    penUp()
    forward(c)
    penDown()
    right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    # Clockwise draw 5 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    right(rotAngle)
    penUp()
    forward(2*b + 3*c)
    penDown()
    left(180)

# Draws letter U in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterU(h, colorNo) :
    # edge length of a regular octagon 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    penUp()
    forward(c)
    penDown()
    forward(h - c, colorNo)
    penUp()
    backward(h-c)
    penDown()
    right(180)
    # Counterclockwise draw 3 edges of an octagoin with edge length b in colour specified by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    left(rotAngle)
    forward(h - c, colorNo)
    penUp()
    backward(h)
    penDown()

# Draws a question mark in colour specified by colorNo with font height h 
# from the current turtle position. 
def qstnMk(h, colorNo) :
    # Octagon edge length 
    b <- h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c <- b / math.sqrt(2.0)
    # 360°/8 
    rotAngle <- 45
    penUp()
    forward(h-c)
    penDown()
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    forward(c, colorNo)
    left(rotAngle)
    forward(b/2.0, colorNo)
    penUp()
    forward(c)
    left(90)
    forward(c/2.0)
    penDown()
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    penUp()
    forward((c + b)/2.0)
    left(90)
    backward(c)
    penDown()

# Draws digit 0 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit0(h, colorNo) :
    penUp()
    forward(h/4.0)
    penDown()
    right(45)
    len <- h/math.sqrt(2)
    forward(len, colorNo)
    penUp()
    backward(len)
    left(45)
    backward(h/4.0)
    letterO(h, colorNo)

# Draws letter Ö in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterOe(h, colorNo) :
    penUp()
    forward(h)
    penDown()
    right(90)
    # Clockwise draw all 4 edges of a square with edge length h/8 
    # in the colour endcoded by colorNo 
    polygonPart(h/8, 4, false, 4, colorNo)
    penUp()
    forward(h/2)
    penDown()
    right(90)
    # Clockwise draw all 4 edges of a square with edge length h/8 
    # in the colour endcoded by colorNo 
    polygonPart(h/8, 4, false, 4, colorNo)
    penUp()
    forward(h)
    penDown()
    right(90)
    penUp()
    forward(h/2)
    penDown()
    right(90)
    letterO(h, colorNo)

# Draws letter Ü in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterUe(h, colorNo) :
    penUp()
    forward(h)
    right(90)
    forward(max(h/8,1))
    penDown()
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16,1), 4, false, 4, colorNo)
    penUp()
    forward(h/2 - 2 * max(h/8,1) - max(h/16, 1))
    penDown()
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16,1), 4, false, 4, colorNo)
    penUp()
    forward(max(h/8,1))
    penDown()
    right(90)
    penUp()
    forward(h)
    right(90)
    forward(h/2)
    penDown()
    right(90)
    letterU(h, colorNo)

# Has the turtle draw the given string 'text´ with font height 'h´ (in 
# pixels) and the colour coded by integer 'c´ from the current Turtle 
# position to the Turtle canvas. If the turtle looks North then 
# the text will be written rightwards. In the event, the turtle will be 
# placed behind the text in original orientation (such that the next text 
# would be written like a continuation. Colour codes: 
# 1 = black 
# 2 = red 
# 3 = yellow 
# 4 = green 
# 5 = cyan 
# 6 = blue 
# 7 = pink 
# 8 = grey 
# 9 = orange 
# 10 = violet 
# All letters (ASCII) will be converted to uppercase, 
# the set of representable special characters is: decimal digits, 
# '.', ',', '!', '?', 'Ä', 'Ö', 'Ü'. Other characters will be shown as a small 
# centred square (dummy character). 
def drawText(text, h, c) :
    gap <- h/10.0
    for k in range(1, length(text)+1, 1):
        letter <- uppercase(copy(text, k, 1))
        if ((letter) == "A") :
            letterA(h,c)
        elif ((letter) == "B") :
            letterB(h,c)
        elif ((letter) == "C") :
            letterC(h,c)
        elif ((letter) == "D") :
            letterD(h,c)
        elif ((letter) == "E") :
            letterE(h,c)
        elif ((letter) == "F") :
            letterF(h,c)
        elif ((letter) == "G") :
            letterG(h,c)
        elif ((letter) == "H") :
            letterH(h,c)
        elif ((letter) == "I") :
            letterI(h,c)
        elif ((letter) == "J") :
            letterJ(h,c)
        elif ((letter) == "K") :
            letterK(h,c)
        elif ((letter) == "L") :
            letterL(h,c)
        elif ((letter) == "M") :
            letterM(h,c)
        elif ((letter) == "N") :
            letterN(h,c)
        elif ((letter) == "O") :
            letterO(h,c)
        elif ((letter) == "P") :
            letterP(h,c)
        elif ((letter) == "Q") :
            letterQ(h,c)
        elif ((letter) == "R") :
            letterR(h,c)
        elif ((letter) == "S") :
            letterS(h,c)
        elif ((letter) == "T") :
            letterT(h,c)
        elif ((letter) == "U") :
            letterU(h,c)
        elif ((letter) == "V") :
            letterV(h,c)
        elif ((letter) == "W") :
            letterW(h,c)
        elif ((letter) == "X") :
            letterX(h,c)
        elif ((letter) == "Y") :
            letterY(h,c)
        elif ((letter) == "Z") :
            letterZ(h,c)
        elif ((letter) == " ") :
            blank(h,c)
        elif ((letter) == "!") :
            exclMk(h,c)
        elif ((letter) == "?") :
            qstnMk(h,c)
        elif ((letter) == ".") :
            fullSt(h,c)
        elif ((letter) == ",") :
            comma(h,c)
        elif ((letter) == "Ä") :
            letterAe(h,c)
        elif ((letter) == "Ö") :
            letterOe(h,c)
        elif ((letter) == "Ü") :
            letterUe(h,c)
        elif ((letter) == "0") :
            digit0(h,c)
        elif ((letter) == "1") :
            digit1(h,c)
        elif ((letter) == "2") :
            digit2(h,c)
        elif ((letter) == "3") :
            digit3(h,c)
        elif ((letter) == "4") :
            digit4(h,c)
        elif ((letter) == "5") :
            digit5(h,c)
        elif ((letter) == "6") :
            digit6(h,c)
        elif ((letter) == "7") :
            digit7(h,c)
        elif ((letter) == "8") :
            digit8(h,c)
        elif ((letter) == "9") :
            digit9(h,c)
        else:
            charDummy(h,c)

        right(90)
        penUp()
        forward(gap)
        penDown()
        left(90)

# = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

# Demo program for routine drawText() 
# Asks the user to enter a text, a wanted text height and colour, 
# and then draws this string onto the turtle screen. Places every 
# entered text to a new line. 
print("This is a demo program for text writing with Turleizer.", sep='')
showTurtle()
penDown()
y <- 0
while True:
    text = input("Enter some text (empty string to exit)")
    # Make sure the content is interpreted as string 
    text <- "" + text
    if (text <> ""):
        while True:
            height = input("Height of the text (pixels)")
            if height >= 5:
                break

        while True:
            colour = input("Colour (1=black, 2=red, 3=yellow, 4=green, 5=cyan, 6=blue, 7=pink, 8=gray, 9=orange, 10=violet)")
            if colour >= 1 and colour <= 10:
                break

        y <- y + height + 2
        gotoXY(0, y - 2)
        drawText(text, height, colour)

    if text = "":
        break

gotoXY(0, y + 15)
drawText("Thank you, bye.", 10, 4)
hideTurtle()

