  index60285225: INTEGER;
  array60285225: ARRAY 5 OF ARRAY 100 OF CHAR;
  index23d2a7e8: INTEGER;
  index587d1d39: INTEGER;
  index9a7504c: INTEGER;
  array9a7504c: ARRAY 2 OF ARRAY 100 OF CHAR;
(*
  Concept and lisp implementation published by Joseph Weizenbaum (MIT):
  "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In:
  Computational Linguistis 1(1966)9, pp. 36-45
  Revision history:
  2016-10-06 Initial version
  2017-03-29 Two diagrams updated (comments translated to English)
  2017-03-29 More keywords and replies added
  2019-03-14 Replies and mapping reorganised for easier maintenance
  2019-03-15 key map joined from keyword array and index map
  2019-03-28 Keyword "bot" inserted (same reply ring as "computer")
  2019-11-28 New global type "History" (to ensure a homogenous array)
 *)
MODULE ELIZA;
(* Generated by Structorizer 3.32-31 *)
IMPORT In,Out;
TYPE
  (*
    histArray contains the most recent user replies as ring buffer;
    histIndex is the index where the next reply is to be stored (= index of the oldest
    cached user reply).
    Note: The depth of the history is to be specified by initializing a variable of this type,
    e.g. for a history of depth 5:
    myhistory <- History{{"", "", "", "", ""}, 0}
   *)
  History* = RECORD
      histArray:	ARRAY OF ARRAY 100 OF CHAR;
      histIndex:	INTEGER
    END;

  (* Associates a key word in the text with an index in the reply ring array *)
  KeyMapEntry* = RECORD
      keyword:	ARRAY 100 OF CHAR;
      index:	INTEGER
    END;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
(* Cares for correct letter case among others *)
PROCEDURE adjustSpelling(sentence: ARRAY 100 OF CHAR): ARRAY 100 OF CHAR;
BEGIN
  result <- sentence;
  position <- 1;
  WHILE (position <= length(sentence)) and (copy(sentence, position, 1) = " ") DO
    position <- position + 1;
  END;
  IF position <= length(sentence) THEN
    start <- copy(sentence, 1, position);
    delete(result, 1, position);
    insert(uppercase(start), result, 1);
  END;
  array9a7504c[0] := " i ";
  array9a7504c[1] := " i\'";
  FOR index9a7504c := 0 TO 1 DO
    word := array9a7504c[index9a7504c];
    position <- pos(word, result);
    WHILE position > 0 DO
      delete(result, position+1, 1);
      insert("I", result, position+1);
      position <- pos(word, result);
    END;
  END;
  RETURN result;
END adjustSpelling;

(*
  Checks whether the given text contains some kind of
  good-bye phrase inducing the end of the conversation
  and if so writes a correspding good-bye message and
  returns true, otherwise false
 *)
PROCEDURE checkGoodBye(text: ARRAY 100 OF CHAR; VAR phrases: ARRAY OF ARRAY 2 OF ARRAY 100 OF CHAR): BOOLEAN;
BEGIN
  FOR index587d1d39 := 0 TO LEN(phrases)-1 DO
    pair := phrases[index587d1d39];
    IF pos(pair[0], text) > 0 THEN
      (* TODO: Replace "TYPE" by the the actual Out procedure name for this type and add a length argument where needed! *)
      Out.TYPE(pair[1]);
      Out.Ln;
      RETURN true;
    END;
  END;
  RETURN false;
END checkGoodBye;

(*
  Checks whether newInput has occurred among the recently cached
  input strings in the histArray component of history and updates the history.
 *)
PROCEDURE checkRepetition(history: History; VAR newInput: ARRAY 100 OF CHAR): BOOLEAN;
BEGIN
  hasOccurred <- false;
  IF length(newInput) > 4 THEN
    histDepth <- length(history.histArray);
    FOR i := 0 TO histDepth-1 DO
      IF newInput = history.histArray[i] THEN
        hasOccurred <- true;
      END;
    END;
    history.histArray[history.histIndex] <- newInput;
    history.histIndex <- (history.histIndex + 1) mod (histDepth);
  END;
  RETURN hasOccurred;
END checkRepetition;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
PROCEDURE conjugateStrings(sentence, key: ARRAY 100 OF CHAR; keyPos: INTEGER; VAR flexions: ARRAY OF ARRAY 2 OF ARRAY 100 OF CHAR): ARRAY 100 OF CHAR;
BEGIN
  result <- " " + copy(sentence, keyPos + length(key), length(sentence)) + " ";
  FOR index23d2a7e8 := 0 TO LEN(flexions)-1 DO
    pair := flexions[index23d2a7e8];
    left <- "";
    right <- result;
    position <- pos(pair[0], right);
    WHILE position > 0 DO
      left <- left + copy(right, 1, position-1) + pair[1];
      right <- copy(right, position + length(pair[0]), length(right));
      position <- pos(pair[0], right);
    END;
    result <- left + right;
  END;
  (* Eliminate multiple spaces *)
  position <- pos("  ", result);
  WHILE position > 0 DO
    result <- copy(result, 1, position-1) + copy(result, position+1, length(result));
    position <- pos("  ", result);
  END;
  RETURN result;
END conjugateStrings;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
(*
  Looks for the occurrence of the first of the strings
  contained in keywords within the given sentence (in
  array order).
  Returns an array of
  0: the index of the first identified keyword (if any, otherwise -1),
  1: the position inside sentence (0 if not found)
 *)
PROCEDURE findKeyword(keyMap: ARRAY OF KeyMapEntry; VAR sentence: ARRAY 100 OF CHAR): ARRAY 2 OF INTEGER;
BEGIN
  (* Contains the index of the keyword and its position in sentence *)
  result <- {-1, 0};
  i <- 0;
  WHILE (result[0] < 0) and (i < length(keyMap)) DO
    var entry: KeyMapEntry <- keyMap[i];
    position <- pos(entry.keyword, sentence);
    IF position > 0 THEN
      result[0] <- i;
      result[1] <- position;
    END;
    i <- i+1;
  END;
  RETURN result;
END findKeyword;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
(*
  Converts the sentence to lowercase, eliminates all
  interpunction (i.e. ',', '.', ';'), and pads the
  sentence among blanks
 *)
PROCEDURE normalizeInput(sentence: ARRAY 100 OF CHAR): ARRAY 100 OF CHAR;
BEGIN
  sentence <- lowercase(sentence);
  array60285225[0] := '.';
  array60285225[1] := ',';
  array60285225[2] := ';';
  array60285225[3] := '!';
  array60285225[4] := '?';
  FOR index60285225 := 0 TO 4 DO
    symbol := array60285225[index60285225];
    position <- pos(symbol, sentence);
    WHILE position > 0 DO
      sentence <- copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence));
      position <- pos(symbol, sentence);
    END;
  END;
  result <- " " + sentence + " ";
  RETURN result;
END normalizeInput;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
PROCEDURE setupGoodByePhrases: ARRAY OF ARRAY 2 OF ARRAY 100 OF CHAR;
BEGIN
  phrases[0] <- {" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice."};
  phrases[1] <- {"bye", "Well, let\'s end our talk for now. See you later. Bye."};
  RETURN phrases;
END setupGoodByePhrases;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
(*
  The lower the index the higher the rank of the keyword (search is sequential).
  The index of the first keyword found in a user sentence maps to a respective
  reply ring as defined in `setupReplies()´.
 *)
PROCEDURE setupKeywords: ARRAY OF KeyMapEntry;
BEGIN
  (* The empty key string (last entry) is the default clause - will always be found *)
  keywords[39] <- KeyMapEntry{"", 29};
  keywords[0] <- KeyMapEntry{"can you ", 0};
  keywords[1] <- KeyMapEntry{"can i ", 1};
  keywords[2] <- KeyMapEntry{"you are ", 2};
  keywords[3] <- KeyMapEntry{"you\'re ", 2};
  keywords[4] <- KeyMapEntry{"i don't ", 3};
  keywords[5] <- KeyMapEntry{"i feel ", 4};
  keywords[6] <- KeyMapEntry{"why don\'t you ", 5};
  keywords[7] <- KeyMapEntry{"why can\'t i ", 6};
  keywords[8] <- KeyMapEntry{"are you ", 7};
  keywords[9] <- KeyMapEntry{"i can\'t ", 8};
  keywords[10] <- KeyMapEntry{"i am ", 9};
  keywords[11] <- KeyMapEntry{"i\'m ", 9};
  keywords[12] <- KeyMapEntry{"you ", 10};
  keywords[13] <- KeyMapEntry{"i want ", 11};
  keywords[14] <- KeyMapEntry{"what ", 12};
  keywords[15] <- KeyMapEntry{"how ", 12};
  keywords[16] <- KeyMapEntry{"who ", 12};
  keywords[17] <- KeyMapEntry{"where ", 12};
  keywords[18] <- KeyMapEntry{"when ", 12};
  keywords[19] <- KeyMapEntry{"why ", 12};
  keywords[20] <- KeyMapEntry{"name ", 13};
  keywords[21] <- KeyMapEntry{"cause ", 14};
  keywords[22] <- KeyMapEntry{"sorry ", 15};
  keywords[23] <- KeyMapEntry{"dream ", 16};
  keywords[24] <- KeyMapEntry{"hello ", 17};
  keywords[25] <- KeyMapEntry{"hi ", 17};
  keywords[26] <- KeyMapEntry{"maybe ", 18};
  keywords[27] <- KeyMapEntry{" no", 19};
  keywords[28] <- KeyMapEntry{"your ", 20};
  keywords[29] <- KeyMapEntry{"always ", 21};
  keywords[30] <- KeyMapEntry{"think ", 22};
  keywords[31] <- KeyMapEntry{"alike ", 23};
  keywords[32] <- KeyMapEntry{"yes ", 24};
  keywords[33] <- KeyMapEntry{"friend ", 25};
  keywords[34] <- KeyMapEntry{"computer", 26};
  keywords[35] <- KeyMapEntry{"bot ", 26};
  keywords[36] <- KeyMapEntry{"smartphone", 27};
  keywords[37] <- KeyMapEntry{"father ", 28};
  keywords[38] <- KeyMapEntry{"mother ", 28};
  RETURN keywords;
END setupKeywords;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
(* Returns an array of pairs of mutualy substitutable  *)
PROCEDURE setupReflexions: ARRAY OF ARRAY 2 OF ARRAY 100 OF CHAR;
BEGIN
  reflexions[0] <- {" are ", " am "};
  reflexions[1] <- {" were ", " was "};
  reflexions[2] <- {" you ", " I "};
  reflexions[3] <- {" your", " my"};
  reflexions[4] <- {" i\'ve ", " you\'ve "};
  reflexions[5] <- {" i\'m ", " you\'re "};
  reflexions[6] <- {" me ", " you "};
  reflexions[7] <- {" my ", " your "};
  reflexions[8] <- {" i ", " you "};
  reflexions[9] <- {" am ", " are "};
  RETURN reflexions;
END setupReflexions;

(* TODO: Oberon doesn't permit to return arrays - pass the result in a different way! *)
(*
  This routine sets up the reply rings addressed by the key words defined in
  routine `setupKeywords()´ and mapped hitherto by the cross table defined
  in `setupMapping()´
 *)
PROCEDURE setupReplies: ARRAY OF ARRAY OF ARRAY 100 OF CHAR;
BEGIN
  var replies: array of array of String;
  (*
    We start with the highest index for performance reasons
    (is to avoid frequent array resizing)
   *)
  replies[29] <- { "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting."};
  replies[0] <- { "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?"};
  replies[1] <- { "Perhaps you don't want to*?", "Do you want to be able to*?"};
  replies[2] <- { "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?"};
  replies[3] <- { "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?"};
  replies[4] <- { "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?"};
  replies[5] <- { "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?"};
  replies[6] <- { "Do you think you should be able to*?", "Why can't you*?"};
  replies[7] <- { "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?"};
  replies[8] <- { "How do you know you can't*?", "Have you tried?","Perhaps you can now*."};
  replies[9] <- { "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?"};
  replies[10] <- { "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?"};
  replies[11] <- { "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*."};
  replies[12] <- { "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?"};
  replies[13] <- { "Names don't interest me.", "I don't care about names -- please go on."};
  replies[14] <- { "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?"};
  replies[15] <- { "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!"};
  replies[16] <- { "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?"};
  replies[17] <- { "How do you do ...please state your problem."};
  replies[18] <- { "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?"};
  replies[19] <- { "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?"};
  replies[20] <- { "Why are you concerned about my*?", "What about your own*?"};
  replies[21] <- { "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?"};
  replies[22] <- { "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?"};
  replies[23] <- { "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive."};
  replies[24] <- { "Are you sure?", "I see.", "I understand."};
  replies[25] <- { "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you."};
  replies[26] <- { "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?"};
  replies[27] <- { "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?"};
  replies[28] <- { "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?"};
  setupReplies <- replies;
  RETURN setupReplies;
END setupReplies;

(* = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = *)

BEGIN
  In.Open;
  Out.Open;
  (* BEGIN initialization for "History" *)
  (*
    histArray contains the most recent user replies as ring buffer;
    histIndex is the index where the next reply is to be stored (= index of the oldest
    cached user reply).
    Note: The depth of the history is to be specified by initializing a variable of this type,
    e.g. for a history of depth 5:
    myhistory <- History{{"", "", "", "", ""}, 0}
   *)
  type History = record{histArray: array of string; histIndex: int};
  (* END initialization for "History" *)
  (* BEGIN initialization for "KeyMapEntry" *)
  (* Associates a key word in the text with an index in the reply ring array *)
  type KeyMapEntry = record{ keyword: string; index: int };
  (* END initialization for "KeyMapEntry" *)
  
  (* Title information *)
  Out.String("************* ELIZA **************");
  Out.Ln;
  Out.String("* Original design by J. Weizenbaum");
  Out.Ln;
  Out.String("**********************************");
  Out.Ln;
  Out.String("* Adapted for Basic on IBM PC by");
  Out.Ln;
  Out.String("* - Patricia Danielson");
  Out.Ln;
  Out.String("* - Paul Hashfield");
  Out.Ln;
  Out.String("**********************************");
  Out.Ln;
  Out.String("* Adapted for Structorizer by");
  Out.Ln;
  Out.String("* - Kay Gürtzig / FH Erfurt 2016");
  Out.Ln;
  Out.String("* Version: 2.3 (2020-02-24)");
  Out.Ln;
  Out.String("* (Requires at least Structorizer 3.30-03 to run)");
  Out.Ln;
  Out.String("**********************************");
  Out.Ln;
  (*
    Stores the last five inputs of the user in a ring buffer,
    the second component is the rolling (over-)write index.
   *)
  history <- History{{"", "", "", "", ""}, 0};
  const replies <- setupReplies();
  const reflexions <- setupReflexions();
  const byePhrases <- setupGoodByePhrases();
  const keyMap <- setupKeywords();
  offsets[length(keyMap)-1] <- 0;
  isGone <- false;
  (* Starter *)
  Out.String("Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?");
  Out.Ln;
  REPEAT
    In.String(userInput);
    (*
      Converts the input to lowercase, cuts out interpunctation
      and pads the string
     *)
    userInput <- normalizeInput(userInput);
    isGone <- checkGoodBye(userInput, byePhrases);
    IF not isGone THEN
      reply <- "Please don\'t repeat yourself!";
      isRepeated <- checkRepetition(history, userInput);
      IF not isRepeated THEN
        findInfo <- findKeyword(keyMap, userInput);
        keyIndex <- findInfo[0];
        IF keyIndex < 0 THEN
          (* Should never happen... *)
          keyIndex <- length(keyMap)-1;
        END;
        var entry: KeyMapEntry <- keyMap[keyIndex];
        (* Variable part of the reply *)
        varPart <- "";
        IF length(entry.keyword) > 0 THEN
          varPart <- conjugateStrings(userInput, entry.keyword, findInfo[1], reflexions);
        END;
        replyRing <- replies[entry.index];
        reply <- replyRing[offsets[keyIndex]];
        offsets[keyIndex] <- (offsets[keyIndex] + 1) mod length(replyRing);
        posAster <- pos("*", reply);
        IF posAster > 0 THEN
          IF varPart = " " THEN
            reply <- "You will have to elaborate more for me to help you.";
          ELSE
            delete(reply, posAster, 1);
            insert(varPart, reply, posAster);
          END;
        END;
        reply <- adjustSpelling(reply);
      END;
      Out.String(reply);
      Out.Ln;
    END;
  UNTIL isGone;
END ELIZA.
