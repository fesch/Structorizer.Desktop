#!/usr/bin/python3
# -*- coding: utf-8 -*-
# TextDemo 
# generated by Structorizer 3.32-32 

# Copyright (C) 2019-10-10 Kay GÃ¼rtzig 
# License: GPLv3-link 
# GNU General Public License (V 3) 
# https://www.gnu.org/licenses/gpl.html 
# http://www.gnu.de/documents/gpl.de.html 

from enum import Enum
import math
import turtle
turtle.colormode(255)
turtle.mode("logo")

def backward(len, color) :
    if ((color) == 1) :
        col442675e1 = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.backward(len)
        turtle.pencolor(col442675e1)
    elif ((color) == 2) :
        col6166e06f = turtle.pencolor(); turtle.pencolor("#ff8080")
        turtle.backward(len)
        turtle.pencolor(col6166e06f)
    elif ((color) == 3) :
        col49e202ad = turtle.pencolor(); turtle.pencolor("#ffff80")
        turtle.backward(len)
        turtle.pencolor(col49e202ad)
    elif ((color) == 4) :
        col1c72da34 = turtle.pencolor(); turtle.pencolor("#80ff80")
        turtle.backward(len)
        turtle.pencolor(col1c72da34)
    elif ((color) == 5) :
        col6b0c2d26 = turtle.pencolor(); turtle.pencolor("#80ffff")
        turtle.backward(len)
        turtle.pencolor(col6b0c2d26)
    elif ((color) == 6) :
        col3d3fcdb0 = turtle.pencolor(); turtle.pencolor("#0080ff")
        turtle.backward(len)
        turtle.pencolor(col3d3fcdb0)
    elif ((color) == 7) :
        col641147d0 = turtle.pencolor(); turtle.pencolor("#ff80c0")
        turtle.backward(len)
        turtle.pencolor(col641147d0)
    elif ((color) == 8) :
        col6e38921c = turtle.pencolor(); turtle.pencolor("#c0c0c0")
        turtle.backward(len)
        turtle.pencolor(col6e38921c)
    elif ((color) == 9) :
        col64d7f7e0 = turtle.pencolor(); turtle.pencolor("#ff8000")
        turtle.backward(len)
        turtle.pencolor(col64d7f7e0)
    elif ((color) == 10) :
        col27c6e487 = turtle.pencolor(); turtle.pencolor("#8080ff")
        turtle.backward(len)
        turtle.pencolor(col27c6e487)

# Draws a blank for font height h, ignoring the colorNo 
def blank(h, colorNo) :
    width = h/2.0
    turtle.penup()
    turtle.right(90)
    col6385cb26 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.left(90)
    turtle.pencolor(col6385cb26)

def forward(len, color) :
    if ((color) == 1) :
        col38364841 = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.forward(len)
        turtle.pencolor(col38364841)
    elif ((color) == 2) :
        col28c4711c = turtle.pencolor(); turtle.pencolor("#ff8080")
        turtle.forward(len)
        turtle.pencolor(col28c4711c)
    elif ((color) == 3) :
        col59717824 = turtle.pencolor(); turtle.pencolor("#ffff80")
        turtle.forward(len)
        turtle.pencolor(col59717824)
    elif ((color) == 4) :
        col146044d7 = turtle.pencolor(); turtle.pencolor("#80ff80")
        turtle.forward(len)
        turtle.pencolor(col146044d7)
    elif ((color) == 5) :
        col1e9e725a = turtle.pencolor(); turtle.pencolor("#80ffff")
        turtle.forward(len)
        turtle.pencolor(col1e9e725a)
    elif ((color) == 6) :
        col15d9bc04 = turtle.pencolor(); turtle.pencolor("#0080ff")
        turtle.forward(len)
        turtle.pencolor(col15d9bc04)
    elif ((color) == 7) :
        col473b46c3 = turtle.pencolor(); turtle.pencolor("#ff80c0")
        turtle.forward(len)
        turtle.pencolor(col473b46c3)
    elif ((color) == 8) :
        col516be40f = turtle.pencolor(); turtle.pencolor("#c0c0c0")
        turtle.forward(len)
        turtle.pencolor(col516be40f)
    elif ((color) == 9) :
        col3c0a50da = turtle.pencolor(); turtle.pencolor("#ff8000")
        turtle.forward(len)
        turtle.pencolor(col3c0a50da)
    elif ((color) == 10) :
        col646be2c3 = turtle.pencolor(); turtle.pencolor("#8080ff")
        turtle.forward(len)
        turtle.pencolor(col646be2c3)

# Draws digit 1 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit1(h, colorNo) :
    turtle.penup()
    col797badd3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col797badd3)
    turtle.right(45)
    turtle.forward(h/math.sqrt(2), colorNo)
    turtle.left(45)
    turtle.backward(h, colorNo)

# Draws digit 4 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit4(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    # inner angle at top of the triangle 
    angle = math.degrees(math.atan(1 - 2.0*c/h))
    turtle.right(90)
    turtle.penup()
    col62bd765 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c + b)
    turtle.pendown()
    turtle.pencolor(col62bd765)
    turtle.left(90)
    turtle.forward(h, colorNo)
    turtle.left(180 - angle)
    turtle.forward(math.sqrt(h*h/4.0 + sqr(h/2.0 - c)), colorNo)
    turtle.left(90 + angle)
    turtle.forward(h/2.0, colorNo)
    turtle.penup()
    turtle.left(90)
    col23a5fd2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col23a5fd2)

# Draws digit 7 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit7(h, colorNo) :
    angle = 90 + math.degrees(math.atan(0.5))
    turtle.penup()
    coldd3b207 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(coldd3b207)
    turtle.right(90)
    turtle.forward(h/2.0, colorNo)
    turtle.right(angle)
    turtle.forward(h * math.sqrt(1.25), colorNo)
    turtle.left(angle)
    turtle.penup()
    col551bdc27 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col551bdc27)

# Draws letter A in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterA(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(h*h + width*width/4.0)
    rotAngle = math.degrees(math.atan(width/2.0/h))
    turtle.right(rotAngle)
    turtle.forward(hypo/2.0, colorNo)
    turtle.right(90 - rotAngle)
    turtle.forward(width/2.0, colorNo)
    turtle.penup()
    col70b0b186 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width/2.0)
    turtle.pendown()
    turtle.pencolor(col70b0b186)
    turtle.left(90 - rotAngle)
    turtle.forward(hypo/2.0, colorNo)
    turtle.left(2*rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)

# Draws letter E in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterE(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.right(90)
    turtle.penup()
    col7364985f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col7364985f)
    turtle.forward(width, colorNo)
    turtle.left(90)
    turtle.penup()
    col5d20e46 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col5d20e46)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws letter F in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterF(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.right(90)
    turtle.penup()
    col3d36e4cd = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col3d36e4cd)
    turtle.forward(width, colorNo)
    turtle.left(90)
    turtle.penup()
    col6a472554 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.forward(width)
    turtle.pendown()
    turtle.pencolor(col6a472554)
    turtle.left(90)

# Draws letter H in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterH(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col525b461a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col525b461a)
    turtle.forward(h/2.0, colorNo)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.penup()
    col58c1c010 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col58c1c010)
    turtle.forward(h/2.0, colorNo)
    turtle.left(180)

# Draws letter I in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterI(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    turtle.right(90)
    col69b794e2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col69b794e2)
    turtle.forward(b, colorNo)
    turtle.penup()
    col3f200884 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col3f200884)
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col4d339552 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0)
    turtle.pendown()
    turtle.pencolor(col4d339552)
    turtle.forward(b, colorNo)
    turtle.penup()
    colf0f2775 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b/2 + c)
    turtle.left(90)
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(colf0f2775)

# Draws letter K in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterK(h, colorNo) :
    width = h/2.0
    diag = h/math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.penup()
    turtle.right(90)
    col345965f2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(135)
    turtle.pendown()
    turtle.pencolor(col345965f2)
    turtle.forward(diag, colorNo)
    turtle.left(90)
    turtle.forward(diag, colorNo)
    turtle.left(135)

# Draws letter L in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterL(h, colorNo) :
    width = h/2.0
    turtle.forward(h, colorNo)
    turtle.penup()
    col4d49af10 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col4d49af10)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws letter M in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterM(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)/2.0
    rotAngle = math.degrees(math.atan(width/h))
    turtle.forward(h, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-h, colorNo)

# Draws letter N in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterN(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.forward(h, colorNo)
    turtle.left(rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)
    turtle.forward(h, colorNo)
    turtle.penup()
    col35fc6dc4 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col35fc6dc4)

# Draws letter T in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterT(h, colorNo) :
    width = h/2.0
    turtle.penup()
    col226a82c4 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(col226a82c4)
    turtle.right(90)
    turtle.forward(width, colorNo)
    turtle.penup()
    col731f8236 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(width/2.0)
    turtle.pendown()
    turtle.pencolor(col731f8236)
    turtle.right(90)
    turtle.forward(h, colorNo)
    turtle.left(90)
    turtle.penup()
    col255b53dc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width/2.0)
    turtle.pendown()
    turtle.pencolor(col255b53dc)
    turtle.left(90)

# Draws letter V in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterV(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(h*h + width*width/4.0)
    rotAngle = math.degrees(math.atan(width/2.0/h))
    turtle.penup()
    col1b68b9a4 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(col1b68b9a4)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(rotAngle)
    col4f9a3314 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col4f9a3314)

# Draws letter W in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterW(h, colorNo) :
    width = h/2.0
    width_3 = width/3.0
    hypo = math.sqrt(width_3*width_3 + h*h)
    rotAngle = math.degrees(math.atan(width_3/h))
    turtle.penup()
    col51931956 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(col51931956)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(90+rotAngle)
    col2b4a2ec7 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width_3)
    turtle.right(90-rotAngle)
    turtle.pendown()
    turtle.pencolor(col2b4a2ec7)
    turtle.forward(-hypo, colorNo)
    turtle.right(2*rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(rotAngle)
    col564718df = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col564718df)

# Draws letter X in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterX(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.right(rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.left(90+rotAngle)
    colc8e4bb0 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(width)
    turtle.right(90-rotAngle)
    turtle.pendown()
    turtle.pencolor(colc8e4bb0)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)

# Draws letter Y in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterY(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)/2.0
    rotAngle = math.degrees(math.atan(width/h))
    turtle.penup()
    col57175e74 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.left(rotAngle)
    turtle.pendown()
    turtle.pencolor(col57175e74)
    turtle.forward(-hypo, colorNo)
    turtle.right(rotAngle)
    turtle.penup()
    col7bb58ca3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col7bb58ca3)
    turtle.forward(h/2.0, colorNo)
    turtle.right(rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.left(rotAngle)
    turtle.penup()
    colc540f5a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(colc540f5a)

# Draws letter Z in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterZ(h, colorNo) :
    width = h/2.0
    hypo = math.sqrt(width*width + h*h)
    rotAngle = math.degrees(math.atan(width/h))
    turtle.penup()
    col61009542 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col61009542)
    turtle.forward(width, colorNo)
    turtle.left(90-rotAngle)
    turtle.forward(-hypo, colorNo)
    turtle.right(90-rotAngle)
    turtle.forward(width, colorNo)
    turtle.left(90)

# Draws nEdges edges of a regular n-polygon with edge length a 
# counter-clockwise, if ctrclkws is true, or clockwise if ctrclkws is false. 
def polygonPart(a, n, ctrclkws, nEdges, color) :
    rotAngle = 360.0/n
    if (ctrclkws):
        rotAngle = -rotAngle

    for k in range(1, nEdges+1, 1):
        turtle.right(rotAngle)
        turtle.forward(a, color)

# Draws a dummy character (small centered square) with font height h and 
# the colour encoded by colorNo 
def charDummy(h, colorNo) :
    width = h / 2.0
    # Octagon edge length (here: edge lengzh of the square) 
    b = width / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = (width - b) / 2.0
    d = b / math.sqrt(2.0)
    turtle.penup()
    col6328d34a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0-b/2.0)
    turtle.right(90)
    turtle.forward(c)
    turtle.right(90)
    turtle.pendown()
    turtle.pencolor(col6328d34a)
    # Draws the square with edge length b 
    polygonPart(b, 4, true, 4, colorNo)
    turtle.penup()
    turtle.left(90)
    col145eaa29 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + c)
    turtle.left(90)
    turtle.backward(h/2.0-b/2.0)
    turtle.pendown()
    turtle.pencolor(col145eaa29)

# Draws a comma in colour specified by colorNo with font height h 
# from the current turtle position. 
def comma(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    rotAngle = math.degrees(math.atan(0.5))
    hypo = c * math.sqrt(1.25)
    turtle.penup()
    turtle.right(90)
    col2ea6137 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c+b)/2.0 + c)
    turtle.pendown()
    turtle.pencolor(col2ea6137)
    # Counterclockwise draw 3 edges of a square with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 3, colorNo)
    turtle.left(90)
    turtle.forward(c/2.0, colorNo)
    turtle.right(90)
    turtle.forward(c, colorNo)
    turtle.left(180 - rotAngle)
    turtle.forward(hypo, colorNo)
    turtle.penup()
    turtle.right(90 - rotAngle)
    col41ee392b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col41ee392b)

# Draws digit 2 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit2(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    angle = math.degrees(math.atan(h/(h + 2*c)))
    turtle.penup()
    col36f0f1be = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h - c)
    turtle.pendown()
    turtle.pencolor(col36f0f1be)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.right(angle)
    turtle.forward(h/2.0 * math.sqrt(1 + sqr(1+2*c/h)), colorNo)
    turtle.left(90 + angle)
    turtle.forward(h/2.0, colorNo)
    turtle.left(90)

# Draws digit 3 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit3(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col55040f2f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col55040f2f)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    turtle.penup()
    turtle.left(180)
    col64c87930 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b)
    turtle.pendown()
    turtle.pencolor(col64c87930)
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 5, colorNo)
    turtle.penup()
    turtle.left(45)
    col400cff1a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h-c)
    turtle.left(90)
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col400cff1a)

# Draws digit 5 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit5(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col75f9eccc = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col75f9eccc)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    turtle.forward(c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(h/2.0, 4, false, 2, colorNo)
    turtle.penup()
    turtle.left(90)
    col52aa2946 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col52aa2946)

# Draws digit 6 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit6(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col5d47c63f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col5d47c63f)
    turtle.right(180)
    # Counterclockwise draw all 8 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 8, colorNo)
    turtle.penup()
    turtle.left(180)
    col5ea434c8 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b)
    turtle.pendown()
    turtle.pencolor(col5ea434c8)
    turtle.forward(2 * c + b, colorNo)
    # Clockwise draw 3 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 3, colorNo)
    turtle.penup()
    turtle.left(135)
    col3bbc39f8 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h-c)
    turtle.pendown()
    turtle.pencolor(col3bbc39f8)

# Draws digit 8 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit8(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col568bf312 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col568bf312)
    turtle.right(180)
    # Counterclockwise draw all 8 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 8, colorNo)
    turtle.penup()
    turtle.left(180)
    colca263c2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b)
    turtle.right(45)
    turtle.forward(b)
    turtle.left(135)
    turtle.pendown()
    turtle.pencolor(colca263c2)
    # Clockwise draw 7 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 7, colorNo)
    turtle.penup()
    turtle.left(45)
    col589b3632 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.left(90)
    turtle.forward(c)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col589b3632)

# Draws digit 9 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit9(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col534df152 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col534df152)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(2 * c + b, colorNo)
    # Counterclockwise draw 7 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 7, colorNo)
    turtle.penup()
    turtle.left(45)
    col52e677af = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h/2.0 + c)
    turtle.pendown()
    turtle.pencolor(col52e677af)

# Draws an exclamation mark in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def exclMk(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    width = h/2.0
    length1 = h - (b+c)/2.0
    length2 = length1 - 2*c
    hypo = math.sqrt(width*width/16.0 + length2*length2)
    # 360Â°/8 
    rotAngle = 45
    rotAngle2 = math.degrees(math.atan(width/4.0/length2))
    turtle.penup()
    col105fece7 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(length1)
    turtle.right(90)
    turtle.forward(width/2.0)
    turtle.left(90 + rotAngle)
    turtle.pendown()
    turtle.pencolor(col105fece7)
    # Clockwise draw 5 edges of an octagon with edge length b/2 
    # in the colour endcoded by colorNo 
    polygonPart(b/2.0, 8, false, 5, colorNo)
    turtle.right(rotAngle2)
    turtle.forward(hypo, colorNo)
    turtle.left(2*rotAngle2)
    turtle.forward(-hypo, colorNo)
    turtle.penup()
    col3ec300f1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(hypo)
    turtle.right(rotAngle2)
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(c/2.0)
    turtle.pendown()
    turtle.pencolor(col3ec300f1)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    turtle.penup()
    col482cd91f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.backward(c)
    turtle.pendown()
    turtle.pencolor(col482cd91f)

# Draws a full stop in colour specified by colorNo with font height h 
# from the current turtle position. 
def fullSt(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    turtle.right(90)
    col5b0abc94 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c+b)/2.0 + c)
    turtle.pendown()
    turtle.pencolor(col5b0abc94)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, true, 4, colorNo)
    turtle.penup()
    col75c072cb = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.pendown()
    turtle.pencolor(col75c072cb)

# Draws letter Ã in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterAe(h, colorNo) :
    turtle.penup()
    col1f1c7bf6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(col1f1c7bf6)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16.0,1), 4, false, 4, colorNo)
    turtle.right(90)
    turtle.penup()
    col25b485ba = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col25b485ba)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16.0,1), 4, false, 4, colorNo)
    turtle.right(90)
    turtle.penup()
    col2b546384 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.forward(h/2.0)
    turtle.pendown()
    turtle.pencolor(col2b546384)
    turtle.right(90)
    letterA(h, colorNo)

# Draws letter B in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterB(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    col20d3d15a = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + c)
    turtle.pendown()
    turtle.pencolor(col20d3d15a)
    # Clockwise draw 4 edges of an octagon with edge length b 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    col2893de87 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col2893de87)
    turtle.left(90)

# Draws letter C in the colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterC(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer triangle at the octagon corner 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col240237d2 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col240237d2)
    turtle.right(180)
    # Clockwise draws 3 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.penup()
    col25a65b77 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(2*b + 2*c)
    turtle.pendown()
    turtle.pencolor(col25a65b77)
    # Counterclockwise draws 4 edges of an octagon with edge length b 
    # iin the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col2ed0fbae = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.pencolor(col2ed0fbae)
    turtle.forward(b + 2*c, colorNo)
    turtle.pendown()
    turtle.left(90)

# Draws letter D in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterD(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Clockwise draw 2 edges of an octagon with edge length b in the colour 
    # encoded by colorNo 
    polygonPart(b, 8, false, 2, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    turtle.left(180)
    col3c87521 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col3c87521)
    turtle.left(90)

# Draws letter G in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterG(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon. 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col5762806e = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col5762806e)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(90)
    turtle.forward(b/2.0 + c, colorNo)
    turtle.penup()
    col17c386de = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b/2.0 + c)
    turtle.right(90)
    turtle.forward(b + c)
    turtle.pendown()
    turtle.pencolor(col17c386de)
    # Counterclockwise draw 4 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col5af97850 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.pencolor(col5af97850)
    turtle.forward(b + 2*c, colorNo)
    turtle.pendown()
    turtle.left(90)

# Draws letter J in colour encoded by colorNo with font height h 
# from the current turtle position. 
def letterJ(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col780cb77 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col780cb77)
    turtle.right(180)
    # Counterclockwise draw 3 edges of an octagon with edge length b in 
    # the colour encoded by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col691a7f8f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col691a7f8f)

# Draws letter O in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterO(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.penup()
    col17c1bced = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col17c1bced)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col2d9d4f9d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col2d9d4f9d)
    turtle.left(90)

# Draws letter P in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterP(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the corner triangle outside the octagon 
    c = b / math.sqrt(2.0)
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.penup()
    col14ec4505 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b + 2*c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pendown()
    turtle.pencolor(col14ec4505)
    turtle.left(180)

# Draws letter Q in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterQ(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col48524010 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col48524010)
    turtle.right(180)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    # Counterclockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, true, 4, colorNo)
    turtle.forward(b + 2*c, colorNo)
    turtle.penup()
    col4b168fa9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(b + 2*c)
    turtle.pencolor(col4b168fa9)
    turtle.right(rotAngle)
    col1a84f40f = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(b)
    turtle.pendown()
    turtle.pencolor(col1a84f40f)
    turtle.forward(b, colorNo)
    turtle.left(90 + rotAngle)

# Zeichnet den Buchstaben R von der Turtleposition aus 
# mit ZeilenhÃ¶he h 
def letterR(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.forward(h, colorNo)
    turtle.right(90)
    turtle.forward(c+b, colorNo)
    # Clockwise draw 4 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 4, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(90 + rotAngle)
    turtle.forward(math.sqrt(2.0)*(b + 2*c), colorNo)
    turtle.left(90 + rotAngle)

# Draws letter S in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterS(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Side length of the (outer) corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col3d299e3 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col3d299e3)
    turtle.right(180)
    # Counterclockwise draw 6 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, true, 6, colorNo)
    # Clockwise draw 5 edges of an octagon with edge length b 
    # in the colour encoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    turtle.right(rotAngle)
    turtle.penup()
    col55a561cf = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(2*b + 3*c)
    turtle.pendown()
    turtle.pencolor(col55a561cf)
    turtle.left(180)

# Draws letter U in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterU(h, colorNo) :
    # edge length of a regular octagon 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col6646153 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.pendown()
    turtle.pencolor(col6646153)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col21507a04 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h-c)
    turtle.pendown()
    turtle.pencolor(col21507a04)
    turtle.right(180)
    # Counterclockwise draw 3 edges of an octagoin with edge length b in colour specified by colorNo 
    polygonPart(b, 8, true, 3, colorNo)
    turtle.left(rotAngle)
    turtle.forward(h - c, colorNo)
    turtle.penup()
    col143640d5 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(h)
    turtle.pendown()
    turtle.pencolor(col143640d5)

# Draws a question mark in colour specified by colorNo with font height h 
# from the current turtle position. 
def qstnMk(h, colorNo) :
    # Octagon edge length 
    b = h * 0.5 / (math.sqrt(2.0) + 1)
    # Cathetus of the outer corner triangle of the octagon 
    c = b / math.sqrt(2.0)
    # 360Â°/8 
    rotAngle = 45
    turtle.penup()
    col436a4e4b = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h-c)
    turtle.pendown()
    turtle.pencolor(col436a4e4b)
    # Counterclockwise draw 5 edges of an octagon with edge length b 
    # in the colour endcoded by colorNo 
    polygonPart(b, 8, false, 5, colorNo)
    turtle.forward(c, colorNo)
    turtle.left(rotAngle)
    turtle.forward(b/2.0, colorNo)
    turtle.penup()
    colf2f2cc1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(c)
    turtle.left(90)
    turtle.forward(c/2.0)
    turtle.pendown()
    turtle.pencolor(colf2f2cc1)
    # Counterclockwise draw all 4 edges of a squarfe with edge length c 
    # in the colour endcoded by colorNo 
    polygonPart(c, 4, false, 4, colorNo)
    turtle.penup()
    col3a079870 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward((c + b)/2.0)
    turtle.left(90)
    turtle.backward(c)
    turtle.pendown()
    turtle.pencolor(col3a079870)

# Draws digit 0 in the colour specified by colorNo with font height h 
# from the current turtle position. 
def digit0(h, colorNo) :
    turtle.penup()
    col2aa5fe93 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/4.0)
    turtle.pendown()
    turtle.pencolor(col2aa5fe93)
    turtle.right(45)
    len = h/math.sqrt(2)
    turtle.forward(len, colorNo)
    turtle.penup()
    col5c1a8622 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.backward(len)
    turtle.left(45)
    turtle.backward(h/4.0)
    turtle.pencolor(col5c1a8622)
    letterO(h, colorNo)

# Draws letter Ã in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterOe(h, colorNo) :
    turtle.penup()
    col5ad851c9 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(col5ad851c9)
    turtle.right(90)
    # Clockwise draw all 4 edges of a square with edge length h/8 
    # in the colour endcoded by colorNo 
    polygonPart(h/8, 4, false, 4, colorNo)
    turtle.penup()
    col6156496 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2)
    turtle.pendown()
    turtle.pencolor(col6156496)
    turtle.right(90)
    # Clockwise draw all 4 edges of a square with edge length h/8 
    # in the colour endcoded by colorNo 
    polygonPart(h/8, 4, false, 4, colorNo)
    turtle.penup()
    col3c153a1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.pendown()
    turtle.pencolor(col3c153a1)
    turtle.right(90)
    turtle.penup()
    colb62fe6d = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2)
    turtle.pendown()
    turtle.pencolor(colb62fe6d)
    turtle.right(90)
    letterO(h, colorNo)

# Draws letter Ã in colour specified by colorNo with font height h 
# from the current turtle position. 
def letterUe(h, colorNo) :
    turtle.penup()
    col13acb0d1 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.forward(max(h/8,1))
    turtle.pendown()
    turtle.pencolor(col13acb0d1)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16,1), 4, false, 4, colorNo)
    turtle.penup()
    col3e3047e6 = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h/2 - 2 * max(h/8,1) - max(h/16, 1))
    turtle.pendown()
    turtle.pencolor(col3e3047e6)
    # Clockwise draw all 4 edges of a square with edge length h/16 
    # in the colour endcoded by colorNo 
    polygonPart(max(h/16,1), 4, false, 4, colorNo)
    turtle.penup()
    col37e547da = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(max(h/8,1))
    turtle.pendown()
    turtle.pencolor(col37e547da)
    turtle.right(90)
    turtle.penup()
    col2b6856dd = turtle.pencolor(); turtle.pencolor("#000000")
    turtle.forward(h)
    turtle.right(90)
    turtle.forward(h/2)
    turtle.pendown()
    turtle.pencolor(col2b6856dd)
    turtle.right(90)
    letterU(h, colorNo)

# Has the turtle draw the given string 'textÂ´ with font height 'hÂ´ (in 
# pixels) and the colour coded by integer 'cÂ´ from the current Turtle 
# position to the Turtle canvas. If the turtle looks North then 
# the text will be written rightwards. In the event, the turtle will be 
# placed behind the text in original orientation (such that the next text 
# would be written like a continuation. Colour codes: 
# 1 = black 
# 2 = red 
# 3 = yellow 
# 4 = green 
# 5 = cyan 
# 6 = blue 
# 7 = pink 
# 8 = grey 
# 9 = orange 
# 10 = violet 
# All letters (ASCII) will be converted to uppercase, 
# the set of representable special characters is: decimal digits, 
# '.', ',', '!', '?', 'Ã', 'Ã', 'Ã'. Other characters will be shown as a small 
# centred square (dummy character). 
def drawText(text, h, c) :
    gap = h/10.0
    for k in range(1, length(text)+1, 1):
        letter = uppercase(copy(text, k, 1))
        if ((letter) == "A") :
            letterA(h,c)
        elif ((letter) == "B") :
            letterB(h,c)
        elif ((letter) == "C") :
            letterC(h,c)
        elif ((letter) == "D") :
            letterD(h,c)
        elif ((letter) == "E") :
            letterE(h,c)
        elif ((letter) == "F") :
            letterF(h,c)
        elif ((letter) == "G") :
            letterG(h,c)
        elif ((letter) == "H") :
            letterH(h,c)
        elif ((letter) == "I") :
            letterI(h,c)
        elif ((letter) == "J") :
            letterJ(h,c)
        elif ((letter) == "K") :
            letterK(h,c)
        elif ((letter) == "L") :
            letterL(h,c)
        elif ((letter) == "M") :
            letterM(h,c)
        elif ((letter) == "N") :
            letterN(h,c)
        elif ((letter) == "O") :
            letterO(h,c)
        elif ((letter) == "P") :
            letterP(h,c)
        elif ((letter) == "Q") :
            letterQ(h,c)
        elif ((letter) == "R") :
            letterR(h,c)
        elif ((letter) == "S") :
            letterS(h,c)
        elif ((letter) == "T") :
            letterT(h,c)
        elif ((letter) == "U") :
            letterU(h,c)
        elif ((letter) == "V") :
            letterV(h,c)
        elif ((letter) == "W") :
            letterW(h,c)
        elif ((letter) == "X") :
            letterX(h,c)
        elif ((letter) == "Y") :
            letterY(h,c)
        elif ((letter) == "Z") :
            letterZ(h,c)
        elif ((letter) == " ") :
            blank(h,c)
        elif ((letter) == "!") :
            exclMk(h,c)
        elif ((letter) == "?") :
            qstnMk(h,c)
        elif ((letter) == ".") :
            fullSt(h,c)
        elif ((letter) == ",") :
            comma(h,c)
        elif ((letter) == "Ã") :
            letterAe(h,c)
        elif ((letter) == "Ã") :
            letterOe(h,c)
        elif ((letter) == "Ã") :
            letterUe(h,c)
        elif ((letter) == "0") :
            digit0(h,c)
        elif ((letter) == "1") :
            digit1(h,c)
        elif ((letter) == "2") :
            digit2(h,c)
        elif ((letter) == "3") :
            digit3(h,c)
        elif ((letter) == "4") :
            digit4(h,c)
        elif ((letter) == "5") :
            digit5(h,c)
        elif ((letter) == "6") :
            digit6(h,c)
        elif ((letter) == "7") :
            digit7(h,c)
        elif ((letter) == "8") :
            digit8(h,c)
        elif ((letter) == "9") :
            digit9(h,c)
        else:
            charDummy(h,c)

        turtle.right(90)
        turtle.penup()
        col6ab7a896 = turtle.pencolor(); turtle.pencolor("#000000")
        turtle.forward(gap)
        turtle.pendown()
        turtle.left(90)
        turtle.pencolor(col6ab7a896)

# = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

# Demo program for routine drawText() 
# Asks the user to enter a text, a wanted text height and colour, 
# and then draws this string onto the turtle screen. Places every 
# entered text to a new line. 
print("This is a demo program for text writing with Turleizer.", sep='')
turtle.showturtle()
turtle.pendown()
y = 0
while True:
    text = input("Enter some text (empty string to exit)")
    # Make sure the content is interpreted as string 
    text = "" + text
    if (text != ""):
        while True:
            height = input("Height of the text (pixels)")
            if height >= 5:
                break

        while True:
            colour = input("Colour (1=black, 2=red, 3=yellow, 4=green, 5=cyan, 6=blue, 7=pink, 8=gray, 9=orange, 10=violet)")
            if colour >= 1  and  colour <= 10:
                break

        y = y + height + 2
        turtle.goto(0, y - 2)
        drawText(text, height, colour)

    if text == "":
        break

turtle.goto(0, y + 15)
drawText("Thank you, bye.", 10, 4)
turtle.hideturtle()

# turtle.bye()	# TODO: re-enable this if you want to close the turtle window. 
