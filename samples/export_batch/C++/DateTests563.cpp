// Generated by Structorizer 3.32-26 

// Copyright (C) 2017-09-18 Kay GÃ¼rtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

#include <string>
using std::string;

struct Date {
	int	year;
	short	month;
	short	day;
};
Date today;

// function initialize_CommonTypes423() 

// Automatically created initialization procedure for CommonTypes423 
// TODO: Revise the return type and declare the parameters. 
void initialize_CommonTypes423()
{
	static bool initDone_CommonTypes423 = false;
	if (! initDone_CommonTypes423) {
		initDone_CommonTypes423 = true;
	}
}

// function isLeapYear(year): boolean 

// Detects whether the given year is a leap year in the Gregorian calendar 
// (extrapolated backwards beyonds its inauguration) 
// TODO: Revise the return type and declare the parameters. 
bool isLeapYear(??? year)
{
	// TODO: Check and accomplish variable declarations: 
	bool isLeapYear;

	// Most years aren't leap years... 
	isLeapYear = false;
	if ((year % 4 == 0) && (year % 100 != 0)) {
		// This is a standard leap year 
		isLeapYear = true;
	}
	else if (year % 400 == 0) {
		// One of the rare leap years 
		// occurring every 400 years 
		isLeapYear = true;
	}

	return isLeapYear;
}

// function int daysInMonth423(Date aDate) 

// Computes the number of days the given month (1..12) 
// has in the the given year 
// TODO: Revise the return type and declare the parameters. 
int daysInMonth423(Date aDate)
{
	// TODO: Check and accomplish variable declarations: 
	bool isLeap;
	int days;

	initialize_CommonTypes423();
	
	// select the case where illegal values are also considered 
	switch (aDate.month) {
	case 1:
	case 3:
	case 5:
	case 7:
	case 8:
	case 10:
	case 12:
		days = 31;
		break;
	case 4:
	case 6:
	case 9:
	case 11:
		days = 30;
		break;
	case 2:
		// Default value for February 
		days = 28;
		// To make the call work it has to be done in 
		// a separate element (cannot be performed 
		// as part of the condition of an Alternative) 
		isLeap = isLeapYear(aDate.year);
		if (isLeap) {
			days = 29;
		}
		break;
	default:
		// This is the return value for illegal months. 
		// It is easy to check 
		days = 0;
	}
	return days;
}
// = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

// program DateTests563 

// Several declaration and initialisation variants for test of Analyser, Executor, and Generators 
int main(void)
{
	// TODO: Check and accomplish variable declarations: 
	int values[2];
	int nDays;

	initialize_CommonTypes423();
	
	Date someDay = {2017, 2, 24};
	nDays = daysInMonth423(someDay);
	today.year = 2018;
	today.month = 7;
	today.day = 20;
	struct Person {
		string	name;
		Date	birth;
		int	test[3];
	};
	Person me = {"roger", {1985, 3, 6}, {0, 8, 15}};
	double declArray[50] = {9.0, 7.5, -6.4, 1.7, 0.0};
	double explArray[3] = {7.1, 0.5, -1.5};
	double doof[3] = {0.4};
	double dull[2] = {-12.7, 96.03};
	values[0] = 47;
	values[1] = 11;

	return 0;
}
