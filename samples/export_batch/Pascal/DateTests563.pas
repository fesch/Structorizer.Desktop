{ Several declaration and initialisation variants for test of Analyser, Executor, and Generators }
program DateTests563;
{ Generated by Structorizer 3.32-32 }

{ Copyright (C) 2017-09-18 Kay GÃ¼rtzig }
{ License: GPLv3-link }
{
  GNU General Public License (V 3)
  https://www.gnu.org/licenses/gpl.html
  http://www.gnu.de/documents/gpl.de.html
}

type
  Date = RECORD
      year:	Longint;
      month:	Smallint;
      day:	Smallint;
    END;

  Person = RECORD
      name:	string;
      birth:	Date;
      test:	array [0..2] of Longint;
    END;

var
  values: array [0..1] of Longint;
  today: Date;
  someDay: Date;
  nDays: Longint;
  me: Person;
  explArray: array [0..2] of Double;
  dull: array [0..1] of Double;
  doof: array [0..2] of Double;
  declArray: array [0..49] of Double;

{
  Detects whether the given year is a leap year in the Gregorian calendar
  (extrapolated backwards beyonds its inauguration)
}
function isLeapYear(year: ???): boolean;

begin
  { Most years aren't leap years... }
  isLeapYear := false;
  if (year mod 4 = 0) and (year mod 100 <> 0) then
  begin
    { This is a standard leap year }
    isLeapYear := true;
  end;
  else if year mod 400 = 0 then
  begin
    {
      One of the rare leap years
      occurring every 400 years
    }
    isLeapYear := true;
  end;

end;

{
  Computes the number of days the given month (1..12)
  has in the the given year
}
function daysInMonth423(aDate: Date): Longint;

var
  isLeap: boolean;
  days: Longint;

begin
  { select the case where illegal values are also considered }
  case aDate.month of
    1, 3, 5, 7, 8, 10, 12:
      begin
        days := 31;
      end;
    4, 6, 9, 11:
      begin
        days := 30;
      end;
    2:
      begin
        { Default value for February }
        days := 28;
        {
          To make the call work it has to be done in
          a separate element (cannot be performed
          as part of the condition of an Alternative)
        }
        isLeap := isLeapYear(aDate.year);
        if isLeap then
        begin
          days := 29;
        end;
      end;
    else
      {
        This is the return value for illegal months.
        It is easy to check
      }
      days := 0;
  end;
  daysInMonth423 := days;

end;

{ = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = }


begin
  someDay.day := 24;
  someDay.month := 2;
  someDay.year := 2017;
  nDays := daysInMonth423(someDay);
  today.year := 2018;
  today.month := 7;
  today.day := 20;
  me.name := 'roger';
  me.birth.year := 1985;
  me.birth.month := 3;
  me.birth.day := 6;
  { Hint: Automatically decomposed array initialization }
  me.test[0] := 0;
  me.test[1] := 8;
  me.test[2] := 15;
  { Hint: Automatically decomposed array initialization }
  declArray[0] := 9.0;
  declArray[1] := 7.5;
  declArray[2] := -6.4;
  declArray[3] := 1.7;
  declArray[4] := 0.0;
  { Hint: Automatically decomposed array initialization }
  explArray[0] := 7.1;
  explArray[1] := 0.5;
  explArray[2] := -1.5;
  { Hint: Automatically decomposed array initialization }
  doof[0] := 0.4;
  { Hint: Automatically decomposed array initialization }
  dull[0] := -12.7;
  dull[1] := 96.03;
  { Hint: Automatically decomposed array initialization }
  values[0] := 47;
  values[1] := 11;
end.
