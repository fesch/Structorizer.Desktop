MODULE DateTests563;
(* Generated by Structorizer 3.32-26 *)

(* Copyright (C) 2017-09-18 Kay GÃ¼rtzig *)
(* License: GPLv3-link *)
(*
  GNU General Public License (V 3)
  https://www.gnu.org/licenses/gpl.html
  http://www.gnu.de/documents/gpl.de.html
 *)

TYPE
  Date* = RECORD
      year:	INTEGER;
      month:	SHORTINT;
      day:	SHORTINT
    END;

  Person = RECORD
      name:	ARRAY 128 OF CHAR;
      birth:	Date;
      test:	ARRAY 3 OF INTEGER
    END;

VAR
  (* TODO: check and accomplish variable declarations *)
  values: ARRAY 2 OF INTEGER;
  today: Date;
  someDay: Date;
  nDays: INTEGER;
  me: Person;
  explArray: ARRAY 3 OF LONGREAL;
  doof: ARRAY 3 OF LONGREAL;
  declArray: ARRAY 50 OF LONGREAL;

(*
  Detects whether the given year is a leap year in the Gregorian calendar
  (extrapolated backwards beyonds its inauguration)
 *)
PROCEDURE isLeapYear(year: ???): BOOLEAN;
VAR
  (* TODO: check and accomplish variable declarations *)
  isLeapYear: BOOLEAN;
BEGIN
  (* Most years aren't leap years... *)
  isLeapYear := false;
  IF (year MOD 4 = 0) & (year MOD 100 # 0) THEN
    (* This is a standard leap year *)
    isLeapYear := true;
  ELSIF year MOD 400 = 0 THEN
    (*
      One of the rare leap years
      occurring every 400 years
     *)
    isLeapYear := true;
  END;
  RETURN isLeapYear;
END isLeapYear;

(*
  Computes the number of days the given month (1..12)
  has in the the given year
 *)
PROCEDURE daysInMonth423(aDate: Date): INTEGER;
VAR
  (* TODO: check and accomplish variable declarations *)
  isLeap: BOOLEAN;
  days: INTEGER;
BEGIN
  (* select the case where illegal values are also considered *)
  CASE aDate.month OF
    1, 3, 5, 7, 8, 10, 12:
    days := 31;
  |
    4, 6, 9, 11:
    days := 30;
  |
    2:
    (* Default value for February *)
    days := 28;
    (*
      To make the call work it has to be done in
      a separate element (cannot be performed
      as part of the condition of an Alternative)
     *)
    isLeap := isLeapYear(aDate.year);
    IF isLeap THEN
      days := 29;
    END;
  |
    ELSE
      (*
        This is the return value for illegal months.
        It is easy to check
       *)
      days := 0;
  END;
  RETURN days;
END daysInMonth423;

(* = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = *)

BEGIN
  (* BEGIN initialization for "CommonTypes423" *)
  (* END initialization for "CommonTypes423" *)
  
  someDay.day := 24;
  someDay.month := 2;
  someDay.year := 2017;
  nDays := daysInMonth423(someDay);
  today.year := 2018;
  today.month := 7;
  today.day := 20;
  me.name := "roger";
  me.birth.year := 1985;
  me.birth.month := 3;
  me.birth.day := 6;
  (* Hint: Automatically decomposed array initialization *)
  me.test[0] := 0;
  me.test[1] := 8;
  me.test[2] := 15;
  (* Hint: Automatically decomposed array initialization *)
  declArray[0] := 9.0;
  declArray[1] := 7.5;
  declArray[2] := -6.4;
  declArray[3] := 1.7;
  declArray[4] := 0.0;
  (* Hint: Automatically decomposed array initialization *)
  explArray[0] := 7.1;
  explArray[1] := 0.5;
  explArray[2] := -1.5;
  (* Hint: Automatically decomposed array initialization *)
  doof[0] := 0.4;
  (* Hint: Automatically decomposed array initialization *)
  values[0] := 47;
  values[1] := 11;
END DateTests563.
