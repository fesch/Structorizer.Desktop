(* Test for indirect and concurrent includes *)
MODULE TestMain;
(* Generated by Structorizer 3.32-25 *)
IMPORT Out;

(* Copyright (C) 2020-04-13 Kay Gürtzig *)
(* License: GPLv3-link *)
(*
  GNU General Public License (V 3)
  https://www.gnu.org/licenses/gpl.html
  http://www.gnu.de/documents/gpl.de.html
 *)

VAR
  (* TODO: check and accomplish variable declarations *)
  a2*: ARRAY 128 OF CHAR;
  b2*: LONGREAL;
  c2: INTEGER;
  c1: ???;	(* FIXME! *)
  b1: ARRAY 128 OF CHAR;
  a2: ARRAY 128 OF CHAR;
  a1: INTEGER;

PROCEDURE testSub(c1, param2: REAL; VAR b1: ARRAY 128 OF CHAR): INTEGER;
VAR
  (* TODO: check and accomplish variable declarations *)
  d2: ARRAY 128 OF CHAR;
  d1: INTEGER;
BEGIN
  d1 := a1;
  d2 := a2;
  a1 := 15;
  RETURN length(a2 + b1) + floor(c1) * ceil(param2);
END testSub;

(* = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = *)

BEGIN
  Out.Open;
  (* BEGIN initialization for "IncludeA" *)
  a2 := "doof";
  (* END initialization for "IncludeA" *)
  (* BEGIN initialization for "IncludeB" *)
  b2 := 3.9;
  (* END initialization for "IncludeB" *)
  
  a1 := 7;
  b1 := a2 + " oder blöd";
  c1 := a1 * b2;
  c2 := testSub(c1, a1 + b2, b1);
  Out.Int(a1, 10);
  Out.String(" ");
  Out.String(a2);
  Out.String(" ");
  Out.String(b1);
  Out.String(" ");
  Out.Real(b2, 10);
  Out.Ln;
END TestMain.
