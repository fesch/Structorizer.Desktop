Rem Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
Rem "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
Rem Computational Linguistis 1(1966)9, pp. 36-45 
Rem Revision history: 
Rem 2016-10-06 Initial version 
Rem 2017-03-29 Two diagrams updated (comments translated to English) 
Rem 2017-03-29 More keywords and replies added 
Rem 2019-03-14 Replies and mapping reorganised for easier maintenance 
Rem 2019-03-15 key map joined from keyword array and index map 
Rem 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
Rem 2019-11-28 New global type "History" (to ensure a homogenous array) 
Rem Generated by Structorizer 3.32-26 

Rem Copyright (C) 2018-05-14 Kay Gürtzig 
Rem License: GPLv3-link 
Rem GNU General Public License (V 3) 
Rem https://www.gnu.org/licenses/gpl.html 
Rem http://www.gnu.de/documents/gpl.de.html 

Rem  
Rem program ELIZA
Rem TODO: Check and accomplish your variable declarations here: 
Rem  

Rem histArray contains the most recent user replies as ring buffer; 
Rem histIndex is the index where the next reply is to be stored (= index of the oldest 
Rem cached user reply). 
Rem Note: The depth of the history is to be specified by initializing a variable of this type, 
Rem e.g. for a history of depth 5: 
Rem myhistory <- History{{"", "", "", "", ""}, 0} 
Structure History
  Dim histArray As @string
  Dim histIndex As Integer
End Structure
Rem Associates a key word in the text with an index in the reply ring array 
Structure KeyMapEntry
  Dim keyword As String
  Dim index As Integer
End Structure

Rem Title information 
PRINT "************* ELIZA **************"
PRINT "* Original design by J. Weizenbaum"
PRINT "**********************************"
PRINT "* Adapted for Basic on IBM PC by"
PRINT "* - Patricia Danielson"
PRINT "* - Paul Hashfield"
PRINT "**********************************"
PRINT "* Adapted for Structorizer by"
PRINT "* - Kay Gürtzig / FH Erfurt 2016"
PRINT "* Version: 2.3 (2020-02-24)"
PRINT "* (Requires at least Structorizer 3.30-03 to run)"
PRINT "**********************************"
Rem Stores the last five inputs of the user in a ring buffer, 
Rem the second component is the rolling (over-)write index. 
Dim history As History
Let history.histArray = Array("", "", "", "", "")
Let history.histIndex = 0
Const replies = setupReplies()
Const reflexions = setupReflexions()
Const byePhrases = setupGoodByePhrases()
Const keyMap = setupKeywords()
Dim offsets() As Integer
offsets(length(keyMap)-1) = 0
Dim isGone As boolean
isGone = false
Rem Starter 
PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
Do
  INPUT userInput
  Rem Converts the input to lowercase, cuts out interpunctation 
  Rem and pads the string 
  userInput = normalizeInput(userInput)
  isGone = checkGoodBye(userInput, byePhrases)
  If NOT isGone Then
    Dim reply As String
    reply = "Please don\'t repeat yourself!"
    isRepeated = checkRepetition(history, userInput)
    If NOT isRepeated Then
      findInfo = findKeyword(keyMap, userInput)
      Dim keyIndex As Integer
      keyIndex = findInfo(0)
      If keyIndex < 0 Then
        Rem Should never happen... 
        keyIndex = length(keyMap)-1
      End If
      Dim entry As KeyMapEntry
      var entry: KeyMapEntry = keyMap(keyIndex)
      Rem Variable part of the reply 
      Dim varPart As String
      varPart = ""
      If length(entry.keyword) > 0 Then
        varPart = conjugateStrings(userInput, entry.keyword, findInfo(1), reflexions)
      End If
      Dim replyRing() As String
      replyRing = replies(entry.index)
      reply = replyRing(offsets(keyIndex))
      offsets(keyIndex) = (offsets(keyIndex) + 1) % length(replyRing)
      Dim posAster As Integer
      posAster = pos("*", reply)
      If posAster > 0 Then
        If varPart = " " Then
          reply = "You will have to elaborate more for me to help you."
        Else
          delete(reply, posAster, 1)
          insert(varPart, reply, posAster)
        End If
      End If
      reply = adjustSpelling(reply)
    End If
    PRINT reply
  End If
Loop Until isGone
End
Rem  
Rem Cares for correct letter case among others 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function adjustSpelling(sentence As String) As String
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Dim result As String
  result = sentence
  Dim position As Integer
  position = 1
  Do While (position <= length(sentence)) AND (copy(sentence, position, 1) = " ")
    position = position + 1
  Loop
  If position <= length(sentence) Then
    Dim start As String
    start = copy(sentence, 1, position)
    delete(result, 1, position)
    insert(uppercase(start), result, 1)
  End If
  Dim array1fc2b765() As String = {" i ", " i\'"}
  For Each word In array1fc2b765
    position = pos(word, result)
    Do While position > 0
      delete(result, position+1, 1)
      insert("I", result, position+1)
      position = pos(word, result)
    Loop
  Next word
  Return result
End Function
Rem  
Rem Checks whether the given text contains some kind of 
Rem good-bye phrase inducing the end of the conversation 
Rem and if so writes a correspding good-bye message and 
Rem returns true, otherwise false 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function checkGoodBye(text As String, phrases As String(50,0 To 1)) As boolean
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  For Each pair In phrases
    If pos(pair(0), text) > 0 Then
      PRINT pair(1)
      Return true
    End If
  Next pair
  return false
End Function
Rem  
Rem Checks whether newInput has occurred among the recently cached 
Rem input strings in the histArray component of history and updates the history. 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function checkRepetition(history As History, newInput As String) As boolean
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Dim hasOccurred As boolean
  hasOccurred = false
  If length(newInput) > 4 Then
    Dim histDepth As Integer
    histDepth = length(history.histArray)
    For i = 0 To histDepth-1
      If newInput = history.histArray(i) Then
        hasOccurred = true
      End If
    Next i
    Dim history.histArray As ???
    history.histArray(history.histIndex) = newInput
    Dim history.histIndex As ???
    history.histIndex = (history.histIndex + 1) % (histDepth)
  End If
  return hasOccurred
End Function
Rem  
Rem TODO: Check (and specify if needed) the argument and result types! 
Function conjugateStrings(sentence As String, key As String, keyPos As integer, flexions As String(50,0 To 1)) As String
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Dim result As String
  result = " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
  For Each pair In flexions
    Dim left As String
    left = ""
    Dim right As String
    right = result
    Dim position As Integer
    position = pos(pair(0), right)
    Do While position > 0
      left = left + copy(right, 1, position-1) + pair(1)
      right = copy(right, position + length(pair(0)), length(right))
      position = pos(pair(0), right)
    Loop
    result = left + right
  Next pair
  Rem Eliminate multiple spaces 
  position = pos("  ", result)
  Do While position > 0
    result = copy(result, 1, position-1) + copy(result, position+1, length(result))
    position = pos("  ", result)
  Loop
  Return result
End Function
Rem  
Rem Looks for the occurrence of the first of the strings 
Rem contained in keywords within the given sentence (in 
Rem array order). 
Rem Returns an array of 
Rem 0: the index of the first identified keyword (if any, otherwise -1), 
Rem 1: the position inside sentence (0 if not found) 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function findKeyword(Const keyMap As KeyMapEntry(50), sentence As String) As integer(0 To 1)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Rem Contains the index of the keyword and its position in sentence 
  Dim result(1) As Integer
  Let result = Array(-1, 0)
  Dim i As Integer
  i = 0
  Do While (result(0) < 0) AND (i < length(keyMap))
    Dim entry As KeyMapEntry
    var entry: KeyMapEntry = keyMap(i)
    Dim position As Integer
    position = pos(entry.keyword, sentence)
    If position > 0 Then
      result(0) = i
      result(1) = position
    End If
    i = i+1
  Loop
  Return result
End Function
Rem  
Rem Converts the sentence to lowercase, eliminates all 
Rem interpunction (i.e. ',', '.', ';'), and pads the 
Rem sentence among blanks 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function normalizeInput(sentence As String) As String
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Dim sentence As String
  sentence = lowercase(sentence)
  Rem TODO: Specify an appropriate element type for the array! 
  Dim array6ec8211c() As FIXME_6ec8211c = {'.', ',', ';', '!', '?'}
  For Each symbol In array6ec8211c
    Dim position As Integer
    position = pos(symbol, sentence)
    Do While position > 0
      sentence = copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
      position = pos(symbol, sentence)
    Loop
  Next symbol
  Dim result As String
  result = " " + sentence + " "
  Return result
End Function
Rem  
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupGoodByePhrases() As String(50,0 To 1)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Dim phrases(,1) As String
  Let phrases(0) = Array(" shut", "Okay. If you feel that way I\'ll shut up. ... Your choice.")
  Let phrases(1) = Array("bye", "Well, let\'s end our talk for now. See you later. Bye.")
  return phrases
End Function
Rem  
Rem The lower the index the higher the rank of the keyword (search is sequential). 
Rem The index of the first keyword found in a user sentence maps to a respective 
Rem reply ring as defined in `setupReplies()´. 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupKeywords() As KeyMapEntry(50)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Rem The empty key string (last entry) is the default clause - will always be found 
  Dim keywords() As KeyMapEntry
  Let keywords(39).keyword = ""
  Let keywords(39).index = 29
  Let keywords(0).keyword = "can you "
  Let keywords(0).index = 0
  Let keywords(1).keyword = "can i "
  Let keywords(1).index = 1
  Let keywords(2).keyword = "you are "
  Let keywords(2).index = 2
  Let keywords(3).keyword = "you\'re "
  Let keywords(3).index = 2
  Let keywords(4).keyword = "i don't "
  Let keywords(4).index = 3
  Let keywords(5).keyword = "i feel "
  Let keywords(5).index = 4
  Let keywords(6).keyword = "why don\'t you "
  Let keywords(6).index = 5
  Let keywords(7).keyword = "why can\'t i "
  Let keywords(7).index = 6
  Let keywords(8).keyword = "are you "
  Let keywords(8).index = 7
  Let keywords(9).keyword = "i can\'t "
  Let keywords(9).index = 8
  Let keywords(10).keyword = "i am "
  Let keywords(10).index = 9
  Let keywords(11).keyword = "i\'m "
  Let keywords(11).index = 9
  Let keywords(12).keyword = "you "
  Let keywords(12).index = 10
  Let keywords(13).keyword = "i want "
  Let keywords(13).index = 11
  Let keywords(14).keyword = "what "
  Let keywords(14).index = 12
  Let keywords(15).keyword = "how "
  Let keywords(15).index = 12
  Let keywords(16).keyword = "who "
  Let keywords(16).index = 12
  Let keywords(17).keyword = "where "
  Let keywords(17).index = 12
  Let keywords(18).keyword = "when "
  Let keywords(18).index = 12
  Let keywords(19).keyword = "why "
  Let keywords(19).index = 12
  Let keywords(20).keyword = "name "
  Let keywords(20).index = 13
  Let keywords(21).keyword = "cause "
  Let keywords(21).index = 14
  Let keywords(22).keyword = "sorry "
  Let keywords(22).index = 15
  Let keywords(23).keyword = "dream "
  Let keywords(23).index = 16
  Let keywords(24).keyword = "hello "
  Let keywords(24).index = 17
  Let keywords(25).keyword = "hi "
  Let keywords(25).index = 17
  Let keywords(26).keyword = "maybe "
  Let keywords(26).index = 18
  Let keywords(27).keyword = " no"
  Let keywords(27).index = 19
  Let keywords(28).keyword = "your "
  Let keywords(28).index = 20
  Let keywords(29).keyword = "always "
  Let keywords(29).index = 21
  Let keywords(30).keyword = "think "
  Let keywords(30).index = 22
  Let keywords(31).keyword = "alike "
  Let keywords(31).index = 23
  Let keywords(32).keyword = "yes "
  Let keywords(32).index = 24
  Let keywords(33).keyword = "friend "
  Let keywords(33).index = 25
  Let keywords(34).keyword = "computer"
  Let keywords(34).index = 26
  Let keywords(35).keyword = "bot "
  Let keywords(35).index = 26
  Let keywords(36).keyword = "smartphone"
  Let keywords(36).index = 27
  Let keywords(37).keyword = "father "
  Let keywords(37).index = 28
  Let keywords(38).keyword = "mother "
  Let keywords(38).index = 28
  return keywords
End Function
Rem  
Rem Returns an array of pairs of mutualy substitutable  
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupReflexions() As String(50,0 To 1)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Dim reflexions(,1) As String
  Let reflexions(0) = Array(" are ", " am ")
  Let reflexions(1) = Array(" were ", " was ")
  Let reflexions(2) = Array(" you ", " I ")
  Let reflexions(3) = Array(" your", " my")
  Let reflexions(4) = Array(" i\'ve ", " you\'ve ")
  Let reflexions(5) = Array(" i\'m ", " you\'re ")
  Let reflexions(6) = Array(" me ", " you ")
  Let reflexions(7) = Array(" my ", " your ")
  Let reflexions(8) = Array(" i ", " you ")
  Let reflexions(9) = Array(" am ", " are ")
  return reflexions
End Function
Rem  
Rem This routine sets up the reply rings addressed by the key words defined in 
Rem routine `setupKeywords()´ and mapped hitherto by the cross table defined 
Rem in `setupMapping()´ 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function setupReplies() As String(50,50)
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  

  Rem We start with the highest index for performance reasons 
  Rem (is to avoid frequent array resizing) 
  Dim replies(,) As String
  Let replies(29) = Array( "Say, do you have any psychological problems?", "What does that suggest to you?", "I see.", "I'm not sure I understand you fully.", "Come come elucidate your thoughts.", "Can you elaborate on that?", "That is quite interesting.")
  Let replies(0) = Array( "Don't you believe that I can*?", "Perhaps you would like to be like me?", "You want me to be able to*?")
  Let replies(1) = Array( "Perhaps you don't want to*?", "Do you want to be able to*?")
  Let replies(2) = Array( "What makes you think I am*?", "Does it please you to believe I am*?", "Perhaps you would like to be*?", "Do you sometimes wish you were*?")
  Let replies(3) = Array( "Don't you really*?", "Why don't you*?", "Do you wish to be able to*?", "Does that trouble you*?")
  Let replies(4) = Array( "Do you often feel*?", "Are you afraid of feeling*?", "Do you enjoy feeling*?")
  Let replies(5) = Array( "Do you really believe I don't*?", "Perhaps in good time I will*.", "Do you want me to*?")
  Let replies(6) = Array( "Do you think you should be able to*?", "Why can't you*?")
  Let replies(7) = Array( "Why are you interested in whether or not I am*?", "Would you prefer if I were not*?", "Perhaps in your fantasies I am*?")
  Let replies(8) = Array( "How do you know you can't*?", "Have you tried?","Perhaps you can now*.")
  Let replies(9) = Array( "Did you come to me because you are*?", "How long have you been*?", "Do you believe it is normal to be*?", "Do you enjoy being*?")
  Let replies(10) = Array( "We were discussing you--not me.", "Oh, I*.", "You're not really talking about me, are you?")
  Let replies(11) = Array( "What would it mean to you if you got*?", "Why do you want*?", "Suppose you soon got*...", "What if you never got*?", "I sometimes also want*.")
  Let replies(12) = Array( "Why do you ask?", "Does that question interest you?", "What answer would please you the most?", "What do you think?", "Are such questions on your mind often?", "What is it that you really want to know?", "Have you asked anyone else?", "Have you asked such questions before?", "What else comes to mind when you ask that?")
  Let replies(13) = Array( "Names don't interest me.", "I don't care about names -- please go on.")
  Let replies(14) = Array( "Is that the real reason?", "Don't any other reasons come to mind?", "Does that reason explain anything else?", "What other reasons might there be?")
  Let replies(15) = Array( "Please don't apologize!", "Apologies are not necessary.", "What feelings do you have when you apologize?", "Don't be so defensive!")
  Let replies(16) = Array( "What does that dream suggest to you?", "Do you dream often?", "What persons appear in your dreams?", "Are you disturbed by your dreams?")
  Let replies(17) = Array( "How do you do ...please state your problem.")
  Let replies(18) = Array( "You don't seem quite certain.", "Why the uncertain tone?", "Can't you be more positive?", "You aren't sure?", "Don't you know?")
  Let replies(19) = Array( "Are you saying no just to be negative?", "You are being a bit negative.", "Why not?", "Are you sure?", "Why no?")
  Let replies(20) = Array( "Why are you concerned about my*?", "What about your own*?")
  Let replies(21) = Array( "Can you think of a specific example?", "When?", "What are you thinking of?", "Really, always?")
  Let replies(22) = Array( "Do you really think so?", "But you are not sure you*?", "Do you doubt you*?")
  Let replies(23) = Array( "In what way?", "What resemblance do you see?", "What does the similarity suggest to you?", "What other connections do you see?", "Could there really be some connection?", "How?", "You seem quite positive.")
  Let replies(24) = Array( "Are you sure?", "I see.", "I understand.")
  Let replies(25) = Array( "Why do you bring up the topic of friends?", "Do your friends worry you?", "Do your friends pick on you?", "Are you sure you have any friends?", "Do you impose on your friends?", "Perhaps your love for friends worries you.")
  Let replies(26) = Array( "Do computers worry you?", "Are you talking about me in particular?", "Are you frightened by machines?", "Why do you mention computers?", "What do you think machines have to do with your problem?", "Don't you think computers can help people?", "What is it about machines that worries you?")
  Let replies(27) = Array( "Do you sometimes feel uneasy without a smartphone?", "Have you had these phantasies before?", "Does the world seem more real for you via apps?")
  Let replies(28) = Array( "Tell me more about your family.", "Who else in your family*?", "What does family relations mean for you?", "Come on, How old are you?")
  Dim setupReplies(,) As String
  setupReplies = replies
  Return setupReplies
End Function

Rem = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

