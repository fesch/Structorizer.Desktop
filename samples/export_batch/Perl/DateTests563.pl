#!/usr/bin/perl
# Generated by Structorizer 3.32-26 

# Copyright (C) 2017-09-18 Kay GÃ¼rtzig 
# License: GPLv3-link 
# GNU General Public License (V 3) 
# https://www.gnu.org/licenses/gpl.html 
# http://www.gnu.de/documents/gpl.de.html 

use strict;
use warnings;
use Class::Struct;

# Detects whether the given year is a leap year in the Gregorian calendar 
# (extrapolated backwards beyonds its inauguration) 
sub isLeapYear {
    my $year = $_[0];

    my $isLeapYear;

    # Most years aren't leap years... 
    $isLeapYear = false;

    if ( ($year % 4 == 0) && ($year % 100 != 0) ) {
        # This is a standard leap year 
        $isLeapYear = true;
    }
    else if ( $year % 400 == 0 ) {
        # One of the rare leap years 
        # occurring every 400 years 
        $isLeapYear = true;
    }

    return $isLeapYear;
}

# Computes the number of days the given month (1..12) 
# has in the the given year 
sub daysInMonth423 {
    my $aDate = $_[0];

    my $isLeap;
    my $days;


    # select the case where illegal values are also considered 
    switch ( $$aDate->month ) {

        case [1, 3, 5, 7, 8, 10, 12] {
            $days = 31;
        }

        case [4, 6, 9, 11] {
            $days = 30;
        }

        case (2) {
            # Default value for February 
            $days = 28;
            # To make the call work it has to be done in 
            # a separate element (cannot be performed 
            # as part of the condition of an Alternative) 
            $isLeap = isLeapYear(\$$aDate->year);

            if ( $isLeap ) {
                $days = 29;
            }

        }

        else {
            # This is the return value for illegal months. 
            # It is easy to check 
            $days = 0;
        }
    }

    return $days;
}

# = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 


my @values;
my $today;
my $someDay;
my $nDays;
my $me;
my @explArray;
my @doof;
my @declArray;

$someDay = Date(day:24,month:2,year:2017);
$nDays = daysInMonth423(\$someDay);
$today = Date(2018, 7, 20);
struct (Person => {
    name => '$',
    birth => 'Date',
    test => '@',
)};
$me = Person("roger",Date(1985,3,6),(0,8,15));
@declArray = (9.0,7.5,-6.4,1.7,0.0);
@explArray = (7.1,0.5,-1.5);
@doof = (0.4);
@values = (47,11);
