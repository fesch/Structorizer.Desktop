10 REM Several declaration and initialisation variants for test of Analyser, Executor, and Generators 
20 REM Generated by Structorizer 3.32-26 
30 
40 REM Copyright (C) 2017-09-18 Kay GÃ¼rtzig 
50 REM License: GPLv3-link 
60 REM GNU General Public License (V 3) 
70 REM https://www.gnu.org/licenses/gpl.html 
80 REM http://www.gnu.de/documents/gpl.de.html 
90 
100 REM  
110 REM program DateTests563
120 REM TODO: add the respective type suffixes to your variable names if required 
130 DIM someDay AS Date
140 LET someDay.day = 24
150 LET someDay.month = 2
160 LET someDay.year = 2017
170 LET nDays = daysInMonth423(someDay)
180 DIM today AS Date
190 LET today.year = 2018
200 LET today.month = 7
210 LET today.day = 20
220 TYPE Person
230   name AS String
240   birth AS Date
250   test AS @int
260 END TYPE
270 DIM me AS Person
280 LET me.name = "roger"
290 LET me.birth = Date{1985, 3, 6}
300 LET me.test = {0, 8, 15}
310 REM TODO: Check indexBase value (automatically generated) 
320 LET indexBase = 0
330 LET declArray(indexBase + 0) = 9.0
340 LET declArray(indexBase + 1) = 7.5
350 LET declArray(indexBase + 2) = -6.4
360 LET declArray(indexBase + 3) = 1.7
370 LET declArray(indexBase + 4) = 0.0
380 REM TODO: Check indexBase value (automatically generated) 
390 LET indexBase = 0
400 LET explArray(indexBase + 0) = 7.1
410 LET explArray(indexBase + 1) = 0.5
420 LET explArray(indexBase + 2) = -1.5
430 REM TODO: Check indexBase value (automatically generated) 
440 LET indexBase = 0
450 LET doof(3)(indexBase + 0) = 0.4
460 REM TODO: Check indexBase value (automatically generated) 
470 LET indexBase = 0
480 LET dull(indexBase + 0) = -12.7
490 LET dull(indexBase + 1) = 96.03
500 REM TODO: Check indexBase value (automatically generated) 
510 LET indexBase = 0
520 LET values(indexBase + 0) = 47
530 LET values(indexBase + 1) = 11
540 END
550 REM  
560 REM Detects whether the given year is a leap year in the Gregorian calendar 
570 REM (extrapolated backwards beyonds its inauguration) 
580 REM TODO: Add type-specific suffixes where necessary! 
590 FUNCTION isLeapYear(year) AS boolean
600   REM TODO: add the respective type suffixes to your variable names if required 
610   REM Most years aren't leap years... 
620   LET isLeapYear = false
630   IF (year % 4 = 0) AND (year % 100 <> 0) THEN
640     REM This is a standard leap year 
650     LET isLeapYear = true
660   ELSE
670     IF year % 400 = 0 THEN
680       REM One of the rare leap years 
690       REM occurring every 400 years 
700       LET isLeapYear = true
710     END IF
720   END IF
730   RETURN isLeapYear
740 END FUNCTION
750 REM  
760 REM Computes the number of days the given month (1..12) 
770 REM has in the the given year 
780 REM TODO: Add type-specific suffixes where necessary! 
790 FUNCTION daysInMonth423(aDate AS Date) AS Integer
800   REM TODO: add the respective type suffixes to your variable names if required 
810   REM select the case where illegal values are also considered 
820   SELECT CASE aDate.month
830     CASE 1, 3, 5, 7, 8, 10, 12
840       LET days = 31
850     CASE 4, 6, 9, 11
860       LET days = 30
870     CASE 2
880       REM Default value for February 
890       LET days = 28
900       REM To make the call work it has to be done in 
910       REM a separate element (cannot be performed 
920       REM as part of the condition of an Alternative) 
930       LET isLeap = isLeapYear(aDate.year)
940       IF isLeap THEN
950         LET days = 29
960       END IF
970     CASE ELSE
980       REM This is the return value for illegal months. 
990       REM It is easy to check 
1000       LET days = 0
1010   END SELECT
1020   return days
1030 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

