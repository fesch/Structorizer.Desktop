10 REM Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
20 REM "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
30 REM Computational Linguistis 1(1966)9, pp. 36-45 
40 REM Revision history: 
50 REM 2016-10-06 Initial version 
60 REM 2017-03-29 Two diagrams updated (comments translated to English) 
70 REM 2017-03-29 More keywords and replies added 
80 REM 2019-03-14 Replies and mapping reorganised for easier maintenance 
90 REM 2019-03-15 key map joined from keyword array and index map 
100 REM 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
110 REM 2019-11-28 New global type "History" (to ensure a homogenous array) 
120 REM Generated by Structorizer 3.32-26 
130 
140 REM Copyright (C) 2018-05-14 Kay Gürtzig 
150 REM License: GPLv3-link 
160 REM GNU General Public License (V 3) 
170 REM https://www.gnu.org/licenses/gpl.html 
180 REM http://www.gnu.de/documents/gpl.de.html 
190 
200 REM  
210 REM program ELIZA
220 REM TODO: add the respective type suffixes to your variable names if required 
230 REM  
240 
250 REM histArray contains the most recent user replies as ring buffer; 
260 REM histIndex is the index where the next reply is to be stored (= index of the oldest 
270 REM cached user reply). 
280 REM Note: The depth of the history is to be specified by initializing a variable of this type, 
290 REM e.g. for a history of depth 5: 
300 REM myhistory <- History{{"", "", "", "", ""}, 0} 
310 TYPE History
320   histArray AS @string
330   histIndex AS Integer
340 END TYPE
350 REM Associates a key word in the text with an index in the reply ring array 
360 TYPE KeyMapEntry
370   keyword AS String
380   index AS Integer
390 END TYPE
400 
410 REM Title information 
420 PRINT "************* ELIZA **************"
430 PRINT "* Original design by J. Weizenbaum"
440 PRINT "**********************************"
450 PRINT "* Adapted for Basic on IBM PC by"
460 PRINT "* - Patricia Danielson"
470 PRINT "* - Paul Hashfield"
480 PRINT "**********************************"
490 PRINT "* Adapted for Structorizer by"
500 PRINT "* - Kay Gürtzig / FH Erfurt 2016"
510 PRINT "* Version: 2.3 (2020-02-24)"
520 PRINT "* (Requires at least Structorizer 3.30-03 to run)"
530 PRINT "**********************************"
540 REM Stores the last five inputs of the user in a ring buffer, 
550 REM the second component is the rolling (over-)write index. 
560 DIM history AS History
570 LET history.histArray = {"", "", "", "", ""}
580 LET history.histIndex = 0
590 LET replies = setupReplies()
600 LET reflexions = setupReflexions()
610 LET byePhrases = setupGoodByePhrases()
620 LET keyMap = setupKeywords()
630 DIM offsets() AS Integer
640 LET offsets(length(keyMap)-1) = 0
650 LET isGone = false
660 REM Starter 
670 PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
680 DO
690   INPUT userInput
700   REM Converts the input to lowercase, cuts out interpunctation 
710   REM and pads the string 
720   LET userInput = normalizeInput(userInput)
730   LET isGone = checkGoodBye(userInput, byePhrases)
740   IF NOT isGone THEN
750     LET reply = "Please don\'t repeat yourself!"
760     LET isRepeated = checkRepetition(history, userInput)
770     IF NOT isRepeated THEN
780       LET findInfo = findKeyword(keyMap, userInput)
790       LET keyIndex = findInfo(0)
800       IF keyIndex < 0 THEN
810         REM Should never happen... 
820         LET keyIndex = length(keyMap)-1
830       END IF
840       DIM entry AS KeyMapEntry
850       LET var entry: KeyMapEntry = keyMap(keyIndex)
860       REM Variable part of the reply 
870       LET varPart = ""
880       IF length(entry.keyword) > 0 THEN
890         LET varPart = conjugateStrings(userInput, entry.keyword, findInfo(1), reflexions)
900       END IF
910       LET replyRing = replies(entry.index)
920       LET reply = replyRing(offsets(keyIndex))
930       LET offsets(keyIndex) = (offsets(keyIndex) + 1) % length(replyRing)
940       LET posAster = pos("*", reply)
950       IF posAster > 0 THEN
960         IF varPart = " " THEN
970           LET reply = "You will have to elaborate more for me to help you."
980         ELSE
990           delete(reply, posAster, 1)
1000           insert(varPart, reply, posAster)
1010         END IF
1020       END IF
1030       LET reply = adjustSpelling(reply)
1040     END IF
1050     PRINT reply
1060   END IF
1070 LOOP UNTIL isGone
1080 END
1090 REM  
1100 REM Cares for correct letter case among others 
1110 REM TODO: Add type-specific suffixes where necessary! 
1120 FUNCTION adjustSpelling(sentence AS String) AS String
1130   REM TODO: add the respective type suffixes to your variable names if required 
1140   REM  
1150 
1160   LET result = sentence
1170   LET position = 1
1180   DO WHILE (position <= length(sentence)) AND (copy(sentence, position, 1) = " ")
1190     LET position = position + 1
1200   LOOP
1210   IF position <= length(sentence) THEN
1220     LET start = copy(sentence, 1, position)
1230     delete(result, 1, position)
1240     insert(uppercase(start), result, 1)
1250   END IF
1260   DIM array1fc2b765() AS String = {" i ", " i\'"}
1270   FOR EACH word IN array1fc2b765
1280     LET position = pos(word, result)
1290     DO WHILE position > 0
1300       delete(result, position+1, 1)
1310       insert("I", result, position+1)
1320       LET position = pos(word, result)
1330     LOOP
1340   NEXT word
1350   RETURN result
1360 END FUNCTION
1370 REM  
1380 REM Checks whether the given text contains some kind of 
1390 REM good-bye phrase inducing the end of the conversation 
1400 REM and if so writes a correspding good-bye message and 
1410 REM returns true, otherwise false 
1420 REM TODO: Add type-specific suffixes where necessary! 
1430 FUNCTION checkGoodBye(text AS String, phrases AS String(50,0 TO 1)) AS boolean
1440   REM TODO: add the respective type suffixes to your variable names if required 
1450   REM  
1460 
1470   FOR EACH pair IN phrases
1480     IF pos(pair(0), text) > 0 THEN
1490       PRINT pair(1)
1500       RETURN true
1510     END IF
1520   NEXT pair
1530   return false
1540 END FUNCTION
1550 REM  
1560 REM Checks whether newInput has occurred among the recently cached 
1570 REM input strings in the histArray component of history and updates the history. 
1580 REM TODO: Add type-specific suffixes where necessary! 
1590 FUNCTION checkRepetition(history AS History, newInput AS String) AS boolean
1600   REM TODO: add the respective type suffixes to your variable names if required 
1610   REM  
1620 
1630   LET hasOccurred = false
1640   IF length(newInput) > 4 THEN
1650     LET histDepth = length(history.histArray)
1660     FOR i = 0 TO histDepth-1
1670       IF newInput = history.histArray(i) THEN
1680         LET hasOccurred = true
1690       END IF
1700     NEXT i
1710     LET history.histArray(history.histIndex) = newInput
1720     LET history.histIndex = (history.histIndex + 1) % (histDepth)
1730   END IF
1740   return hasOccurred
1750 END FUNCTION
1760 REM  
1770 REM TODO: Add type-specific suffixes where necessary! 
1780 FUNCTION conjugateStrings(sentence AS String, key AS String, keyPos AS integer, flexions AS String(50,0 TO 1)) AS String
1790   REM TODO: add the respective type suffixes to your variable names if required 
1800   REM  
1810 
1820   LET result = " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
1830   FOR EACH pair IN flexions
1840     LET left = ""
1850     LET right = result
1860     LET position = pos(pair(0), right)
1870     DO WHILE position > 0
1880       LET left = left + copy(right, 1, position-1) + pair(1)
1890       LET right = copy(right, position + length(pair(0)), length(right))
1900       LET position = pos(pair(0), right)
1910     LOOP
1920     LET result = left + right
1930   NEXT pair
1940   REM Eliminate multiple spaces 
1950   LET position = pos("  ", result)
1960   DO WHILE position > 0
1970     LET result = copy(result, 1, position-1) + copy(result, position+1, length(result))
1980     LET position = pos("  ", result)
1990   LOOP
2000   RETURN result
2010 END FUNCTION
2020 REM  
2030 REM Looks for the occurrence of the first of the strings 
2040 REM contained in keywords within the given sentence (in 
2050 REM array order). 
2060 REM Returns an array of 
2070 REM 0: the index of the first identified keyword (if any, otherwise -1), 
2080 REM 1: the position inside sentence (0 if not found) 
2090 REM TODO: Add type-specific suffixes where necessary! 
2100 FUNCTION findKeyword(CONST keyMap AS KeyMapEntry(50), sentence AS String) AS integer(0 TO 1)
2110   REM TODO: add the respective type suffixes to your variable names if required 
2120   REM  
2130 
2140   REM Contains the index of the keyword and its position in sentence 
2150   DIM result(1) AS Integer
2160   LET result(0) = -1
2170   LET result(1) = 0
2180   LET i = 0
2190   DO WHILE (result(0) < 0) AND (i < length(keyMap))
2200     DIM entry AS KeyMapEntry
2210     LET var entry: KeyMapEntry = keyMap(i)
2220     LET position = pos(entry.keyword, sentence)
2230     IF position > 0 THEN
2240       LET result(0) = i
2250       LET result(1) = position
2260     END IF
2270     LET i = i+1
2280   LOOP
2290   RETURN result
2300 END FUNCTION
2310 REM  
2320 REM Converts the sentence to lowercase, eliminates all 
2330 REM interpunction (i.e. ',', '.', ';'), and pads the 
2340 REM sentence among blanks 
2350 REM TODO: Add type-specific suffixes where necessary! 
2360 FUNCTION normalizeInput(sentence AS String) AS String
2370   REM TODO: add the respective type suffixes to your variable names if required 
2380   REM  
2390 
2400   LET sentence = lowercase(sentence)
2410   REM TODO: Specify an appropriate element type for the array! 
2420   DIM array6ec8211c() AS FIXME_6ec8211c = {'.', ',', ';', '!', '?'}
2430   FOR EACH symbol IN array6ec8211c
2440     LET position = pos(symbol, sentence)
2450     DO WHILE position > 0
2460       LET sentence = copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
2470       LET position = pos(symbol, sentence)
2480     LOOP
2490   NEXT symbol
2500   LET result = " " + sentence + " "
2510   RETURN result
2520 END FUNCTION
2530 REM  
2540 REM TODO: Add type-specific suffixes where necessary! 
2550 FUNCTION setupGoodByePhrases() AS String(50,0 TO 1)
2560   REM TODO: add the respective type suffixes to your variable names if required 
2570   REM  
2580 
2590   DIM phrases(,1) AS String
2600   LET phrases(0)(0) = " shut"
2610   LET phrases(0)(1) = "Okay. If you feel that way I\'ll shut up. ... Your choice."
2620   LET phrases(1)(0) = "bye"
2630   LET phrases(1)(1) = "Well, let\'s end our talk for now. See you later. Bye."
2640   return phrases
2650 END FUNCTION
2660 REM  
2670 REM The lower the index the higher the rank of the keyword (search is sequential). 
2680 REM The index of the first keyword found in a user sentence maps to a respective 
2690 REM reply ring as defined in `setupReplies()´. 
2700 REM TODO: Add type-specific suffixes where necessary! 
2710 FUNCTION setupKeywords() AS KeyMapEntry(50)
2720   REM TODO: add the respective type suffixes to your variable names if required 
2730   REM  
2740 
2750   REM The empty key string (last entry) is the default clause - will always be found 
2760   DIM keywords() AS KeyMapEntry
2770   LET keywords(39).keyword = ""
2780   LET keywords(39).index = 29
2790   LET keywords(0).keyword = "can you "
2800   LET keywords(0).index = 0
2810   LET keywords(1).keyword = "can i "
2820   LET keywords(1).index = 1
2830   LET keywords(2).keyword = "you are "
2840   LET keywords(2).index = 2
2850   LET keywords(3).keyword = "you\'re "
2860   LET keywords(3).index = 2
2870   LET keywords(4).keyword = "i don't "
2880   LET keywords(4).index = 3
2890   LET keywords(5).keyword = "i feel "
2900   LET keywords(5).index = 4
2910   LET keywords(6).keyword = "why don\'t you "
2920   LET keywords(6).index = 5
2930   LET keywords(7).keyword = "why can\'t i "
2940   LET keywords(7).index = 6
2950   LET keywords(8).keyword = "are you "
2960   LET keywords(8).index = 7
2970   LET keywords(9).keyword = "i can\'t "
2980   LET keywords(9).index = 8
2990   LET keywords(10).keyword = "i am "
3000   LET keywords(10).index = 9
3010   LET keywords(11).keyword = "i\'m "
3020   LET keywords(11).index = 9
3030   LET keywords(12).keyword = "you "
3040   LET keywords(12).index = 10
3050   LET keywords(13).keyword = "i want "
3060   LET keywords(13).index = 11
3070   LET keywords(14).keyword = "what "
3080   LET keywords(14).index = 12
3090   LET keywords(15).keyword = "how "
3100   LET keywords(15).index = 12
3110   LET keywords(16).keyword = "who "
3120   LET keywords(16).index = 12
3130   LET keywords(17).keyword = "where "
3140   LET keywords(17).index = 12
3150   LET keywords(18).keyword = "when "
3160   LET keywords(18).index = 12
3170   LET keywords(19).keyword = "why "
3180   LET keywords(19).index = 12
3190   LET keywords(20).keyword = "name "
3200   LET keywords(20).index = 13
3210   LET keywords(21).keyword = "cause "
3220   LET keywords(21).index = 14
3230   LET keywords(22).keyword = "sorry "
3240   LET keywords(22).index = 15
3250   LET keywords(23).keyword = "dream "
3260   LET keywords(23).index = 16
3270   LET keywords(24).keyword = "hello "
3280   LET keywords(24).index = 17
3290   LET keywords(25).keyword = "hi "
3300   LET keywords(25).index = 17
3310   LET keywords(26).keyword = "maybe "
3320   LET keywords(26).index = 18
3330   LET keywords(27).keyword = " no"
3340   LET keywords(27).index = 19
3350   LET keywords(28).keyword = "your "
3360   LET keywords(28).index = 20
3370   LET keywords(29).keyword = "always "
3380   LET keywords(29).index = 21
3390   LET keywords(30).keyword = "think "
3400   LET keywords(30).index = 22
3410   LET keywords(31).keyword = "alike "
3420   LET keywords(31).index = 23
3430   LET keywords(32).keyword = "yes "
3440   LET keywords(32).index = 24
3450   LET keywords(33).keyword = "friend "
3460   LET keywords(33).index = 25
3470   LET keywords(34).keyword = "computer"
3480   LET keywords(34).index = 26
3490   LET keywords(35).keyword = "bot "
3500   LET keywords(35).index = 26
3510   LET keywords(36).keyword = "smartphone"
3520   LET keywords(36).index = 27
3530   LET keywords(37).keyword = "father "
3540   LET keywords(37).index = 28
3550   LET keywords(38).keyword = "mother "
3560   LET keywords(38).index = 28
3570   return keywords
3580 END FUNCTION
3590 REM  
3600 REM Returns an array of pairs of mutualy substitutable  
3610 REM TODO: Add type-specific suffixes where necessary! 
3620 FUNCTION setupReflexions() AS String(50,0 TO 1)
3630   REM TODO: add the respective type suffixes to your variable names if required 
3640   REM  
3650 
3660   DIM reflexions(,1) AS String
3670   LET reflexions(0)(0) = " are "
3680   LET reflexions(0)(1) = " am "
3690   LET reflexions(1)(0) = " were "
3700   LET reflexions(1)(1) = " was "
3710   LET reflexions(2)(0) = " you "
3720   LET reflexions(2)(1) = " I "
3730   LET reflexions(3)(0) = " your"
3740   LET reflexions(3)(1) = " my"
3750   LET reflexions(4)(0) = " i\'ve "
3760   LET reflexions(4)(1) = " you\'ve "
3770   LET reflexions(5)(0) = " i\'m "
3780   LET reflexions(5)(1) = " you\'re "
3790   LET reflexions(6)(0) = " me "
3800   LET reflexions(6)(1) = " you "
3810   LET reflexions(7)(0) = " my "
3820   LET reflexions(7)(1) = " your "
3830   LET reflexions(8)(0) = " i "
3840   LET reflexions(8)(1) = " you "
3850   LET reflexions(9)(0) = " am "
3860   LET reflexions(9)(1) = " are "
3870   return reflexions
3880 END FUNCTION
3890 REM  
3900 REM This routine sets up the reply rings addressed by the key words defined in 
3910 REM routine `setupKeywords()´ and mapped hitherto by the cross table defined 
3920 REM in `setupMapping()´ 
3930 REM TODO: Add type-specific suffixes where necessary! 
3940 FUNCTION setupReplies() AS String(50,50)
3950   REM TODO: add the respective type suffixes to your variable names if required 
3960   REM  
3970 
3980   REM We start with the highest index for performance reasons 
3990   REM (is to avoid frequent array resizing) 
4000   DIM replies(,) AS String
4010   LET replies(29)(0) = "Say, do you have any psychological problems?"
4020   LET replies(29)(1) = "What does that suggest to you?"
4030   LET replies(29)(2) = "I see."
4040   LET replies(29)(3) = "I'm not sure I understand you fully."
4050   LET replies(29)(4) = "Come come elucidate your thoughts."
4060   LET replies(29)(5) = "Can you elaborate on that?"
4070   LET replies(29)(6) = "That is quite interesting."
4080   LET replies(0)(0) = "Don't you believe that I can*?"
4090   LET replies(0)(1) = "Perhaps you would like to be like me?"
4100   LET replies(0)(2) = "You want me to be able to*?"
4110   LET replies(1)(0) = "Perhaps you don't want to*?"
4120   LET replies(1)(1) = "Do you want to be able to*?"
4130   LET replies(2)(0) = "What makes you think I am*?"
4140   LET replies(2)(1) = "Does it please you to believe I am*?"
4150   LET replies(2)(2) = "Perhaps you would like to be*?"
4160   LET replies(2)(3) = "Do you sometimes wish you were*?"
4170   LET replies(3)(0) = "Don't you really*?"
4180   LET replies(3)(1) = "Why don't you*?"
4190   LET replies(3)(2) = "Do you wish to be able to*?"
4200   LET replies(3)(3) = "Does that trouble you*?"
4210   LET replies(4)(0) = "Do you often feel*?"
4220   LET replies(4)(1) = "Are you afraid of feeling*?"
4230   LET replies(4)(2) = "Do you enjoy feeling*?"
4240   LET replies(5)(0) = "Do you really believe I don't*?"
4250   LET replies(5)(1) = "Perhaps in good time I will*."
4260   LET replies(5)(2) = "Do you want me to*?"
4270   LET replies(6)(0) = "Do you think you should be able to*?"
4280   LET replies(6)(1) = "Why can't you*?"
4290   LET replies(7)(0) = "Why are you interested in whether or not I am*?"
4300   LET replies(7)(1) = "Would you prefer if I were not*?"
4310   LET replies(7)(2) = "Perhaps in your fantasies I am*?"
4320   LET replies(8)(0) = "How do you know you can't*?"
4330   LET replies(8)(1) = "Have you tried?"
4340   LET replies(8)(2) = "Perhaps you can now*."
4350   LET replies(9)(0) = "Did you come to me because you are*?"
4360   LET replies(9)(1) = "How long have you been*?"
4370   LET replies(9)(2) = "Do you believe it is normal to be*?"
4380   LET replies(9)(3) = "Do you enjoy being*?"
4390   LET replies(10)(0) = "We were discussing you--not me."
4400   LET replies(10)(1) = "Oh, I*."
4410   LET replies(10)(2) = "You're not really talking about me, are you?"
4420   LET replies(11)(0) = "What would it mean to you if you got*?"
4430   LET replies(11)(1) = "Why do you want*?"
4440   LET replies(11)(2) = "Suppose you soon got*..."
4450   LET replies(11)(3) = "What if you never got*?"
4460   LET replies(11)(4) = "I sometimes also want*."
4470   LET replies(12)(0) = "Why do you ask?"
4480   LET replies(12)(1) = "Does that question interest you?"
4490   LET replies(12)(2) = "What answer would please you the most?"
4500   LET replies(12)(3) = "What do you think?"
4510   LET replies(12)(4) = "Are such questions on your mind often?"
4520   LET replies(12)(5) = "What is it that you really want to know?"
4530   LET replies(12)(6) = "Have you asked anyone else?"
4540   LET replies(12)(7) = "Have you asked such questions before?"
4550   LET replies(12)(8) = "What else comes to mind when you ask that?"
4560   LET replies(13)(0) = "Names don't interest me."
4570   LET replies(13)(1) = "I don't care about names -- please go on."
4580   LET replies(14)(0) = "Is that the real reason?"
4590   LET replies(14)(1) = "Don't any other reasons come to mind?"
4600   LET replies(14)(2) = "Does that reason explain anything else?"
4610   LET replies(14)(3) = "What other reasons might there be?"
4620   LET replies(15)(0) = "Please don't apologize!"
4630   LET replies(15)(1) = "Apologies are not necessary."
4640   LET replies(15)(2) = "What feelings do you have when you apologize?"
4650   LET replies(15)(3) = "Don't be so defensive!"
4660   LET replies(16)(0) = "What does that dream suggest to you?"
4670   LET replies(16)(1) = "Do you dream often?"
4680   LET replies(16)(2) = "What persons appear in your dreams?"
4690   LET replies(16)(3) = "Are you disturbed by your dreams?"
4700   LET replies(17)(0) = "How do you do ...please state your problem."
4710   LET replies(18)(0) = "You don't seem quite certain."
4720   LET replies(18)(1) = "Why the uncertain tone?"
4730   LET replies(18)(2) = "Can't you be more positive?"
4740   LET replies(18)(3) = "You aren't sure?"
4750   LET replies(18)(4) = "Don't you know?"
4760   LET replies(19)(0) = "Are you saying no just to be negative?"
4770   LET replies(19)(1) = "You are being a bit negative."
4780   LET replies(19)(2) = "Why not?"
4790   LET replies(19)(3) = "Are you sure?"
4800   LET replies(19)(4) = "Why no?"
4810   LET replies(20)(0) = "Why are you concerned about my*?"
4820   LET replies(20)(1) = "What about your own*?"
4830   LET replies(21)(0) = "Can you think of a specific example?"
4840   LET replies(21)(1) = "When?"
4850   LET replies(21)(2) = "What are you thinking of?"
4860   LET replies(21)(3) = "Really, always?"
4870   LET replies(22)(0) = "Do you really think so?"
4880   LET replies(22)(1) = "But you are not sure you*?"
4890   LET replies(22)(2) = "Do you doubt you*?"
4900   LET replies(23)(0) = "In what way?"
4910   LET replies(23)(1) = "What resemblance do you see?"
4920   LET replies(23)(2) = "What does the similarity suggest to you?"
4930   LET replies(23)(3) = "What other connections do you see?"
4940   LET replies(23)(4) = "Could there really be some connection?"
4950   LET replies(23)(5) = "How?"
4960   LET replies(23)(6) = "You seem quite positive."
4970   LET replies(24)(0) = "Are you sure?"
4980   LET replies(24)(1) = "I see."
4990   LET replies(24)(2) = "I understand."
5000   LET replies(25)(0) = "Why do you bring up the topic of friends?"
5010   LET replies(25)(1) = "Do your friends worry you?"
5020   LET replies(25)(2) = "Do your friends pick on you?"
5030   LET replies(25)(3) = "Are you sure you have any friends?"
5040   LET replies(25)(4) = "Do you impose on your friends?"
5050   LET replies(25)(5) = "Perhaps your love for friends worries you."
5060   LET replies(26)(0) = "Do computers worry you?"
5070   LET replies(26)(1) = "Are you talking about me in particular?"
5080   LET replies(26)(2) = "Are you frightened by machines?"
5090   LET replies(26)(3) = "Why do you mention computers?"
5100   LET replies(26)(4) = "What do you think machines have to do with your problem?"
5110   LET replies(26)(5) = "Don't you think computers can help people?"
5120   LET replies(26)(6) = "What is it about machines that worries you?"
5130   LET replies(27)(0) = "Do you sometimes feel uneasy without a smartphone?"
5140   LET replies(27)(1) = "Have you had these phantasies before?"
5150   LET replies(27)(2) = "Does the world seem more real for you via apps?"
5160   LET replies(28)(0) = "Tell me more about your family."
5170   LET replies(28)(1) = "Who else in your family*?"
5180   LET replies(28)(2) = "What does family relations mean for you?"
5190   LET replies(28)(3) = "Come on, How old are you?"
5200   DIM setupReplies(,) AS String
5210   LET setupReplies = replies
5220   RETURN setupReplies
5230 END FUNCTION

REM = = = = 8< = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

