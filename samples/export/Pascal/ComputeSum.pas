{
  Computes the sum and average of the numbers read from a user-specified
  text file (which might have been created via generateRandomNumberFile(4)).
  
  This program is part of an arrangement used to test group code export (issue
  #828) with FileAPI dependency.
  The input check loop has been disabled (replaced by a simple unchecked input
  instruction) in order to test the effect of indirect FileAPI dependency (only the
  called subroutine directly requires FileAPI now).
}
program ComputeSum;
{ Generated by Structorizer 3.32-20 }

{ Copyright (C) 2020-03-21 Kay GÃ¼rtzig }
{ License: GPLv3-link }
{
  GNU General Public License (V 3)
  https://www.gnu.org/licenses/gpl.html
  http://www.gnu.de/documents/gpl.de.html
}

var
  values: array [0..49] of ???;	{ FIXME! }
  sum: Double;
  nValues: Longint;
  k: Longint;
  { Disable this if you enable the loop below! }
  file_name: ???;	{ FIXME! }
  fileNo: Longint;
  failure: Exception;

{
  Tries to read as many integer values as possible upto maxNumbers
  from file fileName into the given array numbers.
  Returns the number of the actually read numbers. May cause an exception.
}
function readNumbers(fileName: string; numbers: array [0..49] of Longint; maxNumbers: Longint): Longint;

var
  number: Longint;
  nNumbers: Longint;
  fileNo: Longint;

begin
  nNumbers := 0;
  assign(fileNo, fileName); open(fileNo);
  if (fileNo <= 0) then
  begin
    raise Exception.Create('File could not be opened!');
  end;
  try
    try
      while (not eof(fileNo) and nNumbers < maxNumbers) do
      begin
        number := fileReadInt(fileNo);
        numbers[nNumbers] := number;
        nNumbers := nNumbers + 1;
      end;
    except
      on Ex : Exception do
      begin
        { FIXME: Ensure a declaration for variable error (String) in the VAR block! }
        error := Ex.Message;
        raise 
      end;
    end;
  finally
    closeFile(fileNo);
  end;
  readNumbers := nNumbers;

end;

begin
  fileNo := 1000;
  { Disable this if you enable the loop below! }
  write('Name/path of the number file'); readln(file_name);
  {
    If you enable this loop, then the preceding input instruction is to be disabled
    and the fileClose instruction in the alternative below is to be enabled.
  }
{   repeat }
{     write('Name/path of the number file'); readln(file_name); }
{     assign(fileNo, file_name); open(fileNo); }
{     until (fileNo > 0 or file_name = ''); }
  if (fileNo > 0) then
  begin
    { This should be enabled if the input check loop above gets enabled. }
{     closeFile(fileNo); }
    { Hint: Automatically decomposed array initialization }
    nValues := 0;
    try
      nValues := readNumbers(file_name, values, 1000);
    except
      on Ex : Exception do
      begin
        { FIXME: Ensure a declaration for variable failure (String) in the VAR block! }
        failure := Ex.Message;
        writeln(failure);
        halt(-7);
      end;
    end;
    sum := 0.0;
    for k := 0 to nValues-1 do
    begin
      sum := sum + values[k];
    end;
    writeln('sum = ', sum);
    writeln('average = ', sum / nValues);
  end;
end.
