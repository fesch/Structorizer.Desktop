Rem Computes the sum and average of the numbers read from a user-specified 
Rem text file (which might have been created via generateRandomNumberFile(4)). 
Rem  
Rem This program is part of an arrangement used to test group code export (issue 
Rem #828) with FileAPI dependency. 
Rem The input check loop has been disabled (replaced by a simple unchecked input 
Rem instruction) in order to test the effect of indirect FileAPI dependency (only the 
Rem called subroutine directly requires FileAPI now). 
Rem Generated by Structorizer 3.32-26 

Rem Copyright (C) 2020-03-21 Kay GÃ¼rtzig 
Rem License: GPLv3-link 
Rem GNU General Public License (V 3) 
Rem https://www.gnu.org/licenses/gpl.html 
Rem http://www.gnu.de/documents/gpl.de.html 

Rem  
Rem program ComputeSum
Rem TODO: Check and accomplish your variable declarations here: 
Dim values() As ???
Dim sum As double
Dim nValues As Integer
Dim k As Integer
Dim file_name As ???
Dim fileNo As Integer
Rem  
fileNo = 1000
Rem Disable this if you enable the loop below! 
PRINT "Name/path of the number file"; : INPUT file_name
Rem If you enable this loop, then the preceding input instruction is to be disabled 
Rem and the fileClose instruction in the alternative below is to be enabled. 
Rem Do 
Rem   PRINT "Name/path of the number file"; : INPUT file_name 
Rem   fileNo = fileOpen(file_name) 
Rem Loop Until fileNo > 0 OR file_name = "" 
If fileNo > 0 Then
  Rem This should be enabled if the input check loop above gets enabled. 
Rem   fileClose(fileNo) 
  values = Array()
  nValues = 0
  Try
    nValues = readNumbers(file_name, values, 1000)
  Catch ex62c24287 As Exception
    Dim failure As String = ex62c24287.ToString()
    PRINT failure
    Stop
  End Try
  sum = 0.0
  For k = 0 To nValues-1
    sum = sum + values(k)
  Next k
  PRINT "sum = "; sum
  PRINT "average = "; sum / nValues
End If
End
Rem  
Rem Tries to read as many integer values as possible upto maxNumbers 
Rem from file fileName into the given array numbers. 
Rem Returns the number of the actually read numbers. May cause an exception. 
Rem TODO: Check (and specify if needed) the argument and result types! 
Function readNumbers(fileName As String, numbers As integer(50), maxNumbers As integer) As integer
  Rem TODO: Check and accomplish your variable declarations here: 
  Rem  
  Dim number As Integer
  Dim nNumbers As Integer
  Dim fileNo As Integer
  Rem  
  nNumbers = 0
  fileNo = fileOpen(fileName)
  If fileNo <= 0 Then
    Throw New Exception("File could not be opened!")
  End If
  Try
    Do While NOT fileEOF(fileNo) AND nNumbers < maxNumbers
      number = fileReadInt(fileNo)
      numbers(nNumbers) = number
      nNumbers = nNumbers + 1
    Loop
  Catch ex590fbb80 As Exception
    Dim error As String = ex590fbb80.ToString()
    Throw 
  Finally
    fileClose(fileNo)
  End Try
  Return nNumbers
End Function
