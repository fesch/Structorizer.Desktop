<script>
// program DrawRandomHistogram 
// Generated by Structorizer 3.32-20 

// Copyright (C) 2020-03-21 Kay GÃ¼rtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

// function drawBarChart(values: array of double; nValues) 
// Draws a bar chart from the array "values" of size nValues. 
// Turtleizer must be activated and will scale the chart into a square of 
// 500 x 500 pixels 
// Note: The function is not robust against empty array or totally equal values. 
function drawBarChart(values, nValues) {
	// Used range of the Turtleizer screen 
	const xSize = 500;
	const ySize = 500;
	var yScale;
	var yAxis;
	var valMin;
	var valMax;
	var stripeWidth;
	var stripeHeight;
	var kMin;
	var kMax;
	var k;

	kMin = 0;
	kMax = 0;
	for (k = 1; k <= nValues-1; k += (1)) {
		if (values[k] > values[kMax]) {
			kMax = k;
		}
		else if (values[k] < values[kMin]) {
			kMin = k;
		}
	}
	valMin = values[kMin];
	valMax = values[kMax];
	yScale = valMax * 1.0 / (ySize - 1);
	yAxis = ySize - 1;
	if (valMin < 0) {
		if (valMax > 0) {
			yAxis = valMax * ySize * 1.0 / (valMax - valMin);
			yScale = (valMax - valMin) * 1.0 / (ySize - 1);
		}
		else {
			yAxis = 1;
			yScale = valMin * 1.0 / (ySize - 1);
		}
	}
	// draw coordinate axes 
	gotoXY(1, ySize - 1);
	forward(ySize -1); // color = ffffff
	penUp();
	backward(yAxis); // color = ffffff
	right(90);
	penDown();
	forward(xSize -1); // color = ffffff
	penUp();
	backward(xSize-1); // color = ffffff
	stripeWidth = xSize / nValues;
	for (k = 0; k <= nValues-1; k += (1)) {
		stripeHeight = values[k] * 1.0 / yScale;
		switch (k % 3) {
		case 0:
			setPenColor(255,0,0);
			break;
		case 1:
			setPenColor(0, 255,0);
			break;
		case 2:
			setPenColor(0, 0, 255);
			break;
		}
		fd(1); // color = ffffff
		left(90);
		penDown();
		fd(stripeHeight); // color = ffffff
		right(90);
		fd(stripeWidth - 1); // color = ffffff
		right(90);
		forward(stripeHeight); // color = ffffff
		left(90);
		penUp();
	}
}

// function readNumbers(fileName: string; numbers: array of integer; maxNumbers: integer): integer 
// Tries to read as many integer values as possible upto maxNumbers 
// from file fileName into the given array numbers. 
// Returns the number of the actually read numbers. May cause an exception. 
function readNumbers(fileName, numbers, maxNumbers) {
	var number;
	var nNumbers;
	var fileNo;

	nNumbers = 0;
	fileNo = fileOpen(fileName);
	if (fileNo <= 0) {
		throw "File could not be opened!";
	}
	try {
		while (! fileEOF(fileNo) && nNumbers < maxNumbers) {
			number = fileReadInt(fileNo);
			numbers[nNumbers] = number;
			nNumbers = nNumbers + 1;
		}
	}
	catch (ex296eb024) {
		error = ex296eb024.message
		throw ex296eb024;
	}
	finally {
		fileClose(fileNo);
	}
	return nNumbers;
}
// Reads a random number file and draws a histogram accotrding to the 
// user specifications 

// Interval width 
var width;
var value;
var numberArray;
var nObtained;
var nIntervals;
var min;
var max;
var kMaxCount;
var k;
var i;
var file_name;
var fileNo;
var count;

fileNo = -10;
do {
	file_name = prompt("Name/path of the number file");
	fileNo = fileOpen(file_name);
} while (! (fileNo > 0 || file_name == ""));
if (fileNo > 0) {
	fileClose(fileNo);
	nIntervals = prompt("number of intervals");
	// Initialize the interval counters 
	for (k = 0; k <= nIntervals-1; k += (1)) {
		count[k] = 0;
	}
	// Index of the most populated interval 
	kMaxCount = 0;
	numberArray = [];
	nObtained = 0;
	try {
		nObtained = readNumbers(file_name, numberArray, 10000);
	}
	catch (ex6d5a8719) {
		failure = ex6d5a8719.message
		document.write((failure) + "<br/>");
	}
	if (nObtained > 0) {
		min = numberArray[0];
		max = numberArray[0];
		for (i = 1; i <= nObtained-1; i += (1)) {
			if (numberArray[i] < min) {
				min = numberArray[i];
			}
			else if (numberArray[i] > max) {
				max = numberArray[i];
			}
		}
		// Interval width 
		width = (max - min) * 1.0 / nIntervals;
		for (i = 0; i <= nObtained - 1; i += (1)) {
			value = numberArray[i];
			k = 1;
			while (k < nIntervals && value > min + k * width) {
				k = k + 1;
			}
			count[k-1] = count[k-1] + 1;
			if (count[k-1] > count[kMaxCount]) {
				kMaxCount = k-1;
			}
		}
		drawBarChart(count, nIntervals);
		document.write(("Interval with max count: ", kMaxCount, " (", count[kMaxCount], ")") + "<br/>");
		for (k = 0; k <= nIntervals-1; k += (1)) {
			document.write((count[k], " numbers in interval ", k, " (", min + k * width, " ... ", min + (k+1) * width, ")") + "<br/>");
		}
	}
	else {
		document.write(("No numbers read.") + "<br/>");
	}
}
</script>
