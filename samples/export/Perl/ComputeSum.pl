#!/usr/bin/perl
# Generated by Structorizer 3.32-20 

# Copyright (C) 2020-03-21 Kay GÃ¼rtzig 
# License: GPLv3-link 
# GNU General Public License (V 3) 
# https://www.gnu.org/licenses/gpl.html 
# http://www.gnu.de/documents/gpl.de.html 

use strict;
use warnings;
use Class::Struct;
sub finally (&) { Finally->new(@_) }

# Tries to read as many integer values as possible upto maxNumbers 
# from file fileName into the given array numbers. 
# Returns the number of the actually read numbers. May cause an exception. 
sub readNumbers {
    my $fileName = $_[0];
    my $numbers = $_[1];
    my $maxNumbers = $_[2];

    my $number;
    my $nNumbers;
    my $fileNo;

    $nNumbers = 0;
    open($fileNo, "<", $fileName) or die "Failed to open $fileName";

    if ( $fileNo <= 0 ) {
        die "File could not be opened!";
    }

    eval {
        my $final1640882c = finally {
            close($fileNo);
        };

        while ( ! fileEOF($fileNo) && $nNumbers < $maxNumbers ) {
            # TODO FileAPI: Originally this was a fileReadInt call, so ensure to obtain the right thing! 
            $number = <$fileNo> ;
            $$numbers[$nNumbers] = $number;
            $nNumbers = $nNumbers + 1;
        }

    };
    if (my $ex1640882c = $@) {
        die ;
    };
    return $nNumbers;
}
# Computes the sum and average of the numbers read from a user-specified 
# text file (which might have been created via generateRandomNumberFile(4)). 
#  
# This program is part of an arrangement used to test group code export (issue 
# #828) with FileAPI dependency. 
# The input check loop has been disabled (replaced by a simple unchecked input 
# instruction) in order to test the effect of indirect FileAPI dependency (only the 
# called subroutine directly requires FileAPI now). 

my @values;
my $sum;
my $nValues;
my $k;
my $file_name;
my $fileNo;

$fileNo = 1000;
# Disable this if you enable the loop below! 
print "Name/path of the number file"; chomp($file_name = <STDIN>);
#  
# If you enable this loop, then the preceding input instruction is to be disabled 
# and the fileClose instruction in the alternative below is to be enabled. 
# do { 
#     print "Name/path of the number file"; chomp($file_name = <STDIN>); 
#     open($fileNo, "<", $file_name) or die "Failed to open $file_name"; 
# } while (!( $fileNo > 0 || $file_name == "" )); 
#  

if ( $fileNo > 0 ) {
    # This should be enabled if the input check loop above gets enabled. 
#     close($fileNo); 
    @values = ();
    $nValues = 0;
    eval {
        $nValues = readNumbers($file_name, \@values, 1000);
    };
    if (my $ex1d8ee7cb = $@) {
        print failure, "\n";
        exit(-7);
    };
    $sum = 0.0;

    for ($k = 0; $k <= $nValues-1; $k += (1)) {
        $sum = $sum + $values[$k];
    }

    print "sum = ", $sum, "\n";
    print "average = ", $sum / $nValues, "\n";
}

# ---------------------------------------------------------------------- 
#  Finally class, introduced to handle finally blocks via RAII 
# ---------------------------------------------------------------------- 
package Finally;
sub new {
    my ($class, $code) = @_;
    bless {code => $code}, $class;
}
sub DESTROY { my ($self) = @_; $self->{code}->() }
