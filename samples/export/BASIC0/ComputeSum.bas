10 REM Computes the sum and average of the numbers read from a user-specified 
20 REM text file (which might have been created via generateRandomNumberFile(4)). 
30 REM  
40 REM This program is part of an arrangement used to test group code export (issue 
50 REM #828) with FileAPI dependency. 
60 REM The input check loop has been disabled (replaced by a simple unchecked input 
70 REM instruction) in order to test the effect of indirect FileAPI dependency (only the 
80 REM called subroutine directly requires FileAPI now). 
90 REM Generated by Structorizer 3.32-26 
100 
110 REM Copyright (C) 2020-03-21 Kay GÃ¼rtzig 
120 REM License: GPLv3-link 
130 REM GNU General Public License (V 3) 
140 REM https://www.gnu.org/licenses/gpl.html 
150 REM http://www.gnu.de/documents/gpl.de.html 
160 
170 REM  
180 REM program ComputeSum
190 REM TODO: add the respective type suffixes to your variable names if required 
200 DIM values() AS ???
210 REM  
220 LET fileNo = 1000
230 REM Disable this if you enable the loop below! 
240 PRINT "Name/path of the number file"; : INPUT file_name
250 REM If you enable this loop, then the preceding input instruction is to be disabled 
260 REM and the fileClose instruction in the alternative below is to be enabled. 
270 REM DO 
280 REM   PRINT "Name/path of the number file"; : INPUT file_name 
290 REM   LET fileNo = fileOpen(file_name) 
300 REM LOOP UNTIL fileNo > 0 OR file_name = "" 
310 IF fileNo > 0 THEN
320   REM This should be enabled if the input check loop above gets enabled. 
330 REM   fileClose(fileNo) 
340   LET nValues = 0
350   ON ERROR GOTO 390
360   LET nValues = readNumbers(file_name, values, 1000)
370   GOTO 420
380   REM Start of error handler, FIXME: variable 'failure' should conatain error info ... 
390     PRINT failure
400     STOP
410   REM End of error handler, resume here ... 
420   ON ERROR GOTO 0
430   LET sum = 0.0
440   FOR k = 0 TO nValues-1
450     LET sum = sum + values(k)
460   NEXT k
470   PRINT "sum = "; sum
480   PRINT "average = "; sum / nValues
490 END IF
500 END
510 REM  
520 REM Tries to read as many integer values as possible upto maxNumbers 
530 REM from file fileName into the given array numbers. 
540 REM Returns the number of the actually read numbers. May cause an exception. 
550 REM TODO: Add type-specific suffixes where necessary! 
560 FUNCTION readNumbers(fileName AS String, numbers AS integer(50), maxNumbers AS integer) AS integer
570   REM TODO: add the respective type suffixes to your variable names if required 
580   REM  
590   REM  
600   LET nNumbers = 0
610   LET fileNo = fileOpen(fileName)
620   IF fileNo <= 0 THEN
630     REM FIXME: Only a number is allowed as parameter: 
640     ERROR "File could not be opened!"
650   END IF
660   ON ERROR GOTO 740
670   DO WHILE NOT fileEOF(fileNo) AND nNumbers < maxNumbers
680     LET number = fileReadInt(fileNo)
690     LET numbers(nNumbers) = number
700     LET nNumbers = nNumbers + 1
710   LOOP
720   GOTO 770
730   REM Start of error handler, FIXME: variable 'error' should conatain error info ... 
740     REM FIXME: Only a number is allowed as parameter: 
750     ERROR 
760   REM End of error handler, resume here ... 
770   ON ERROR GOTO 0
780   fileClose(fileNo)
790   RETURN nNumbers
800 END FUNCTION
