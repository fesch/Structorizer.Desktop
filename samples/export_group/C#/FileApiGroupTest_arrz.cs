// Generated by Structorizer 3.32-20 

// Copyright (C) 2024-04-03 Kay Gürtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

using FileAPI.CS;
using System;

/// <summary>
/// NOTE:
/// This first module of the file is a library module providing common resources
/// for the following modules, which are separated by comment lines like
/// "======= 8< =======...".
/// You may have to cut this file apart at these lines in order to get the parts
/// running, since the following modules may form sort of mutually independent
/// applications or programs the coexistence of which in a single file might not
/// be sensible.
/// </summary>
public class FileApiGroupTest_arrz {

	/**
	 * Flag ensures that initialisation method {@link #initialize_FileApiGroupTest_arrz()}
	 *  runs just one time.
	 */
	private static boolean initDone_FileApiGroupTest_arrz = false;

	public static void initialize_FileApiGroupTest_arrz() {

		// TODO: Check and accomplish variable declarations: 

		if (!initDone_FileApiGroupTest_arrz) {
			
			initDone_FileApiGroupTest_arrz = true;
		}
	}

	/// <summary>
	/// Draws a bar chart from the array "values" of size nValues.
	/// Turtleizer must be activated and will scale the chart into a square of
	/// 500 x 500 pixels
	/// Note: The function is not robust against empty array or totally equal values.
	/// </summary>
	/// <param name="values"> TODO </param>
	/// <param name="nValues"> TODO </param>
	public static void drawBarChart(double[] values, ??? nValues) {
		// TODO: Check and accomplish variable declarations: 
		// Used range of the Turtleizer screen 
		const int xSize = 500;
		const int ySize = 500;
		double valMin;
		double valMax;
		int kMin;
		int kMax;

		kMin = 0;
		kMax = 0;
		for (int k = 1; k <= nValues-1; k += (1)) {
			if (values[k] > values[kMax]) {
				kMax = k;
			}
			else if (values[k] < values[kMin]) {
				kMin = k;
			}
		}
		valMin = values[kMin];
		valMax = values[kMax];
		??? yScale = valMax * 1.0 / (ySize - 1);
		??? yAxis = ySize - 1;
		if (valMin < 0) {
			if (valMax > 0) {
				yAxis = valMax * ySize * 1.0 / (valMax - valMin);
				yScale = (valMax - valMin) * 1.0 / (ySize - 1);
			}
			else {
				yAxis = 1;
				yScale = valMin * 1.0 / (ySize - 1);
			}
		}
		// draw coordinate axes 
		gotoXY(1, ySize - 1);
		forward(ySize -1); // color = ffffff
		penUp();
		backward(yAxis); // color = ffffff
		right(90);
		penDown();
		forward(xSize -1); // color = ffffff
		penUp();
		backward(xSize-1); // color = ffffff
		??? stripeWidth = xSize / nValues;
		for (int k = 0; k <= nValues-1; k += (1)) {
			??? stripeHeight = values[k] * 1.0 / yScale;
			switch (k % 3) {
			case 0:
				setPenColor(255,0,0);
				break;
			case 1:
				setPenColor(0, 255,0);
				break;
			case 2:
				setPenColor(0, 0, 255);
				break;
			}
			fd(1); // color = ffffff
			left(90);
			penDown();
			fd(stripeHeight); // color = ffffff
			right(90);
			fd(stripeWidth - 1); // color = ffffff
			right(90);
			forward(stripeHeight); // color = ffffff
			left(90);
			penUp();
		}
	}

	/// <summary>
	/// Tries to read as many integer values as possible upto maxNumbers
	/// from file fileName into the given array numbers.
	/// Returns the number of the actually read numbers. May cause an exception.
	/// </summary>
	/// <param name="fileName"> TODO </param>
	/// <param name="numbers"> TODO </param>
	/// <param name="maxNumbers"> TODO </param>
	/// <return> TODO </return>
	public static int readNumbers(string fileName, int[] numbers, int maxNumbers) {
		// TODO: Check and accomplish variable declarations: 
		int number;
		int nNumbers;
		int fileNo;

		nNumbers = 0;
		fileNo = StructorizerFileAPI.fileOpen(fileName);
		if (fileNo <= 0) {
			// FIXME: You should replace System.Exception by an own subclass! 
			throw new System.Exception("File could not be opened!");
		}
		try {
			while (! StructorizerFileAPI.fileEOF(fileNo) && nNumbers < maxNumbers) {
				number = StructorizerFileAPI.fileReadInt(fileNo);
				numbers[nNumbers] = number;
				nNumbers = nNumbers + 1;
			}
		}
		catch(Exception ex296eb024) {
			string error = ex296eb024.ToString()
			throw;
		}
		finally {
			StructorizerFileAPI.fileClose(fileNo);
		}
		return nNumbers;
	}

}

// ======= 8< =========================================================== 

// Generated by Structorizer 3.32-20 

// Copyright (C) 2020-03-21 Kay Gürtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

using FileApiGroupTest_arrz;
using System;

/// <summary>
/// Computes the sum and average of the numbers read from a user-specified
/// text file (which might have been created via generateRandomNumberFile(4)).
/// 
/// This program is part of an arrangement used to test group code export (issue
/// #828) with FileAPI dependency.
/// The input check loop has been disabled (replaced by a simple unchecked input
/// instruction) in order to test the effect of indirect FileAPI dependency (only the
/// called subroutine directly requires FileAPI now).
/// </summary>
public class ComputeSum {

	/// <param name="args"> array of command line arguments </param>
	public static void Main(string[] args) {

		initialize_FileApiGroupTest_arrz();
		// TODO: Check and accomplish variable declarations: 
		???[] values;
		double sum;
		int nValues;
		??? file_name;
		int fileNo;

		// TODO: You may have to modify input instructions, 
		//       possibly by enclosing Console.ReadLine() calls with 
		//       Parse methods according to the variable type, e.g.: 
		//          i = int.Parse(Console.ReadLine()); 

		fileNo = 1000;
		// Disable this if you enable the loop below! 
		Console.Write("Name/path of the number file"); file_name = Console.ReadLine();
		// If you enable this loop, then the preceding input instruction is to be disabled 
		// and the fileClose instruction in the alternative below is to be enabled. 
// 		do { 
// 			Console.Write("Name/path of the number file"); file_name = Console.ReadLine(); 
// 			fileNo = StructorizerFileAPI.fileOpen(file_name); 
// 		} while (! (fileNo > 0 || file_name == "")); 
		if (fileNo > 0) {
			// This should be enabled if the input check loop above gets enabled. 
// 			StructorizerFileAPI.fileClose(fileNo); 
			values = new ???[]{};
			nValues = 0;
			try {
				nValues = FileApiGroupTest_arrz.readNumbers(file_name, values, 1000);
			}
			catch(Exception ex8d3ca0d) {
				string failure = ex8d3ca0d.ToString()
				Console.WriteLine(failure);
				if (System.Windows.Forms.Application.MessageLoop) {
					// WinForms app 
					System.Windows.Forms.Application.Exit();
				}
				else {
					// Console app 
					System.Environment.Exit(-7);
				}
			}
			sum = 0.0;
			for (int k = 0; k <= nValues-1; k += (1)) {
				sum = sum + values[k];
			}
			Console.Write("sum = "); Console.WriteLine(sum);
			Console.Write("average = "); Console.WriteLine(sum / nValues);
		}
	}

}

// ======= 8< =========================================================== 

// Generated by Structorizer 3.32-20 

// Copyright (C) 2020-03-21 Kay Gürtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

using FileApiGroupTest_arrz;
using FileAPI.CS;
using System;

/// <summary>
/// Reads a random number file and draws a histogram accotrding to the
/// user specifications
/// </summary>
public class DrawRandomHistogram {

	/// <param name="args"> array of command line arguments </param>
	public static void Main(string[] args) {

		initialize_FileApiGroupTest_arrz();
		// TODO: Check and accomplish variable declarations: 
		???[] numberArray;
		int nObtained;
		??? nIntervals;
		int kMaxCount;
		??? file_name;
		int fileNo;
		int[] count;

		// TODO: You may have to modify input instructions, 
		//       possibly by enclosing Console.ReadLine() calls with 
		//       Parse methods according to the variable type, e.g.: 
		//          i = int.Parse(Console.ReadLine()); 

		fileNo = -10;
		do {
			Console.Write("Name/path of the number file"); file_name = Console.ReadLine();
			fileNo = StructorizerFileAPI.fileOpen(file_name);
		} while (! (fileNo > 0 || file_name == ""));
		if (fileNo > 0) {
			StructorizerFileAPI.fileClose(fileNo);
			Console.Write("number of intervals"); nIntervals = Console.ReadLine();
			// Initialize the interval counters 
			for (int k = 0; k <= nIntervals-1; k += (1)) {
				count[k] = 0;
			}
			// Index of the most populated interval 
			kMaxCount = 0;
			numberArray = new ???[]{};
			nObtained = 0;
			try {
				nObtained = FileApiGroupTest_arrz.readNumbers(file_name, numberArray, 10000);
			}
			catch(Exception ex6d5a8719) {
				string failure = ex6d5a8719.ToString()
				Console.WriteLine(failure);
			}
			if (nObtained > 0) {
				??? min = numberArray[0];
				??? max = numberArray[0];
				for (int i = 1; i <= nObtained-1; i += (1)) {
					if (numberArray[i] < min) {
						min = numberArray[i];
					}
					else if (numberArray[i] > max) {
						max = numberArray[i];
					}
				}
				// Interval width 
				??? width = (max - min) * 1.0 / nIntervals;
				for (int i = 0; i <= nObtained - 1; i += (1)) {
					??? value = numberArray[i];
					int k = 1;
					while (k < nIntervals && value > min + k * width) {
						k = k + 1;
					}
					count[k-1] = count[k-1] + 1;
					if (count[k-1] > count[kMaxCount]) {
						kMaxCount = k-1;
					}
				}
				FileApiGroupTest_arrz.drawBarChart(count, nIntervals);
				Console.Write("Interval with max count: "); Console.Write(kMaxCount); Console.Write(" ("); Console.Write(count[kMaxCount]); Console.WriteLine(")");
				for (k = 0; k <= nIntervals-1; k += (1)) {
					Console.Write(count[k]); Console.Write(" numbers in interval "); Console.Write(k); Console.Write(" ("); Console.Write(min + k * width); Console.Write(" ... "); Console.Write(min + (k+1) * width); Console.WriteLine(")");
				}
			}
			else {
				Console.WriteLine("No numbers read.");
			}
		}
	}

}

// ======= 8< =========================================================== 

// Generated by Structorizer 3.32-20 

// Copyright (C) 2020-03-21 Kay Gürtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

public class generateRandomNumberFile {
	/// <summary>
	/// Writes a text file with name fileName, consisting of count lines, each containing
	/// a random number in the range from minVal to maxVal (both inclusive).
	/// Returns either the number of written number if all went well or some potential
	/// error code if something went wrong.
	/// </summary>
	/// <param name="fileName"> TODO </param>
	/// <param name="count"> TODO </param>
	/// <param name="minVal"> TODO </param>
	/// <param name="maxVal"> TODO </param>
	/// <return> TODO </return>
	public static int generateRandomNumberFile(string fileName, int count, int minVal, int maxVal) {
		initialize_FileApiGroupTest_arrz();
		// TODO: Check and accomplish variable declarations: 
		int fileNo;
		Random randGen = new Random();

		fileNo = StructorizerFileAPI.fileCreate(fileName);
		if (fileNo <= 0) {
			return fileNo;
		}
		try {
			for (int k = 1; k <= count; k += (1)) {
				??? number = minVal + randGen.Next(maxVal - minVal + 1);
				StructorizerFileAPI.fileWriteLine(fileNo, number);
			}
		}
		catch(Exception ex4645d92a) {
			string error = ex4645d92a.ToString()
			Console.WriteLine(error);
			return -7;
		}
		finally {
			StructorizerFileAPI.fileClose(fileNo);
		}
		return count;
	}

}
