10 REM Concept and lisp implementation published by Joseph Weizenbaum (MIT): 
20 REM "ELIZA - A Computer Program For the Study of Natural Language Communication Between Man and Machine" - In: 
30 REM Computational Linguistis 1(1966)9, pp. 36-45 
40 REM Revision history: 
50 REM 2016-10-06 Initial version 
60 REM 2017-03-29 Two diagrams updated (comments translated to English) 
70 REM 2017-03-29 More keywords and replies added 
80 REM 2019-03-14 Replies and mapping reorganised for easier maintenance 
90 REM 2019-03-15 key map joined from keyword array and index map 
100 REM 2019-03-28 Keyword "bot" inserted (same reply ring as "computer") 
110 REM Generated by Structorizer 3.32-26 
120 
130 REM Copyright (C) 2018-05-14 ??? 
140 REM License: GPLv3-link 
150 REM GNU General Public License (V 3) 
160 REM https://www.gnu.org/licenses/gpl.html 
170 REM http://www.gnu.de/documents/gpl.de.html 
180 
190 REM  
200 REM program ELIZA
210 REM TODO: add the respective type suffixes to your variable names if required 
220 
230 TYPE KeyMapEntry
240   keyword AS String
250   index AS Integer
260 END TYPE
270 
280 DIM replies(,) AS String
290 DIM reflexions(,1) AS String
300 DIM byePhrases(,1) AS String
310 DIM keyMap() AS KeyMapEntry
320 DIM offsets() AS Integer
330 DIM history(5) AS ???
340 DIM findInfo(1) AS integer
350 DIM entry AS KeyMapEntry
360 REM  
370 REM Title information 
380 PRINT "************* ELIZA **************"
390 PRINT "* Original design by J. Weizenbaum"
400 PRINT "**********************************"
410 PRINT "* Adapted for Basic on IBM PC by"
420 PRINT "* - Patricia Danielson"
430 PRINT "* - Paul Hashfield"
440 PRINT "**********************************"
450 PRINT "* Adapted for Structorizer by"
460 PRINT "* - Kay GÃ¼rtzig / FH Erfurt 2016"
470 PRINT "* Version: 2.2 (2019-03-28)"
480 PRINT "**********************************"
490 REM Stores the last five inputs of the user in a ring buffer, 
500 REM the first element is the current insertion index 
510 LET history(0) = 0
520 LET history(1) = ""
530 LET history(2) = ""
540 LET history(3) = ""
550 LET history(4) = ""
560 LET history(5) = ""
570 LET replies = setupReplies()
580 LET reflexions = setupReflexions()
590 LET byePhrases = setupGoodByePhrases()
600 LET keyMap = setupKeywords()
610 LET offsets(length(keyMap)-1) = 0
620 LET isGone = false
630 REM Starter 
640 PRINT "Hi! I\'m your new therapist. My name is Eliza. What\'s your problem?"
650 DO
660   INPUT userInput
670   REM Converts the input to lowercase, cuts out interpunctation 
680   REM and pads the string 
690   LET userInput = normalizeInput(userInput)
700   LET isGone = checkGoodBye(userInput, byePhrases)
710   IF NOT isGone THEN
720     LET reply = "Please don\'t repeat yourself!"
730     LET isRepeated = checkRepetition(history, userInput)
740     IF NOT isRepeated THEN
750       LET findInfo = findKeyword(keyMap, userInput)
760       LET keyIndex = findInfo(0)
770       IF keyIndex < 0 THEN
780         REM Should never happen... 
790         LET keyIndex = length(keyMap)-1
800       END IF
810       LET entry = keyMap(keyIndex)
820       REM Variable part of the reply 
830       LET varPart = ""
840       IF length(entry.keyword) > 0 THEN
850         LET varPart = conjugateStrings(userInput, entry.keyword, findInfo(1), reflexions)
860       END IF
870       LET replyRing = replies(entry.index)
880       LET reply = replyRing(offsets(keyIndex))
890       LET offsets(keyIndex) = (offsets(keyIndex) + 1) % length(replyRing)
900       LET posAster = pos("*", reply)
910       IF posAster > 0 THEN
920         IF varPart = " " THEN
930           LET reply = "You will have to elaborate more for me to help you."
940         ELSE
950           delete(reply, posAster, 1)
960           insert(varPart, reply, posAster)
970         END IF
980       END IF
990       LET reply = adjustSpelling(reply)
1000     END IF
1010     PRINT reply
1020   END IF
1030 LOOP UNTIL isGone
1040 END
1050 REM  
1060 REM Cares for correct letter case among others 
1070 REM TODO: Add type-specific suffixes where necessary! 
1080 FUNCTION adjustSpelling(sentence AS String) AS String
1090   REM TODO: add the respective type suffixes to your variable names if required 
1100   REM  
1110   REM  
1120   LET result = sentence
1130   LET position = 1
1140   DO WHILE (position <= length(sentence)) AND (copy(sentence, position, 1) = " ")
1150     LET position = position + 1
1160   LOOP
1170   IF position <= length(sentence) THEN
1180     LET start = copy(sentence, 1, position)
1190     delete(result, 1, position)
1200     insert(uppercase(start), result, 1)
1210   END IF
1220   DIM array2de1525b() AS String = {" i ", " i\'"}
1230   FOR EACH word IN array2de1525b
1240     LET position = pos(word, result)
1250     DO WHILE position > 0
1260       delete(result, position+1, 1)
1270       insert("I", result, position+1)
1280       LET position = pos(word, result)
1290     LOOP
1300   NEXT word
1310   RETURN result
1320 END FUNCTION
1330 REM  
1340 REM Checks whether the given text contains some kind of 
1350 REM good-bye phrase inducing the end of the conversation 
1360 REM and if so writes a correspding good-bye message and 
1370 REM returns true, otherwise false 
1380 REM TODO: Add type-specific suffixes where necessary! 
1390 FUNCTION checkGoodBye(text AS String, phrases AS String(50,0 TO 1)) AS boolean
1400   REM TODO: add the respective type suffixes to your variable names if required 
1410   REM  
1420   REM  
1430   FOR EACH pair IN phrases
1440     IF pos(pair(0), text) > 0 THEN
1450       LET saidBye = true
1460       PRINT pair(1)
1470       RETURN true
1480     END IF
1490   NEXT pair
1500   return false
1510 END FUNCTION
1520 REM  
1530 REM Checks whether newInput has occurred among the last 
1540 REM length(history) - 1 input strings and updates the history 
1550 REM TODO: Add type-specific suffixes where necessary! 
1560 FUNCTION checkRepetition(history AS array, newInput AS String) AS boolean
1570   REM TODO: add the respective type suffixes to your variable names if required 
1580   REM  
1590   REM  
1600   LET hasOccurred = false
1610   IF length(newInput) > 4 THEN
1620     LET currentIndex = history(0);
1630     FOR i = 1 TO length(history)-1
1640       IF newInput = history(i) THEN
1650         LET hasOccurred = true
1660       END IF
1670     NEXT i
1680     LET history(history(0)+1) = newInput
1690     LET history(0) = (history(0) + 1) % (length(history) - 1)
1700   END IF
1710   return hasOccurred
1720 END FUNCTION
1730 REM  
1740 REM TODO: Add type-specific suffixes where necessary! 
1750 FUNCTION conjugateStrings(sentence AS String, key AS String, keyPos AS integer, flexions AS String(50,0 TO 1)) AS String
1760   REM TODO: add the respective type suffixes to your variable names if required 
1770   REM  
1780   REM  
1790   LET result = " " + copy(sentence, keyPos + length(key), length(sentence)) + " "
1800   FOR EACH pair IN flexions
1810     LET left = ""
1820     LET right = result
1830     LET position = pos(pair(0), right)
1840     DO WHILE position > 0
1850       LET left = left + copy(right, 1, position-1) + pair(1)
1860       LET right = copy(right, position + length(pair(0)), length(right))
1870       LET position = pos(pair(0), right)
1880     LOOP
1890     LET result = left + right
1900   NEXT pair
1910   REM Eliminate multiple spaces 
1920   LET position = pos("  ", result)
1930   DO WHILE position > 0
1940     LET result = copy(result, 1, position-1) + copy(result, position+1, length(result))
1950     LET position = pos("  ", result)
1960   LOOP
1970   RETURN result
1980 END FUNCTION
1990 REM  
2000 REM Converts the sentence to lowercase, eliminates all 
2010 REM interpunction (i.e. ',', '.', ';'), and pads the 
2020 REM sentence among blanks 
2030 REM TODO: Add type-specific suffixes where necessary! 
2040 FUNCTION normalizeInput(sentence AS String) AS String
2050   REM TODO: add the respective type suffixes to your variable names if required 
2060   REM  
2070   REM  
2080   LET sentence = lowercase(sentence)
2090   REM TODO: Specify an appropriate element type for the array! 
2100   DIM array65006eba() AS FIXME_65006eba = {'.', ',', ';', '!', '?'}
2110   FOR EACH symbol IN array65006eba
2120     LET position = pos(symbol, sentence)
2130     DO WHILE position > 0
2140       LET sentence = copy(sentence, 1, position-1) + copy(sentence, position+1, length(sentence))
2150       LET position = pos(symbol, sentence)
2160     LOOP
2170   NEXT symbol
2180   LET result = " " + sentence + " "
2190   RETURN result
2200 END FUNCTION
2210 REM  
2220 REM TODO: Add type-specific suffixes where necessary! 
2230 FUNCTION setupGoodByePhrases() AS String(50,0 TO 1)
2240   REM TODO: add the respective type suffixes to your variable names if required 
2250   REM  
2260   DIM phrases(,1) AS String
2270   REM  
2280   LET phrases(0)(0) = " shut"
2290   LET phrases(0)(1) = "Okay. If you feel that way I\'ll shut up. ... Your choice."
2300   LET phrases(1)(0) = "bye"
2310   LET phrases(1)(1) = "Well, let\'s end our talk for now. See you later. Bye."
2320   return phrases
2330 END FUNCTION
2340 REM  
2350 REM Returns an array of pairs of mutualy substitutable  
2360 REM TODO: Add type-specific suffixes where necessary! 
2370 FUNCTION setupReflexions() AS String(50,0 TO 1)
2380   REM TODO: add the respective type suffixes to your variable names if required 
2390   REM  
2400   DIM reflexions(,1) AS String
2410   REM  
2420   LET reflexions(0)(0) = " are "
2430   LET reflexions(0)(1) = " am "
2440   LET reflexions(1)(0) = " were "
2450   LET reflexions(1)(1) = " was "
2460   LET reflexions(2)(0) = " you "
2470   LET reflexions(2)(1) = " I "
2480   LET reflexions(3)(0) = " your"
2490   LET reflexions(3)(1) = " my"
2500   LET reflexions(4)(0) = " i\'ve "
2510   LET reflexions(4)(1) = " you\'ve "
2520   LET reflexions(5)(0) = " i\'m "
2530   LET reflexions(5)(1) = " you\'re "
2540   LET reflexions(6)(0) = " me "
2550   LET reflexions(6)(1) = " you "
2560   LET reflexions(7)(0) = " my "
2570   LET reflexions(7)(1) = " your "
2580   LET reflexions(8)(0) = " i "
2590   LET reflexions(8)(1) = " you "
2600   LET reflexions(9)(0) = " am "
2610   LET reflexions(9)(1) = " are "
2620   return reflexions
2630 END FUNCTION
2640 REM  
2650 REM This routine sets up the reply rings addressed by the key words defined in 
2660 REM routine `setupKeywords()Â´ and mapped hitherto by the cross table defined 
2670 REM in `setupMapping()Â´ 
2680 REM TODO: Add type-specific suffixes where necessary! 
2690 FUNCTION setupReplies() AS String(50,50)
2700   REM TODO: add the respective type suffixes to your variable names if required 
2710   REM  
2720   DIM setupReplies(,) AS String
2730   DIM replies(,) AS String
2740   REM  
2750   REM We start with the highest index for performance reasons 
2760   REM (is to avoid frequent array resizing) 
2770   LET replies(29)(0) = "Say, do you have any psychological problems?"
2780   LET replies(29)(1) = "What does that suggest to you?"
2790   LET replies(29)(2) = "I see."
2800   LET replies(29)(3) = "I'm not sure I understand you fully."
2810   LET replies(29)(4) = "Come come elucidate your thoughts."
2820   LET replies(29)(5) = "Can you elaborate on that?"
2830   LET replies(29)(6) = "That is quite interesting."
2840   LET replies(0)(0) = "Don't you believe that I can*?"
2850   LET replies(0)(1) = "Perhaps you would like to be like me?"
2860   LET replies(0)(2) = "You want me to be able to*?"
2870   LET replies(1)(0) = "Perhaps you don't want to*?"
2880   LET replies(1)(1) = "Do you want to be able to*?"
2890   LET replies(2)(0) = "What makes you think I am*?"
2900   LET replies(2)(1) = "Does it please you to believe I am*?"
2910   LET replies(2)(2) = "Perhaps you would like to be*?"
2920   LET replies(2)(3) = "Do you sometimes wish you were*?"
2930   LET replies(3)(0) = "Don't you really*?"
2940   LET replies(3)(1) = "Why don't you*?"
2950   LET replies(3)(2) = "Do you wish to be able to*?"
2960   LET replies(3)(3) = "Does that trouble you*?"
2970   LET replies(4)(0) = "Do you often feel*?"
2980   LET replies(4)(1) = "Are you afraid of feeling*?"
2990   LET replies(4)(2) = "Do you enjoy feeling*?"
3000   LET replies(5)(0) = "Do you really believe I don't*?"
3010   LET replies(5)(1) = "Perhaps in good time I will*."
3020   LET replies(5)(2) = "Do you want me to*?"
3030   LET replies(6)(0) = "Do you think you should be able to*?"
3040   LET replies(6)(1) = "Why can't you*?"
3050   LET replies(7)(0) = "Why are you interested in whether or not I am*?"
3060   LET replies(7)(1) = "Would you prefer if I were not*?"
3070   LET replies(7)(2) = "Perhaps in your fantasies I am*?"
3080   LET replies(8)(0) = "How do you know you can't*?"
3090   LET replies(8)(1) = "Have you tried?"
3100   LET replies(8)(2) = "Perhaps you can now*."
3110   LET replies(9)(0) = "Did you come to me because you are*?"
3120   LET replies(9)(1) = "How long have you been*?"
3130   LET replies(9)(2) = "Do you believe it is normal to be*?"
3140   LET replies(9)(3) = "Do you enjoy being*?"
3150   LET replies(10)(0) = "We were discussing you--not me."
3160   LET replies(10)(1) = "Oh, I*."
3170   LET replies(10)(2) = "You're not really talking about me, are you?"
3180   LET replies(11)(0) = "What would it mean to you if you got*?"
3190   LET replies(11)(1) = "Why do you want*?"
3200   LET replies(11)(2) = "Suppose you soon got*..."
3210   LET replies(11)(3) = "What if you never got*?"
3220   LET replies(11)(4) = "I sometimes also want*."
3230   LET replies(12)(0) = "Why do you ask?"
3240   LET replies(12)(1) = "Does that question interest you?"
3250   LET replies(12)(2) = "What answer would please you the most?"
3260   LET replies(12)(3) = "What do you think?"
3270   LET replies(12)(4) = "Are such questions on your mind often?"
3280   LET replies(12)(5) = "What is it that you really want to know?"
3290   LET replies(12)(6) = "Have you asked anyone else?"
3300   LET replies(12)(7) = "Have you asked such questions before?"
3310   LET replies(12)(8) = "What else comes to mind when you ask that?"
3320   LET replies(13)(0) = "Names don't interest me."
3330   LET replies(13)(1) = "I don't care about names -- please go on."
3340   LET replies(14)(0) = "Is that the real reason?"
3350   LET replies(14)(1) = "Don't any other reasons come to mind?"
3360   LET replies(14)(2) = "Does that reason explain anything else?"
3370   LET replies(14)(3) = "What other reasons might there be?"
3380   LET replies(15)(0) = "Please don't apologize!"
3390   LET replies(15)(1) = "Apologies are not necessary."
3400   LET replies(15)(2) = "What feelings do you have when you apologize?"
3410   LET replies(15)(3) = "Don't be so defensive!"
3420   LET replies(16)(0) = "What does that dream suggest to you?"
3430   LET replies(16)(1) = "Do you dream often?"
3440   LET replies(16)(2) = "What persons appear in your dreams?"
3450   LET replies(16)(3) = "Are you disturbed by your dreams?"
3460   LET replies(17)(0) = "How do you do ...please state your problem."
3470   LET replies(18)(0) = "You don't seem quite certain."
3480   LET replies(18)(1) = "Why the uncertain tone?"
3490   LET replies(18)(2) = "Can't you be more positive?"
3500   LET replies(18)(3) = "You aren't sure?"
3510   LET replies(18)(4) = "Don't you know?"
3520   LET replies(19)(0) = "Are you saying no just to be negative?"
3530   LET replies(19)(1) = "You are being a bit negative."
3540   LET replies(19)(2) = "Why not?"
3550   LET replies(19)(3) = "Are you sure?"
3560   LET replies(19)(4) = "Why no?"
3570   LET replies(20)(0) = "Why are you concerned about my*?"
3580   LET replies(20)(1) = "What about your own*?"
3590   LET replies(21)(0) = "Can you think of a specific example?"
3600   LET replies(21)(1) = "When?"
3610   LET replies(21)(2) = "What are you thinking of?"
3620   LET replies(21)(3) = "Really, always?"
3630   LET replies(22)(0) = "Do you really think so?"
3640   LET replies(22)(1) = "But you are not sure you*?"
3650   LET replies(22)(2) = "Do you doubt you*?"
3660   LET replies(23)(0) = "In what way?"
3670   LET replies(23)(1) = "What resemblance do you see?"
3680   LET replies(23)(2) = "What does the similarity suggest to you?"
3690   LET replies(23)(3) = "What other connections do you see?"
3700   LET replies(23)(4) = "Could there really be some connection?"
3710   LET replies(23)(5) = "How?"
3720   LET replies(23)(6) = "You seem quite positive."
3730   LET replies(24)(0) = "Are you sure?"
3740   LET replies(24)(1) = "I see."
3750   LET replies(24)(2) = "I understand."
3760   LET replies(25)(0) = "Why do you bring up the topic of friends?"
3770   LET replies(25)(1) = "Do your friends worry you?"
3780   LET replies(25)(2) = "Do your friends pick on you?"
3790   LET replies(25)(3) = "Are you sure you have any friends?"
3800   LET replies(25)(4) = "Do you impose on your friends?"
3810   LET replies(25)(5) = "Perhaps your love for friends worries you."
3820   LET replies(26)(0) = "Do computers worry you?"
3830   LET replies(26)(1) = "Are you talking about me in particular?"
3840   LET replies(26)(2) = "Are you frightened by machines?"
3850   LET replies(26)(3) = "Why do you mention computers?"
3860   LET replies(26)(4) = "What do you think machines have to do with your problem?"
3870   LET replies(26)(5) = "Don't you think computers can help people?"
3880   LET replies(26)(6) = "What is it about machines that worries you?"
3890   LET replies(27)(0) = "Do you sometimes feel uneasy without a smartphone?"
3900   LET replies(27)(1) = "Have you had these phantasies before?"
3910   LET replies(27)(2) = "Does the world seem more real for you via apps?"
3920   LET replies(28)(0) = "Tell me more about your family."
3930   LET replies(28)(1) = "Who else in your family*?"
3940   LET replies(28)(2) = "What does family relations mean for you?"
3950   LET replies(28)(3) = "Come on, How old are you?"
3960   LET setupReplies = replies
3970   RETURN setupReplies
3980 END FUNCTION
3990 REM  
4000 REM Looks for the occurrence of the first of the strings 
4010 REM contained in keywords within the given sentence (in 
4020 REM array order). 
4030 REM Returns an array of 
4040 REM 0: the index of the first identified keyword (if any, otherwise -1), 
4050 REM 1: the position inside sentence (0 if not found) 
4060 REM TODO: Add type-specific suffixes where necessary! 
4070 FUNCTION findKeyword(CONST keyMap AS KeyMapEntry(50), sentence AS String) AS integer(0 TO 1)
4080   REM TODO: add the respective type suffixes to your variable names if required 
4090   REM  
4100   DIM result(1) AS Integer
4110   DIM entry AS KeyMapEntry
4120   REM  
4130   REM Contains the index of the keyword and its position in sentence 
4140   LET result(0) = -1
4150   LET result(1) = 0
4160   LET i = 0
4170   DO WHILE (result(0) < 0) AND (i < length(keyMap))
4180     LET entry = keyMap(i)
4190     LET position = pos(entry.keyword, sentence)
4200     IF position > 0 THEN
4210       LET result(0) = i
4220       LET result(1) = position
4230     END IF
4240     LET i = i+1
4250   LOOP
4260   RETURN result
4270 END FUNCTION
4280 REM  
4290 REM The lower the index the higher the rank of the keyword (search is sequential). 
4300 REM The index of the first keyword found in a user sentence maps to a respective 
4310 REM reply ring as defined in `setupReplies()Â´. 
4320 REM TODO: Add type-specific suffixes where necessary! 
4330 FUNCTION setupKeywords() AS KeyMapEntry(50)
4340   REM TODO: add the respective type suffixes to your variable names if required 
4350   REM  
4360   DIM keywords() AS KeyMapEntry
4370   REM  
4380   REM The empty key string (last entry) is the default clause - will always be found 
4390   LET keywords(39).keyword = ""
4400   LET keywords(39).index = 29
4410   LET keywords(0).keyword = "can you "
4420   LET keywords(0).index = 0
4430   LET keywords(1).keyword = "can i "
4440   LET keywords(1).index = 1
4450   LET keywords(2).keyword = "you are "
4460   LET keywords(2).index = 2
4470   LET keywords(3).keyword = "you\'re "
4480   LET keywords(3).index = 2
4490   LET keywords(4).keyword = "i don't "
4500   LET keywords(4).index = 3
4510   LET keywords(5).keyword = "i feel "
4520   LET keywords(5).index = 4
4530   LET keywords(6).keyword = "why don\'t you "
4540   LET keywords(6).index = 5
4550   LET keywords(7).keyword = "why can\'t i "
4560   LET keywords(7).index = 6
4570   LET keywords(8).keyword = "are you "
4580   LET keywords(8).index = 7
4590   LET keywords(9).keyword = "i can\'t "
4600   LET keywords(9).index = 8
4610   LET keywords(10).keyword = "i am "
4620   LET keywords(10).index = 9
4630   LET keywords(11).keyword = "i\'m "
4640   LET keywords(11).index = 9
4650   LET keywords(12).keyword = "you "
4660   LET keywords(12).index = 10
4670   LET keywords(13).keyword = "i want "
4680   LET keywords(13).index = 11
4690   LET keywords(14).keyword = "what "
4700   LET keywords(14).index = 12
4710   LET keywords(15).keyword = "how "
4720   LET keywords(15).index = 12
4730   LET keywords(16).keyword = "who "
4740   LET keywords(16).index = 12
4750   LET keywords(17).keyword = "where "
4760   LET keywords(17).index = 12
4770   LET keywords(18).keyword = "when "
4780   LET keywords(18).index = 12
4790   LET keywords(19).keyword = "why "
4800   LET keywords(19).index = 12
4810   LET keywords(20).keyword = "name "
4820   LET keywords(20).index = 13
4830   LET keywords(21).keyword = "cause "
4840   LET keywords(21).index = 14
4850   LET keywords(22).keyword = "sorry "
4860   LET keywords(22).index = 15
4870   LET keywords(23).keyword = "dream "
4880   LET keywords(23).index = 16
4890   LET keywords(24).keyword = "hello "
4900   LET keywords(24).index = 17
4910   LET keywords(25).keyword = "hi "
4920   LET keywords(25).index = 17
4930   LET keywords(26).keyword = "maybe "
4940   LET keywords(26).index = 18
4950   LET keywords(27).keyword = " no"
4960   LET keywords(27).index = 19
4970   LET keywords(28).keyword = "your "
4980   LET keywords(28).index = 20
4990   LET keywords(29).keyword = "always "
5000   LET keywords(29).index = 21
5010   LET keywords(30).keyword = "think "
5020   LET keywords(30).index = 22
5030   LET keywords(31).keyword = "alike "
5040   LET keywords(31).index = 23
5050   LET keywords(32).keyword = "yes "
5060   LET keywords(32).index = 24
5070   LET keywords(33).keyword = "friend "
5080   LET keywords(33).index = 25
5090   LET keywords(34).keyword = "computer"
5100   LET keywords(34).index = 26
5110   LET keywords(35).keyword = "bot "
5120   LET keywords(35).index = 26
5130   LET keywords(36).keyword = "smartphone"
5140   LET keywords(36).index = 27
5150   LET keywords(37).keyword = "father "
5160   LET keywords(37).index = 28
5170   LET keywords(38).keyword = "mother "
5180   LET keywords(38).index = 28
5190   return keywords
5200 END FUNCTION
