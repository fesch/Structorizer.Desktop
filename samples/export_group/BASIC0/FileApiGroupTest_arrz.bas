10 REM NOTE: 
20 REM This first module of the file is a library module providing common resources 
30 REM for the following modules, which are separated by comment lines like 
40 REM "======= 8< =======...". 
50 REM You may have to cut this file apart at these lines in order to get the parts 
60 REM running, since the following modules may form sort of mutually independent 
70 REM applications or programs the coexistence of which in a single file might not 
80 REM be sensible. 
90 REM Generated by Structorizer 3.32-26 
100 
110 REM Copyright (C) 2025-02-08 Kay Gürtzig 
120 REM License: GPLv3-link 
130 REM GNU General Public License (V 3) 
140 REM https://www.gnu.org/licenses/gpl.html 
150 REM http://www.gnu.de/documents/gpl.de.html 
160 
170 REM  
180 REM TODO: Add type-specific suffixes where necessary! 
190 SUB FileApiGroupTest_arrz()
200 REM TODO: add the respective type suffixes to your variable names if required 
210 REM  
220 END
230 
240 REM  
250 REM Draws a bar chart from the array "values" of size nValues. 
260 REM Turtleizer must be activated and will scale the chart into a square of 
270 REM 500 x 500 pixels 
280 REM Note: The function is not robust against empty array or totally equal values. 
290 
300 REM Copyright (C) 2020-03-22 Kay Gürtzig 
310 REM License: GPLv3-link 
320 
330 REM TODO: Add type-specific suffixes where necessary! 
340 SUB drawBarChart(values AS double(50), nValues)
350   REM TODO: add the respective type suffixes to your variable names if required 
360   REM  
370   REM  
380   REM Used range of the Turtleizer screen 
390   LET xSize = 500
400   LET ySize = 500
410   LET kMin = 0
420   LET kMax = 0
430   FOR k = 1 TO nValues-1
440     IF values(k) > values(kMax) THEN
450       LET kMax = k
460     ELSE
470       IF values(k) < values(kMin) THEN
480         LET kMin = k
490       END IF
500     END IF
510   NEXT k
520   LET valMin = values(kMin)
530   LET valMax = values(kMax)
540   LET yScale = valMax * 1.0 / (ySize - 1)
550   LET yAxis = ySize - 1
560   IF valMin < 0 THEN
570     IF valMax > 0 THEN
580       LET yAxis = valMax * ySize * 1.0 / (valMax - valMin)
590       LET yScale = (valMax - valMin) * 1.0 / (ySize - 1)
600     ELSE
610       LET yAxis = 1
620       LET yScale = valMin * 1.0 / (ySize - 1)
630     END IF
640   END IF
650   REM draw coordinate axes 
660   gotoXY(1, ySize - 1)
670   forward(ySize -1) : REM color = ffffff
680   penUp()
690   backward(yAxis) : REM color = ffffff
700   right(90)
710   penDown()
720   forward(xSize -1) : REM color = ffffff
730   penUp()
740   backward(xSize-1) : REM color = ffffff
750   LET stripeWidth = xSize / nValues
760   FOR k = 0 TO nValues-1
770     LET stripeHeight = values(k) * 1.0 / yScale
780     SELECT CASE k % 3
790       CASE 0
800         setPenColor(255,0,0)
810       CASE 1
820         setPenColor(0, 255,0)
830       CASE 2
840         setPenColor(0, 0, 255)
850     END SELECT
860     fd(1) : REM color = ffffff
870     left(90)
880     penDown()
890     fd(stripeHeight) : REM color = ffffff
900     right(90)
910     fd(stripeWidth - 1) : REM color = ffffff
920     right(90)
930     forward(stripeHeight) : REM color = ffffff
940     left(90)
950     penUp()
960   NEXT k
970 END SUB
980 
990 REM  
1000 REM Writes a text file with name fileName, consisting of count lines, each containing 
1010 REM a random number in the range from minVal to maxVal (both inclusive). 
1020 REM Returns either the number of written number if all went well or some potential 
1030 REM error code if something went wrong. 
1040 
1050 REM Copyright (C) 2020-03-21 Kay Gürtzig 
1060 REM License: GPLv3-link 
1070 
1080 REM TODO: Add type-specific suffixes where necessary! 
1090 FUNCTION generateRandomNumberFile(fileName AS String, count AS Integer, minVal AS integer, maxVal AS integer) AS integer
1100   REM TODO: add the respective type suffixes to your variable names if required 
1110   REM  
1120   REM  
1130   LET fileNo = fileCreate(fileName)
1140   IF fileNo <= 0 THEN
1150     RETURN fileNo
1160   END IF
1170   ON ERROR GOTO 1240
1180   FOR k = 1 TO count
1190     LET number = minVal + random(maxVal - minVal + 1)
1200     fileWriteLine(fileNo, number)
1210   NEXT k
1220   GOTO 1270
1230   REM Start of error handler, FIXME: variable 'error' should conatain error info ... 
1240     PRINT error
1250     RETURN -7
1260   REM End of error handler, resume here ... 
1270   ON ERROR GOTO 0
1280   fileClose(fileNo)
1290   RETURN count
1300 END FUNCTION
1310 
1320 REM  
1330 REM Tries to read as many integer values as possible upto maxNumbers 
1340 REM from file fileName into the given array numbers. 
1350 REM Returns the number of the actually read numbers. May cause an exception. 
1360 
1370 REM Copyright (C) 2020-03-21 Kay Gürtzig 
1380 REM License: GPLv3-link 
1390 
1400 REM TODO: Add type-specific suffixes where necessary! 
1410 FUNCTION readNumbers(fileName AS String, numbers AS integer(50), maxNumbers AS integer) AS integer
1420   REM TODO: add the respective type suffixes to your variable names if required 
1430   REM  
1440   REM  
1450   LET nNumbers = 0
1460   LET fileNo = fileOpen(fileName)
1470   IF fileNo <= 0 THEN
1480     REM FIXME: Only a number is allowed as parameter: 
1490     ERROR "File could not be opened!"
1500   END IF
1510   ON ERROR GOTO 1590
1520   DO WHILE NOT fileEOF(fileNo) AND nNumbers < maxNumbers
1530     LET number = fileReadInt(fileNo)
1540     LET numbers(nNumbers) = number
1550     LET nNumbers = nNumbers + 1
1560   LOOP
1570   GOTO 1620
1580   REM Start of error handler, FIXME: variable 'error' should conatain error info ... 
1590     REM FIXME: Only a number is allowed as parameter: 
1600     ERROR 
1610   REM End of error handler, resume here ... 
1620   ON ERROR GOTO 0
1630   fileClose(fileNo)
1640   RETURN nNumbers
1650 END FUNCTION
1660 
1670 REM ======= 8< =========================================================== 
1680 
1690 REM Computes the sum and average of the numbers read from a user-specified 
1700 REM text file (which might have been created via generateRandomNumberFile(4)). 
1710 REM  
1720 REM This program is part of an arrangement used to test group code export (issue 
1730 REM #828) with FileAPI dependency. 
1740 REM The input check loop has been disabled (replaced by a simple unchecked input 
1750 REM instruction) in order to test the effect of indirect FileAPI dependency (only the 
1760 REM called subroutine directly requires FileAPI now). 
1770 REM Generated by Structorizer 3.32-26 
1780 
1790 REM Copyright (C) 2020-03-21 Kay Gürtzig 
1800 REM License: GPLv3-link 
1810 REM GNU General Public License (V 3) 
1820 REM https://www.gnu.org/licenses/gpl.html 
1830 REM http://www.gnu.de/documents/gpl.de.html 
1840 
1850 REM  
1860 REM program ComputeSum
1870 REM TODO: add the respective type suffixes to your variable names if required 
1880 DIM values() AS ???
1890 REM  
1900 LET fileNo = 1000
1910 REM Disable this if you enable the loop below! 
1920 PRINT "Name/path of the number file"; : INPUT file_name
1930 REM If you enable this loop, then the preceding input instruction is to be disabled 
1940 REM and the fileClose instruction in the alternative below is to be enabled. 
1950 REM DO 
1960 REM   PRINT "Name/path of the number file"; : INPUT file_name 
1970 REM   LET fileNo = fileOpen(file_name) 
1980 REM LOOP UNTIL fileNo > 0 OR file_name = "" 
1990 IF fileNo > 0 THEN
2000   REM This should be enabled if the input check loop above gets enabled. 
2010 REM   fileClose(fileNo) 
2020   LET nValues = 0
2030   ON ERROR GOTO 2070
2040   LET nValues = readNumbers(file_name, values, 1000)
2050   GOTO 2100
2060   REM Start of error handler, FIXME: variable 'failure' should conatain error info ... 
2070     PRINT failure
2080     STOP
2090   REM End of error handler, resume here ... 
2100   ON ERROR GOTO 0
2110   LET sum = 0.0
2120   FOR k = 0 TO nValues-1
2130     LET sum = sum + values(k)
2140   NEXT k
2150   PRINT "sum = "; sum
2160   PRINT "average = "; sum / nValues
2170 END IF
2180 END
2190 
2200 REM ======= 8< =========================================================== 
2210 
2220 REM Reads a random number file and draws a histogram accotrding to the 
2230 REM user specifications 
2240 REM Generated by Structorizer 3.32-26 
2250 
2260 REM Copyright (C) 2020-03-21 Kay Gürtzig 
2270 REM License: GPLv3-link 
2280 REM GNU General Public License (V 3) 
2290 REM https://www.gnu.org/licenses/gpl.html 
2300 REM http://www.gnu.de/documents/gpl.de.html 
2310 
2320 REM  
2330 REM program DrawRandomHistogram
2340 REM TODO: add the respective type suffixes to your variable names if required 
2350 DIM numberArray() AS ???
2360 DIM count() AS Integer
2370 REM  
2380 LET fileNo = -10
2390 DO
2400   PRINT "Name/path of the number file"; : INPUT file_name
2410   LET fileNo = fileOpen(file_name)
2420 LOOP UNTIL fileNo > 0 OR file_name = ""
2430 IF fileNo > 0 THEN
2440   fileClose(fileNo)
2450   PRINT "number of intervals"; : INPUT nIntervals
2460   REM Initialize the interval counters 
2470   FOR k = 0 TO nIntervals-1
2480     LET count(k) = 0
2490   NEXT k
2500   REM Index of the most populated interval 
2510   LET kMaxCount = 0
2520   LET nObtained = 0
2530   ON ERROR GOTO 2570
2540   LET nObtained = readNumbers(file_name, numberArray, 10000)
2550   GOTO 2590
2560   REM Start of error handler, FIXME: variable 'failure' should conatain error info ... 
2570     PRINT failure
2580   REM End of error handler, resume here ... 
2590   ON ERROR GOTO 0
2600   IF nObtained > 0 THEN
2610     LET min = numberArray(0)
2620     LET max = numberArray(0)
2630     FOR i = 1 TO nObtained-1
2640       IF numberArray(i) < min THEN
2650         LET min = numberArray(i)
2660       ELSE
2670         IF numberArray(i) > max THEN
2680           LET max = numberArray(i)
2690         END IF
2700       END IF
2710     NEXT i
2720     REM Interval width 
2730     LET width = (max - min) * 1.0 / nIntervals
2740     FOR i = 0 TO nObtained - 1
2750       LET value = numberArray(i)
2760       LET k = 1
2770       DO WHILE k < nIntervals AND value > min + k * width
2780         LET k = k + 1
2790       LOOP
2800       LET count(k-1) = count(k-1) + 1
2810       IF count(k-1) > count(kMaxCount) THEN
2820         LET kMaxCount = k-1
2830       END IF
2840     NEXT i
2850     CALL drawBarChart(count, nIntervals)
2860     PRINT "Interval with max count: "; kMaxCount; " ("; count(kMaxCount); ")"
2870     FOR k = 0 TO nIntervals-1
2880       PRINT count(k); " numbers in interval "; k; " ("; min + k * width; " ... "; min + (k+1) * width; ")"
2890     NEXT k
2900   ELSE
2910     PRINT "No numbers read."
2920   END IF
2930 END IF
2940 END
