<?xml version="1.0" encoding="ISO-8859-1"?>
<plugins>
    
	<plugin title="Pascal" 				class="lu.fisch.structorizer.parsers.D7Parser" icon="" />
	<plugin title="ANSI-C99" 			class="lu.fisch.structorizer.parsers.C99Parser" icon="" >
		<option name="typeNames" type="String" title="Externally defined type names" help="Comma-separated list of typedefs defined outside the source but referred to within (just to pass the syntax check)" />
		<option name="redundantNames" type="String" title="Redundant pre-processor names or macros" help="Comma-separated list of names or macros (with empty parentheses) to be ignored on parsing" />
		<option name="use_WINAPI_defines" type="Boolean" title="Use type names and defines from WINAPI" help="Enable this if the source file refers to many WINAPI type names or dummy defines like WINAPI" />
		<option name="use_MinGw_defines" type="Boolean" title="Use type names and defines from MinGw" help="Enable this if the source file refers to many MinGw type names or dummy defines" />
		<option name="definesToConstants" type="Boolean" title="Convert #defines to constants" help="Enable this if included defines that seem to represent value constants are to be converted to constant definitions if possible" />
	</plugin>
	<plugin title="COBOL" 				class="lu.fisch.structorizer.parsers.COBOLParser" icon="" >
		<option name="debugLines" type="Boolean" title="Import Debug lines as valid code" help="Select this to import debug lines as valid code, otherwise they will be converted to comments &quot;DEBUG ...&quot;." />
		<option name="decimalComma" type="Boolean" title="Decimal comma (instead of decimal point)" help="Select this if decimal and float literals are written with decimal comma instead of decimal point in the code."/>
		<option name="fixedForm" type="Boolean" title="Fixed-form format" help="Select this if the source file is in fixed-form reference format, otherwise free-form will be assumed."/>
		<option name="fixedColumnIndicator" type="Unsigned" title="Indicator column in fixed format" help="Number of the indicator column (in fixed format; default: 7)." default="7" />
		<option name="fixedColumnText" type="Unsigned" title="Column of ignored text in fixed format" help="Column number where the so-called Program Name Area begins (in fixed format; default: 73)." default="73" />
		<option type="Enum" name="tidyupPerformThru" title="Tidy up routine call chains (after PERFORM THRU)" help="Chained calls resulting from PERFORM THRU will usually be parted, expendable calls and routines discarded. Change this e.g. for import forensics." default="tidy calls and routines">
			<item value="tidy calls and routines" />
			<item value="tidy calls only" />
			<item value="don't tidy" />
		</option>
	</plugin>
	<plugin title="Java-SE8" 			class="lu.fisch.structorizer.parsers.JavaParser" icon="">
		<option name="convert_syntax" type="Boolean" title="Convert declarations etc. to Pascal/Structorizer style" help="This setting slightly raises the chance of executability and re-export in Structorizer" default="true" />
		<option name="dissect_anon_inner_class" type="Boolean" title="Dissect anonymous inner classes into diagrams" help="Otherwise on-the-fly-defined subclasses will be passed as very long source code expressions to the instantiation element." default="true" />
		<option name="separate_angular_brackets" type="Boolean" title="Separate >> of nested type parameters to > >" help="Heuristic preprocessing to avoid nested type parameter closing be mistaken for shift operator '>>'. If it overdoes, do it manually." default="true" />
	</plugin>
	<plugin title="Processing" 			class="lu.fisch.structorizer.parsers.ProcessingParser" icon="">
		<option name="convert_syntax" type="Boolean" title="Convert declarations etc. to Pascal/Structorizer style" help="This setting slightly raises the chance of executability and re-export in Structorizer" default="true" />
		<option name="dissect_anon_inner_class" type="Boolean" title="Dissect anonymous inner classes into diagrams" help="Otherwise on-the-fly-defined subclasses will be passed as very long source code expressions to the instantiation element." default="true" />
		<option name="separate_angular_brackets" type="Boolean" title="Separate >> of nested type parameters to > >" help="Heuristic preprocessing to avoid nested type parameter closing be mistaken for shift operator '>>'. If it overdoes, do it manually." default="true" />
	</plugin>
    
</plugins>
